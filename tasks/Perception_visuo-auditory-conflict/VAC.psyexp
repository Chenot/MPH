<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.4">
  <Settings>
    <Param val="1" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="completionURL" valType="str" updates="None" name="Completion URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="False" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="" valType="str" updates="None" name="OSF Project ID"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="VAC" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="main">
      <RoutineSettingsComponent name="main" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="main" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="cross" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="cross" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="visual_stim" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="visual_stim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="key_response" plugin="None">
        <Param val="'d','k'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="LSL_stimulus" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="marker = `stimulus_${position_visual}_${position_auditory}_${congruence}`;&amp;#10;send_marker(marker);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="marker = f&quot;stimulus_{position_visual}_{position_auditory}_{congruence}&quot;&amp;#10;send_marker(marker)  # Function to send the LSL marker&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="answer_corr = `response_${key_response.corr}`;&amp;#10;send_marker(answer_corr);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="answer_corr = f&quot;response_{key_response.corr}&quot;&amp;#10;send_marker(answer_corr)  # Function to send the LSL marker&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_stimulus" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# At the beginning of the experiment&amp;#10;from psychopy import prefs&amp;#10;prefs.hardware['audioLib'] = ['pyo']&amp;#10;from psychopy import sound&amp;#10;&amp;#10;# Paths to the sound files&amp;#10;left_sound_file = 'ressources/left.wav'&amp;#10;right_sound_file = 'ressources/right.wav'&amp;#10;&amp;#10;# Load the sound files&amp;#10;left_stim = sound.Sound(left_sound_file, stereo=True)&amp;#10;right_stim = sound.Sound(right_sound_file, stereo=True)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {prefs} from 'psychopy';&amp;#10;import {sound} from 'psychopy';&amp;#10;prefs.hardware[&quot;audioLib&quot;] = [&quot;pyo&quot;];&amp;#10;left_sound_file = &quot;ressources/left.wav&quot;;&amp;#10;right_sound_file = &quot;ressources/right.wav&quot;;&amp;#10;left_stim = new sound.Sound(left_sound_file, {&quot;stereo&quot;: true});&amp;#10;right_stim = new sound.Sound(right_sound_file, {&quot;stereo&quot;: true});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((position_visual === &quot;left&quot;)) {&amp;#10;    visual_stim.pos = [(- 0.5), 0];&amp;#10;} else {&amp;#10;    visual_stim.pos = [0.5, 0];&amp;#10;}&amp;#10;if ((position_auditory === &quot;left&quot;)) {&amp;#10;    left_stim.play();&amp;#10;} else {&amp;#10;    right_stim.play();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the position of the visual stimulus&amp;#10;if position_visual == 'left':&amp;#10;    visual_stim.pos = (-0.5, 0)&amp;#10;else:&amp;#10;    visual_stim.pos = (0.5, 0)&amp;#10;&amp;#10;# Play the appropriate auditory stimulus&amp;#10;if position_auditory == 'left':&amp;#10;    left_stim.play()&amp;#10;else:&amp;#10;    right_stim.play()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_stimulus" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_practice1">
      <RoutineSettingsComponent name="instructions_practice1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_practice1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="startInst" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startInst" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="InstructionsText" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_InstructionsText" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText.setText(instructions[&quot;Text_instructions1&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the first set of instructions&amp;#10;InstructionsText.setText(instructions['Text_instructions1'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="nametask" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nametask" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_nametask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="nametask.setText(instructions[&quot;name_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="nametask.setText(instructions['name_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nametask" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_VAC" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;VAC_start&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('VAC_start')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;VAC_practice_start&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('VAC_practice_start')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_VAC" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="thanks">
      <RoutineSettingsComponent name="thanks" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="thanks" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText4" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="LSL_VAC_end" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;VAC_end&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('VAC_end')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_VAC_end" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_InstructionsText4" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText4.setText(instructions[&quot;Text_end_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText4.setText(instructions['Text_end_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_end" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_end" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="init">
      <RoutineSettingsComponent name="init" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="init" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="define_block" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import pandas as pd&amp;#10;import psychopy.logging as logging&amp;#10;&amp;#10;# Set logging level to WARNING to suppress INFO and DEBUG messages&amp;#10;logging.console.setLevel(logging.WARNING)&amp;#10;&amp;#10;# Load the scenario CSV file&amp;#10;scenario_df = pd.read_csv('visual_auditory_conflict_task_scenario.csv')&amp;#10;&amp;#10;# Filter the practice trials&amp;#10;practice_indices = scenario_df.index[(scenario_df['block'] == 'practice')].tolist()&amp;#10;selected_rows_practice = f&quot;{practice_indices[0]}:{practice_indices[-1] + 1}&quot; if practice_indices else &quot;&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as pd from 'pandas';&amp;#10;import * as logging from 'psychopy/logging';&amp;#10;logging.console.setLevel(logging.WARNING);&amp;#10;scenario_df = pd.read_csv(&quot;visual_auditory_conflict_task_scenario.csv&quot;);&amp;#10;practice_indices = scenario_df.index[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)].tolist();&amp;#10;selected_rows_practice = (practice_indices ? `${practice_indices[0]}:${(practice_indices.slice((- 1))[0] + 1)}` : &quot;&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="language" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;if language == &quot;English&quot;:&amp;#10;    instructions = {&amp;#10;        'name_task' : 'VISUAL-AUDITORY CONFLICT',&amp;#10;        'Text_instructions1': &quot;Welcome to the Visual-Auditory Conflict task.\n\nIn this task, you will first need to focus on the fixation cross in the center of the screen.\nA circle will then appear on either the left or right side of the screen, while a tone will be simultaneously emitted in either the left or right speaker.\n\nYour goal is to respond to the visual stimulus (circle) in some trials and to the auditory stimulus (sound) in others.\n\nPress the spacebar to continue&quot;,&amp;#10;        'Text_instructions2': &quot;Let's begin with practice.\n\nIn the practice, you will see which stimulus you need to respond with a word on the top of the screen (e.g. visual or auditory).\n\nPress 'd' when the stimulus is on the left, or 'k' when it is on the right.\n\nPress the spacebar to start the practice.&quot;,&amp;#10;        'Text_trainingover': &quot;The training is now over.\nPress the spacebar to continue.&quot;,&amp;#10;        'Text_start_visualtask': &quot;Now we shall begin with a visual block.\n\nIn this block, you should indicate the side where the circle appears, ignoring the sound.\nPress 'd' when it's on the left and 'k' when it's on the right.\nTry to be as quick and as accurate as possible.\n\nReady?\n\nPress the spacebar to start.&quot;,&amp;#10;        'Text_start_auditorytask': &quot;We will now begin the auditory block.\n\nIn this block, you should indicate the side where the sound appears, ignoring the circle.\nPress 'd' when it's on the left and 'k' when it's on the right.\nTry to be as quick and as accurate as possible while keeping your EYES OPEN.\n\nReady?\n\nPress the spacebar to start.&quot;,&amp;#10;        'Text_end_task': &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;&amp;#10;    }&amp;#10;else:  # Default to French if any issues&amp;#10;    instructions = {&amp;#10;        'name_task' : 'CONFLIT VISUO-AUDITIF',&amp;#10;        'Text_instructions1': &quot;Bienvenue dans la tâche de Conflit Visuo-Auditif.\n\nDans cette tâche, vous devrez d'abord vous concentrer sur la croix de fixation au centre de l'écran.\nUn cercle apparaîtra ensuite soit à gauche, soit à droite de l'écran, tandis qu'un son sera émis soit dans le haut-parleur gauche, soit dans le haut-parleur droit.\n\nVotre objectif est de répondre au stimulus visuel (cercle) dans certains essais et au stimulus auditif (son) dans d'autres.\n\nAppuez sur la barre d'espace pour continuer&quot;,&amp;#10;        'Text_instructions2': &quot;Commençons par un entraînement.\n\nDans cet entraînement, vous verrez à quel stimulus vous devez répondre avec un mot en haut de l'écran (par exemple, visuel ou auditif).\n\nAppuyez sur 'd' quand le stimulus est à gauche, ou sur 'k' quand il est à droite.\n\nAppuyez sur la barre d'espace pour commencer l'entraînement.&quot;,&amp;#10;        'Text_trainingover': &quot;L'entraînement est maintenant terminé.\nAppuyez sur la barre d'espace pour continuer.&quot;,&amp;#10;        'Text_start_visualtask': &quot;Nous allons maintenant commencer par un bloc visuel.\n\nDans ce bloc, vous devez indiquer de quel côté le cercle apparaît, en ignorant le son. Appuyez sur 'd' quand il est à gauche et sur 'k' quand il est à droite.\nEssayez d'être aussi rapide et précis que possible.\n\nPrêt·e ?\n\nAppuyez sur la barre d'espace pour commencer.&quot;,&amp;#10;        'Text_start_auditorytask': &quot;Pause\n\nNous allons maintenant commencer le bloc auditif.\n\nDans ce bloc, vous devez indiquer le côté où le son est entendu, en ignorant le cercle. Appuyez sur 'd' quand il est à gauche et sur 'k' quand il est à droite.\nEssayez d'être aussi rapide et précis que possible tout en gardant vos YEUX OUVERTS.\n\nPrêt·e ?\n\nAppuyez sur la barre d'espace pour commencer.&quot;,&amp;#10;        'Text_end_task': &quot;Cette tâche est maintenant terminée.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;&amp;#10;    }&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;VISUAL-AUDITORY CONFLICT&quot;, &quot;Text_instructions1&quot;: &quot;Welcome to the Visual-Auditory Conflict task.\n\nIn this task, you will first need to focus on the fixation cross in the center of the screen.\nA circle will then appear on either the left or right side of the screen, while a tone will be simultaneously emitted in either the left or right speaker.\n\nYour goal is to respond to the visual stimulus (circle) in some trials and to the auditory stimulus (sound) in others.\n\nPress the spacebar to continue&quot;, &quot;Text_instructions2&quot;: &quot;Let's begin with practice.\n\nIn the practice, you will see which stimulus you need to respond with a word on the top of the screen (e.g. visual or auditory).\n\nPress 'd' when the stimulus is on the left, or 'k' when it is on the right.\n\nPress the spacebar to start the practice.&quot;, &quot;Text_trainingover&quot;: &quot;The training is now over.\nPress the spacebar to continue.&quot;, &quot;Text_start_visualtask&quot;: &quot;Now we shall begin with a visual block.\n\nIn this block, you should indicate the side where the circle appears, ignoring the sound.\nPress 'd' when it's on the left and 'k' when it's on the right.\nTry to be as quick and as accurate as possible.\n\nReady?\n\nPress the spacebar to start.&quot;, &quot;Text_start_auditorytask&quot;: &quot;We will now begin the auditory block.\n\nIn this block, you should indicate the side where the sound appears, ignoring the circle.\nPress 'd' when it's on the left and 'k' when it's on the right.\nTry to be as quick and as accurate as possible while keeping your EYES OPEN.\n\nReady?\n\nPress the spacebar to start.&quot;, &quot;Text_end_task&quot;: &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;};&amp;#10;} else {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;CONFLIT VISUO-AUDITIF&quot;, &quot;Text_instructions1&quot;: &quot;Bienvenue dans la t\u00e2che de Conflit Visuo-Auditif.\n\nDans cette t\u00e2che, vous devrez d'abord vous concentrer sur la croix de fixation au centre de l'\u00e9cran.\nUn cercle appara\u00eetra ensuite soit \u00e0 gauche, soit \u00e0 droite de l'\u00e9cran, tandis qu'un son sera \u00e9mis soit dans le haut-parleur gauche, soit dans le haut-parleur droit.\n\nVotre objectif est de r\u00e9pondre au stimulus visuel (cercle) dans certains essais et au stimulus auditif (son) dans d'autres.\n\nAppuez sur la barre d'espace pour continuer&quot;, &quot;Text_instructions2&quot;: &quot;Commen\u00e7ons par un entra\u00eenement.\n\nDans cet entra\u00eenement, vous verrez \u00e0 quel stimulus vous devez r\u00e9pondre avec un mot en haut de l'\u00e9cran (par exemple, visuel ou auditif).\n\nAppuyez sur 'd' quand le stimulus est \u00e0 gauche, ou sur 'k' quand il est \u00e0 droite.\n\nAppuyez sur la barre d'espace pour commencer l'entra\u00eenement.&quot;, &quot;Text_trainingover&quot;: &quot;L'entra\u00eenement est maintenant termin\u00e9.\nAppuyez sur la barre d'espace pour continuer.&quot;, &quot;Text_start_visualtask&quot;: &quot;Nous allons maintenant commencer par un bloc visuel.\n\nDans ce bloc, vous devez indiquer de quel c\u00f4t\u00e9 le cercle appara\u00eet, en ignorant le son. Appuyez sur 'd' quand il est \u00e0 gauche et sur 'k' quand il est \u00e0 droite.\nEssayez d'\u00eatre aussi rapide et pr\u00e9cis que possible.\n\nPr\u00eat\u00b7e ?\n\nAppuyez sur la barre d'espace pour commencer.&quot;, &quot;Text_start_auditorytask&quot;: &quot;Pause\n\nNous allons maintenant commencer le bloc auditif.\n\nDans ce bloc, vous devez indiquer le c\u00f4t\u00e9 o\u00f9 le son est entendu, en ignorant le cercle. Appuyez sur 'd' quand il est \u00e0 gauche et sur 'k' quand il est \u00e0 droite.\nEssayez d'\u00eatre aussi rapide et pr\u00e9cis que possible tout en gardant vos YEUX OUVERTS.\n\nPr\u00eat\u00b7e ?\n\nAppuyez sur la barre d'espace pour commencer.&quot;, &quot;Text_end_task&quot;: &quot;Cette t\u00e2che est maintenant termin\u00e9e.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;};&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="language" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import socket&amp;#10;import json&amp;#10;import threading&amp;#10;from pylsl import local_clock&amp;#10;&amp;#10;# Function to send markers to the LSL server&amp;#10;def send_marker(marker):&amp;#10;    event = {&amp;#10;        'marker': marker,&amp;#10;        'timestamp': local_clock()&amp;#10;    }&amp;#10;    message = json.dumps(event)&amp;#10;    &amp;#10;    def send():&amp;#10;        try:&amp;#10;            # Connect to the socket server and send the marker with a timeout&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&amp;#10;            client_socket.settimeout(0.1)  # Set timeout to 100 milliseconds&amp;#10;            client_socket.connect(('localhost', 5000))&amp;#10;            client_socket.sendall(message.encode('utf-8'))&amp;#10;            client_socket.close()&amp;#10;        except (ConnectionRefusedError, socket.timeout):&amp;#10;            print(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;)&amp;#10;    &amp;#10;    # Create and start a thread to send the marker&amp;#10;    send_thread = threading.Thread(target=send)&amp;#10;    send_thread.start()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as socket from 'socket';&amp;#10;import * as json from 'json';&amp;#10;import * as threading from 'threading';&amp;#10;import {local_clock} from 'pylsl';&amp;#10;function send_marker(marker) {&amp;#10;    var event, message, send_thread;&amp;#10;    event = {&quot;marker&quot;: marker, &quot;timestamp&quot;: local_clock()};&amp;#10;    message = json.dumps(psychoJS.eventManager);&amp;#10;    function send() {&amp;#10;        var client_socket;&amp;#10;        try {&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM);&amp;#10;            client_socket.settimeout(0.1);&amp;#10;            client_socket.connect([&quot;localhost&quot;, 5000]);&amp;#10;            client_socket.sendall(message.encode(&quot;utf-8&quot;));&amp;#10;            client_socket.close();&amp;#10;        } catch(e) {&amp;#10;            if (((e instanceof ConnectionRefusedError) || (e instanceof socket.timeout))) {&amp;#10;                console.log(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;);&amp;#10;            } else {&amp;#10;                throw e;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    send_thread = new threading.Thread({&quot;target&quot;: send});&amp;#10;    send_thread.start();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="ActivateWindow" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="win.winHandle.activate()  # Ensure the PsychoPy window is the primary window&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="psychoJS.window.winHandle.activate();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ActivateWindow" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="DeactivateMouse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="event.Mouse(visible=False)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: false});&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="DeactivateMouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="QuitTask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy import core, event&amp;#10;&amp;#10;# Add a global shutdown key: Ctrl + Q to quit the experiment&amp;#10;event.globalKeys.add(key='q', modifiers=['ctrl'], func=core.quit)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {core, event} from 'psychopy';&amp;#10;psychoJS.eventManager.globalKeys.add({&quot;key&quot;: &quot;q&quot;, &quot;modifiers&quot;: [&quot;ctrl&quot;], &quot;func&quot;: core.quit});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="QuitTask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter">
      <RoutineSettingsComponent name="block_counter" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;if ((block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length)) {&amp;#10;    testblocks.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    block_n = block_index;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1&amp;#10;&amp;#10;# Determine the current block type and number&amp;#10;# block_type = 'test'&amp;#10;if block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    # Skip the remaining test blocks&amp;#10;    testblocks.finished = True&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    block_n = block_index  # block_n in CSV starts from 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_testblock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="send_marker(&quot;start_VAC_block&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="send_marker(&quot;start_VAC_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_testblock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="ITI">
      <RoutineSettingsComponent name="ITI" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ITI" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="cross_ITI" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="cross_ITI" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$ITI" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="startAuditoryTask">
      <RoutineSettingsComponent name="startAuditoryTask" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="startAuditoryTask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsTextAuditory" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsTextAuditory" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go_Auditory" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go_Auditory" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsTextAuditory" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsTextAuditory.setText(instructions[&quot;Text_start_auditorytask&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the second set of instructions&amp;#10;InstructionsTextAuditory.setText(instructions['Text_start_auditorytask'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsTextAuditory" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_auditory_block" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;start_auditory_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;start_auditory_block&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_auditory_block" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 2  # auditory block" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="block_index = 2;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="ITI_practice">
      <RoutineSettingsComponent name="ITI_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ITI_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="cross_ITI_practice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="cross_ITI_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$ITI" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_ITI_practice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_ITI_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$ITI" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_text_ITI_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;current_block_type = scenario_df[((scenario_df[&quot;block&quot;] === &quot;practice&quot;) &amp; (scenario_df[&quot;block_n&quot;] === block_index))][&quot;block_type&quot;].values[0];&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    if ((current_block_type === &quot;visual&quot;)) {&amp;#10;        text_ITI_practice.text = &quot;visual&quot;;&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;auditory&quot;)) {&amp;#10;            text_ITI_practice.text = &quot;auditory&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((current_block_type === &quot;visual&quot;)) {&amp;#10;        text_ITI_practice.text = &quot;visuel&quot;;&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;auditory&quot;)) {&amp;#10;            text_ITI_practice.text = &quot;auditif&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Determine the block type for the current block&amp;#10;current_block_type = scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)]['block_type'].values[0]&amp;#10;&amp;#10;if language == &quot;English&quot;:&amp;#10;    if current_block_type == 'visual':&amp;#10;        text_ITI_practice.text = 'visual'&amp;#10;    elif current_block_type == 'auditory':&amp;#10;        text_ITI_practice.text = 'auditory'&amp;#10;else:&amp;#10;    if current_block_type == 'visual':&amp;#10;        text_ITI_practice.text = 'visuel'&amp;#10;    elif current_block_type == 'auditory':&amp;#10;        text_ITI_practice.text = 'auditif'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_text_ITI_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="main_practice">
      <RoutineSettingsComponent name="main_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="main_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="cross_practice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="cross_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="visual_stim_practice" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="visual_stim_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="key_response_practice" plugin="None">
        <Param val="'d','k'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_response_practice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="LSL_stimulus_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="marker = `stimulus_${position_visual}_${position_auditory}_${congruence}`;&amp;#10;send_marker(marker);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="marker = f&quot;stimulus_{position_visual}_{position_auditory}_{congruence}&quot;&amp;#10;send_marker(marker)  # Function to send the LSL marker&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="answer_corr = `response_${key_response.corr}`;&amp;#10;send_marker(answer_corr);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="answer_corr = f&quot;response_{key_response.corr}&quot;&amp;#10;send_marker(answer_corr)  # Function to send the LSL marker&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_stimulus_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# At the beginning of the experiment&amp;#10;from psychopy import prefs&amp;#10;prefs.hardware['audioLib'] = ['pyo']&amp;#10;from psychopy import sound&amp;#10;&amp;#10;# Paths to the sound files&amp;#10;left_sound_file = 'ressources/left.wav'&amp;#10;right_sound_file = 'ressources/right.wav'&amp;#10;&amp;#10;# Load the sound files&amp;#10;left_stim = sound.Sound(left_sound_file, stereo=True)&amp;#10;right_stim = sound.Sound(right_sound_file, stereo=True)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {prefs} from 'psychopy';&amp;#10;import {sound} from 'psychopy';&amp;#10;prefs.hardware[&quot;audioLib&quot;] = [&quot;pyo&quot;];&amp;#10;left_sound_file = &quot;ressources/left.wav&quot;;&amp;#10;right_sound_file = &quot;ressources/right.wav&quot;;&amp;#10;left_stim = new sound.Sound(left_sound_file, {&quot;stereo&quot;: true});&amp;#10;right_stim = new sound.Sound(right_sound_file, {&quot;stereo&quot;: true});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((position_visual === &quot;left&quot;)) {&amp;#10;    visual_stim_practice.pos = [(- 0.5), 0];&amp;#10;} else {&amp;#10;    visual_stim_practice.pos = [0.5, 0];&amp;#10;}&amp;#10;if ((position_auditory === &quot;left&quot;)) {&amp;#10;    left_stim.play();&amp;#10;} else {&amp;#10;    right_stim.play();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the position of the visual stimulus&amp;#10;if position_visual == 'left':&amp;#10;    visual_stim_practice.pos = (-0.5, 0)&amp;#10;else:&amp;#10;    visual_stim_practice.pos = (0.5, 0)&amp;#10;&amp;#10;# Play the appropriate auditory stimulus&amp;#10;if position_auditory == 'left':&amp;#10;    left_stim.play()&amp;#10;else:&amp;#10;    right_stim.play()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_stimulus_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_main_practice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_main_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_text_main_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;current_block_type = scenario_df[((scenario_df[&quot;block&quot;] === &quot;practice&quot;) &amp; (scenario_df[&quot;block_n&quot;] === block_index))][&quot;block_type&quot;].values[0];&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    if ((current_block_type === &quot;visual&quot;)) {&amp;#10;        text_main_practice.text = &quot;visual&quot;;&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;auditory&quot;)) {&amp;#10;            text_main_practice.text = &quot;auditory&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((current_block_type === &quot;visual&quot;)) {&amp;#10;        text_main_practice.text = &quot;visuel&quot;;&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;auditory&quot;)) {&amp;#10;            text_main_practice.text = &quot;auditif&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Determine the block type for the current block&amp;#10;current_block_type = scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)]['block_type'].values[0]&amp;#10;&amp;#10;if language == &quot;English&quot;:&amp;#10;    if current_block_type == 'visual':&amp;#10;        text_main_practice.text = 'visual'&amp;#10;    elif current_block_type == 'auditory':&amp;#10;        text_main_practice.text = 'auditory'&amp;#10;else:&amp;#10;    if current_block_type == 'visual':&amp;#10;        text_main_practice.text = 'visuel'&amp;#10;    elif current_block_type == 'auditory':&amp;#10;        text_main_practice.text = 'auditif'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_text_main_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_test">
      <RoutineSettingsComponent name="instructions_test" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_test" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsTextTask" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsTextTask" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_Instructions" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="current_block_type = scenario_df[((scenario_df[&quot;block&quot;] === &quot;test&quot;) &amp; (scenario_df[&quot;block_n&quot;] === block_index))][&quot;block_type&quot;].values[0];&amp;#10;if ((current_block_type === &quot;visual&quot;)) {&amp;#10;    InstructionsTextTask.text = instructions[&quot;Text_start_visualtask&quot;];&amp;#10;} else {&amp;#10;    if ((current_block_type === &quot;auditory&quot;)) {&amp;#10;        InstructionsTextTask.text = instructions[&quot;Text_start_auditorytask&quot;];&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Extract block_type for the current block&amp;#10;current_block_type = scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)]['block_type'].values[0]&amp;#10;&amp;#10;# Set the instruction text based on the block type&amp;#10;if current_block_type == 'visual':&amp;#10;    InstructionsTextTask.text = instructions['Text_start_visualtask']&amp;#10;elif current_block_type == 'auditory':&amp;#10;    InstructionsTextTask.text = instructions['Text_start_auditorytask']&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_Instructions" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="training_over">
      <RoutineSettingsComponent name="training_over" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="training_over" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="trainingover_text" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="trainingover_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go_2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_trainingover_text" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="trainingover_text.text = instructions[&quot;Text_trainingover&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="trainingover_text.text = instructions['Text_trainingover']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_trainingover_text" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_test = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for test&amp;#10;is_test = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_practice2">
      <RoutineSettingsComponent name="instructions_practice2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_practice2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="startInst_2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startInst_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="InstructionsText_2" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_InstructionsText_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText_2.setText(instructions[&quot;Text_instructions2&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the first set of instructions&amp;#10;InstructionsText_2.setText(instructions['Text_instructions2'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="nametask_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nametask_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_nametask_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="nametask_2.setText(instructions[&quot;name_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="nametask_2.setText(instructions['name_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nametask_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for test&amp;#10;is_practice = True" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_practice = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="init"/>
    <Routine name="instructions_practice1"/>
    <Routine name="instructions_practice2"/>
    <LoopInitiator loopType="TrialHandler" name="practiceTrials">
      <Param name="Selected rows" updates="None" val="$selected_rows_practice" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 2), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 4), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 6), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 8), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 2), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 4), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 6), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 8), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 9), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 10), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 11), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 12), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 13), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 14), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 15), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 16), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 17), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 18), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 19), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 20), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 21), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 22), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 23), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 24), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 25), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 26), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 27), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 28), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 29), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 30), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 31), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 32), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 33), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 34), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 35), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 36), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 37), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 38), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 39), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 40), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 41), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 42), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 43), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 44), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 45), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 46), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 47), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 48), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 2), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 4), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 6), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 8), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 9), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 10), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 11), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 12), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 13), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 14), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 15), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 16), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 17), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 18), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 19), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 20), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 21), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 22), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 23), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 24), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 25), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 26), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 27), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 28), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 29), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 30), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 31), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 32), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 33), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 34), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 35), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 36), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 37), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 38), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 39), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 40), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 41), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 42), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 43), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 44), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 45), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 46), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 47), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 48), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="visual_auditory_conflict_task_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="practiceTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ITI_practice"/>
    <Routine name="main_practice"/>
    <LoopTerminator name="practiceTrials"/>
    <Routine name="training_over"/>
    <LoopInitiator loopType="TrialHandler" name="testblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 2), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 4), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 6), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 8), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 2), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 4), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 6), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 8), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 9), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 10), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 11), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 12), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 13), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 14), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 15), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 16), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 17), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 18), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 19), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 20), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 21), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 22), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 23), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 24), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 25), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 26), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 27), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 28), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 29), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 30), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 31), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 32), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 33), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 34), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 35), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 36), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 37), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 38), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 39), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 40), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 41), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 42), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 43), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 44), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 45), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 46), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 47), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 48), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 2), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 4), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 6), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 8), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 9), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 10), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 11), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 12), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 13), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 14), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 15), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 16), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 17), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 18), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 19), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 20), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 21), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 22), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 23), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 24), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 25), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 26), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 27), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 28), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 29), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 30), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 31), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 32), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 33), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 34), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 35), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 36), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 37), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 38), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 39), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 40), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 41), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 42), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 43), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 44), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 45), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 46), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 47), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 48), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="visual_auditory_conflict_task_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="testblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter"/>
    <Routine name="instructions_test"/>
    <LoopInitiator loopType="TrialHandler" name="testTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 2), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'visual'), ('trial', 4), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 6), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'practice'), ('block_n', 0), ('block_type', 'auditory'), ('trial', 8), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 2), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 4), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 6), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 8), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 9), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 10), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 11), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 12), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 13), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 14), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 15), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 16), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 17), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 18), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 19), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 20), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 21), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 22), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 23), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 24), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 25), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 26), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 27), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 28), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 29), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 30), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 31), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 32), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 33), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 34), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 35), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 36), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 37), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 38), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 39), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 40), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 41), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 42), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 43), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 44), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 45), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 46), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 47), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'visual'), ('trial', 48), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 1), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 2), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 3), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 4), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 5), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 6), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 7), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 8), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 9), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 10), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 11), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 12), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 13), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 14), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 15), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 16), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 17), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 18), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 19), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 20), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 21), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 22), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 23), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 24), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 25), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 26), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 27), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 28), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 29), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 30), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 31), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 32), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 33), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 34), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 35), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 36), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 37), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 38), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 39), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 40), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 41), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 42), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 43), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 44), ('position_visual', 'right'), ('position_auditory', 'right'), ('congruence', 'congruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 45), ('position_visual', 'left'), ('position_auditory', 'right'), ('congruence', 'incongruent'), ('correct_resp', 'k')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 46), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 47), ('position_visual', 'left'), ('position_auditory', 'left'), ('congruence', 'congruent'), ('correct_resp', 'd')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'auditory'), ('trial', 48), ('position_visual', 'right'), ('position_auditory', 'left'), ('congruence', 'incongruent'), ('correct_resp', 'd')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="visual_auditory_conflict_task_scenario.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="testTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ITI"/>
    <Routine name="main"/>
    <LoopTerminator name="testTrials"/>
    <LoopTerminator name="testblocks"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>

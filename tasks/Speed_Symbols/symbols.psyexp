<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.4">
  <Settings>
    <Param val="1" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="completionURL" valType="str" updates="None" name="Completion URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="False" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="" valType="str" updates="None" name="OSF Project ID"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="symbols" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="thanks">
      <RoutineSettingsComponent name="thanks" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="thanks" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText4" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="LSL_Symbols_end" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;symbols_end&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('symbols_end')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_Symbols_end" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_InstructionsText4" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText4.setText(instructions[&quot;Text_end_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText4.setText(instructions['Text_end_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_end" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_end" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pause">
      <RoutineSettingsComponent name="pause" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="pause" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText3" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText3.text = instructions['Text3']&amp;#10;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText3.setText(instructions[&quot;Text_pause_between_blocks&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText3.setText(instructions['Text_pause_between_blocks'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_block_counter" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((is_test &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length))) {&amp;#10;    testblocks.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if the block is test and block_n is to skip the loop&amp;#10;if is_test and block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    testblocks.finished = True  # Skip the loop" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_block_counter" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="init">
      <RoutineSettingsComponent name="init" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="init" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="define_block" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy import core&amp;#10;import pandas as pd&amp;#10;from psychopy import logging as psychoLogging&amp;#10;&amp;#10;# Set logging level to WARNING to suppress INFO and DEBUG messages&amp;#10;psychoLogging.console.setLevel(logging.ERROR)&amp;#10;pd.options.mode.chained_assignment = None  # default='warn'&amp;#10;&amp;#10;# Load the scenario CSV file&amp;#10;scenario_df = pd.read_csv('symbols_scenario.csv')&amp;#10;&amp;#10;# Filter the practice trials for mouse and keyboard&amp;#10;practice_indices = scenario_df.index[(scenario_df['block'] == 'practice')].tolist()&amp;#10;&amp;#10;# Convert indices to PsychoPy's format (string of ranges)&amp;#10;selected_rows_practice = f&quot;{practice_indices[0]}:{practice_indices[-1] + 1}&quot; if practice_indices else &quot;&quot;&amp;#10;&amp;#10;# Start clock&amp;#10;stimulus_clock = core.Clock()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {core} from 'psychopy';&amp;#10;import * as pd from 'pandas';&amp;#10;import {logging as psychoLogging} from 'psychopy';&amp;#10;psychoLogging.console.setLevel(logging.ERROR);&amp;#10;pd.options.mode.chained_assignment = null;&amp;#10;scenario_df = pd.read_csv(&quot;symbols_scenario.csv&quot;);&amp;#10;practice_indices = scenario_df.index[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)].tolist();&amp;#10;selected_rows_practice = (practice_indices ? `${practice_indices[0]}:${(practice_indices.slice((- 1))[0] + 1)}` : &quot;&quot;);&amp;#10;stimulus_clock = new util.Clock();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="language" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Define instructions based on the selected language&amp;#10;if language == &quot;English&quot;:&amp;#10;    instructions = {&amp;#10;        'name_task' : 'SYMBOL SEARCH',&amp;#10;        'Text_instructions': &quot;Welcome to the symbol search task.\n\nIn this task, your goal is to determine if either of the displayed symbols on the right is present in the row of six symbols on the right.\n\nPress 'k' if at least one symbol is present (the symbol must be EXACTLY the same, with the same orientation) in the row.\nPress 'd' if neither is present.\n\nFirst, we shall have a practice session.\nPress the space bar to begin.&quot;,&amp;#10;        'Text_start_task': &quot;The practice session is finished. Now we shall begin the actual experiment.\n\nReady?\n\nPress the space bar to begin.&quot;,&amp;#10;        'Text_pause_between_blocks': &quot;Pause\n\nPress the space bar when you are ready to continue.&quot;,&amp;#10;        'Text_end_task': &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;&amp;#10;    }&amp;#10;else:  # Default to French if any issues&amp;#10;    instructions = {&amp;#10;        'name_task' : 'RECHERCHE DE SYMBOLES',&amp;#10;        'Text_instructions': &quot;Bienvenue dans la tâche de recherche de symboles.\n\nDans cette tâche, votre objectif est de déterminer si l'un des symboles affichés à gauche est présent dans la rangée de six symboles à droite.\n\nAppuyez sur 'k' si au moins l'un des deux symboles est présent (le symbole doit être EXACTEMENT le même, avec la même orientation).\n Appuyez sur 'd' si aucun n'est présent.\n\nD'abord, nous allons faire une séance d'entraînement.\nAppuyez sur la barre d'espace pour commencer.&quot;,&amp;#10;        'Text_start_task': &quot;L'entraînement est terminé. Nous allons maintenant commencer la vraie tâche.\n\nPrêt·e ?\n\nAppuyez sur la barre d'espace pour commencer.&quot;,&amp;#10;        'Text_pause_between_blocks': &quot;Pause\n\nAppuyez sur la barre d'espace lorsque vous êtes prêt·e à continuer.&quot;,&amp;#10;        'Text_end_task': &quot;Cette tâche est maintenant terminée.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;&amp;#10;    }&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;SYMBOL SEARCH&quot;, &quot;Text_instructions&quot;: &quot;Welcome to the symbol search task.\n\nIn this task, your goal is to determine if either of the displayed symbols on the right is present in the row of six symbols on the right.\n\nPress 'k' if at least one symbol is present (the symbol must be EXACTLY the same, with the same orientation) in the row.\nPress 'd' if neither is present.\n\nFirst, we shall have a practice session.\nPress the space bar to begin.&quot;, &quot;Text_start_task&quot;: &quot;The practice session is finished. Now we shall begin the actual experiment.\n\nReady?\n\nPress the space bar to begin.&quot;, &quot;Text_pause_between_blocks&quot;: &quot;Pause\n\nPress the space bar when you are ready to continue.&quot;, &quot;Text_end_task&quot;: &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;};&amp;#10;} else {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;RECHERCHE DE SYMBOLES&quot;, &quot;Text_instructions&quot;: &quot;Bienvenue dans la t\u00e2che de recherche de symboles.\n\nDans cette t\u00e2che, votre objectif est de d\u00e9terminer si l'un des symboles affich\u00e9s \u00e0 gauche est pr\u00e9sent dans la rang\u00e9e de six symboles \u00e0 droite.\n\nAppuyez sur 'k' si au moins l'un des deux symboles est pr\u00e9sent (le symbole doit \u00eatre EXACTEMENT le m\u00eame, avec la m\u00eame orientation).\n Appuyez sur 'd' si aucun n'est pr\u00e9sent.\n\nD'abord, nous allons faire une s\u00e9ance d'entra\u00eenement.\nAppuyez sur la barre d'espace pour commencer.&quot;, &quot;Text_start_task&quot;: &quot;L'entra\u00eenement est termin\u00e9. Nous allons maintenant commencer la vraie t\u00e2che.\n\nPr\u00eat\u00b7e ?\n\nAppuyez sur la barre d'espace pour commencer.&quot;, &quot;Text_pause_between_blocks&quot;: &quot;Pause\n\nAppuyez sur la barre d'espace lorsque vous \u00eates pr\u00eat\u00b7e \u00e0 continuer.&quot;, &quot;Text_end_task&quot;: &quot;Cette t\u00e2che est maintenant termin\u00e9e.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;};&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="language" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import socket&amp;#10;import json&amp;#10;import threading&amp;#10;from pylsl import local_clock&amp;#10;&amp;#10;# Function to send markers to the LSL server&amp;#10;def send_marker(marker):&amp;#10;    event = {&amp;#10;        'marker': marker,&amp;#10;        'timestamp': local_clock()&amp;#10;    }&amp;#10;    message = json.dumps(event)&amp;#10;    &amp;#10;    def send():&amp;#10;        try:&amp;#10;            # Connect to the socket server and send the marker with a timeout&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&amp;#10;            client_socket.settimeout(0.1)  # Set timeout to 100 milliseconds&amp;#10;            client_socket.connect(('localhost', 5000))&amp;#10;            client_socket.sendall(message.encode('utf-8'))&amp;#10;            client_socket.close()&amp;#10;        except (ConnectionRefusedError, socket.timeout):&amp;#10;            print(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;)&amp;#10;    &amp;#10;    # Create and start a thread to send the marker&amp;#10;    send_thread = threading.Thread(target=send)&amp;#10;    send_thread.start()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as socket from 'socket';&amp;#10;import * as json from 'json';&amp;#10;import * as threading from 'threading';&amp;#10;import {local_clock} from 'pylsl';&amp;#10;function send_marker(marker) {&amp;#10;    var event, message, send_thread;&amp;#10;    event = {&quot;marker&quot;: marker, &quot;timestamp&quot;: local_clock()};&amp;#10;    message = json.dumps(psychoJS.eventManager);&amp;#10;    function send() {&amp;#10;        var client_socket;&amp;#10;        try {&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM);&amp;#10;            client_socket.settimeout(0.1);&amp;#10;            client_socket.connect([&quot;localhost&quot;, 5000]);&amp;#10;            client_socket.sendall(message.encode(&quot;utf-8&quot;));&amp;#10;            client_socket.close();&amp;#10;        } catch(e) {&amp;#10;            if (((e instanceof ConnectionRefusedError) || (e instanceof socket.timeout))) {&amp;#10;                console.log(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;);&amp;#10;            } else {&amp;#10;                throw e;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    send_thread = new threading.Thread({&quot;target&quot;: send});&amp;#10;    send_thread.start();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="ActivateWindow" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="win.winHandle.activate()  # Ensure the PsychoPy window is the primary window&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="psychoJS.window.winHandle.activate();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ActivateWindow" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="DeactivateMouse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="event.Mouse(visible=False)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: false});&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="DeactivateMouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="QuitTask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy import core, event&amp;#10;&amp;#10;# Add a global shutdown key: Ctrl + Q to quit the experiment&amp;#10;event.globalKeys.add(key='q', modifiers=['ctrl'], func=core.quit)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {core, event} from 'psychopy';&amp;#10;psychoJS.eventManager.globalKeys.add({&quot;key&quot;: &quot;q&quot;, &quot;modifiers&quot;: [&quot;ctrl&quot;], &quot;func&quot;: core.quit});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="QuitTask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter">
      <RoutineSettingsComponent name="block_counter" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;if ((block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length)) {&amp;#10;    testblocks.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    block_n = block_index;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1&amp;#10;&amp;#10;# Determine the current block type and number&amp;#10;if block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    # Skip the remaining test blocks&amp;#10;    testblocks.finished = True&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    block_n = block_index  # block_n in CSV starts from 1" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_testblock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker(&quot;start_block&quot;)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_testblock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_keyboard">
      <RoutineSettingsComponent name="instructions_keyboard" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_keyboard" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText1_2" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText1_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="hey" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="startInst_2" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startInst_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText1_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText1_2.setText(instructions[&quot;Text_instructions_keyboard&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the first set of instructions&amp;#10;InstructionsText1_2.setText(instructions['Text_instructions_keyboard'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText1_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_practice_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;practice_keyboard&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('practice_keyboard')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practice_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="main_keyboard">
      <RoutineSettingsComponent name="main_keyboard" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="main_keyboard" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="stim_k" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$stimulus" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stim_k" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.12)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="30" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="Main_symbols_k" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$grid" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="Main_symbols_k" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.2)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.9, 0.24)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="LSL_stimulus_k" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if frameN == 30:&amp;#10;    send_marker(&quot;stimulus&quot;)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((frameN === 30)) {&amp;#10;    send_marker(&quot;stimulus&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus_k" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'num_1', 'num_2', 'num_3', 'num_4', 'num_5', 'num_6', 'num_7', 'num_8', 'num_9'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="30" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="startTask_keyboard">
      <RoutineSettingsComponent name="startTask_keyboard" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="startTask_keyboard" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText2_2" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText2_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go_2" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText2_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText2_2.setText(instructions[&quot;Text_start_task_keyboard&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the second set of instructions&amp;#10;InstructionsText2_2.setText(instructions['Text_start_task_keyboard'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText2_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_test_blocks_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_test_blocks_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows_keyboard" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index = 0;&amp;#10;block_type = &quot;keyboard&quot;;&amp;#10;is_test = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0&amp;#10;block_type = 'keyboard' &amp;#10;is_test = True&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows_keyboard" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions1">
      <RoutineSettingsComponent name="instructions1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText1" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="startInst" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startInst" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText1" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText1.setText(instructions[&quot;Text_instructions&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the first set of instructions&amp;#10;InstructionsText1.setText(instructions['Text_instructions'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText1" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_Symbols_start" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;symbols_start&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('symbols_start')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_Symbols_start" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;practice&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('practice')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="nametask" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nametask" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_nametask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="nametask.setText(instructions[&quot;name_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="nametask.setText(instructions['name_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nametask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="startTask">
      <RoutineSettingsComponent name="startTask" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="startTask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText2" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText2.setText(instructions[&quot;Text_start_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the second set of instructions&amp;#10;InstructionsText2.setText(instructions['Text_start_task'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_test_blocks" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_test_blocks" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_test = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for test&amp;#10;is_test = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="stimulus">
      <RoutineSettingsComponent name="stimulus" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="stimulus" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="LSL_stimulus" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;stimulus_cue&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker(&quot;stimulus_cue&quot;)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="symbols">
      <RoutineSettingsComponent name="symbols" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="symbols" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="stim1" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$stimulus1" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stim1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.7, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="stim2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$stimulus2" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stim2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.5, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="symbol1_img" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$symbol1" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="symbol1_img" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-0.1, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="symbol2_img" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$symbol2" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="symbol2_img" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.1, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="symbol3_img" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$symbol3" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="symbol3_img" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="symbol4_img" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$symbol4" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="symbol4_img" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="symbol5_img" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$symbol5" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="symbol5_img" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.7, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <PolygonComponent name="polygon_2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="LSL_stimulus_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="marker = `stimulus_trial_${trial}`;&amp;#10;send_marker(marker);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="marker = f&quot;stimulus_trial_{trial}&quot;&amp;#10;send_marker(marker)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="answer_corr = `response_${response.corr}`;&amp;#10;send_marker(answer_corr);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="answer_corr = f&quot;response_{response.corr}&quot;&amp;#10;send_marker(answer_corr)  # Function to send the LSL marker&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="response" plugin="None">
        <Param val="'d','k'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pre_stim">
      <RoutineSettingsComponent name="pre_stim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="pre_stim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="nothing" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nothing" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_cross" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_cross" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="30" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="60" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="polygon" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="2" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.6, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="60" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="init"/>
    <Routine name="instructions1"/>
    <LoopInitiator loopType="TrialHandler" name="practiceTrials">
      <Param name="Selected rows" updates="None" val="$selected_rows_practice" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 1), ('stimulus1', 'ressources/symbol_57.png'), ('stimulus2', 'ressources/symbol_24.png'), ('correct_resp', 'd'), ('symbol0', 'ressources/symbol_76.png'), ('symbol1', 'ressources/symbol_67.png'), ('symbol2', 'ressources/symbol_44.png'), ('symbol3', 'ressources/symbol_58.png'), ('symbol4', 'ressources/symbol_08.png'), ('symbol5', 'ressources/symbol_13.png'), ('symbol6', 'ressources/symbol_21.png'), ('symbol7', 'ressources/symbol_32.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 2), ('stimulus1', 'ressources/symbol_35.png'), ('stimulus2', 'ressources/symbol_11.png'), ('correct_resp', 'd'), ('symbol0', 'ressources/symbol_12.png'), ('symbol1', 'ressources/symbol_67.png'), ('symbol2', 'ressources/symbol_01.png'), ('symbol3', 'ressources/symbol_52.png'), ('symbol4', 'ressources/symbol_38.png'), ('symbol5', 'ressources/symbol_42.png'), ('symbol6', 'ressources/symbol_78.png'), ('symbol7', 'ressources/symbol_23.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 1), ('stimulus1', 'ressources/symbol_28.png'), ('stimulus2', 'ressources/symbol_12.png'), ('correct_resp', 'k'), ('symbol0', 'ressources/symbol_54.png'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_32.png'), ('symbol3', 'ressources/symbol_25.png'), ('symbol4', 'ressources/symbol_46.png'), ('symbol5', 'ressources/symbol_12.png'), ('symbol6', 'ressources/symbol_06.png'), ('symbol7', 'ressources/symbol_74.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 2), ('stimulus1', 'ressources/symbol_53.png'), ('stimulus2', 'ressources/symbol_78.png'), ('correct_resp', 'd'), ('symbol0', 'ressources/symbol_73.png'), ('symbol1', 'ressources/symbol_68.png'), ('symbol2', 'ressources/symbol_17.png'), ('symbol3', 'ressources/symbol_02.png'), ('symbol4', 'ressources/symbol_34.png'), ('symbol5', 'ressources/symbol_55.png'), ('symbol6', 'ressources/symbol_42.png'), ('symbol7', 'ressources/symbol_24.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 1), ('stimulus1', 'ressources/symbol_23.png'), ('stimulus2', 'ressources/symbol_62.png'), ('correct_resp', 'd'), ('symbol0', 'ressources/symbol_18.png'), ('symbol1', 'ressources/symbol_05.png'), ('symbol2', 'ressources/symbol_63.png'), ('symbol3', 'ressources/symbol_53.png'), ('symbol4', 'ressources/symbol_35.png'), ('symbol5', 'ressources/symbol_72.png'), ('symbol6', 'ressources/symbol_27.png'), ('symbol7', 'ressources/symbol_43.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 2), ('stimulus1', 'ressources/symbol_28.png'), ('stimulus2', 'ressources/symbol_54.png'), ('correct_resp', 'd'), ('symbol0', 'ressources/symbol_51.png'), ('symbol1', 'ressources/symbol_64.png'), ('symbol2', 'ressources/symbol_76.png'), ('symbol3', 'ressources/symbol_37.png'), ('symbol4', 'ressources/symbol_45.png'), ('symbol5', 'ressources/symbol_17.png'), ('symbol6', 'ressources/symbol_03.png'), ('symbol7', 'ressources/symbol_22.png')]), OrderedDict([('block', 'test'), ('block_n', 4), ('trial', 1), ('stimulus1', 'ressources/symbol_17.png'), ('stimulus2', 'ressources/symbol_73.png'), ('correct_resp', 'd'), ('symbol0', 'ressources/symbol_28.png'), ('symbol1', 'ressources/symbol_64.png'), ('symbol2', 'ressources/symbol_36.png'), ('symbol3', 'ressources/symbol_14.png'), ('symbol4', 'ressources/symbol_06.png'), ('symbol5', 'ressources/symbol_54.png'), ('symbol6', 'ressources/symbol_43.png'), ('symbol7', 'ressources/symbol_75.png')]), OrderedDict([('block', 'test'), ('block_n', 4), ('trial', 2), ('stimulus1', 'ressources/symbol_21.png'), ('stimulus2', 'ressources/symbol_15.png'), ('correct_resp', 'd'), ('symbol0', 'ressources/symbol_07.png'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_58.png'), ('symbol3', 'ressources/symbol_14.png'), ('symbol4', 'ressources/symbol_41.png'), ('symbol5', 'ressources/symbol_35.png'), ('symbol6', 'ressources/symbol_23.png'), ('symbol7', 'ressources/symbol_72.png')]), OrderedDict([('block', 'test'), ('block_n', 5), ('trial', 1), ('stimulus1', 'ressources/symbol_14.png'), ('stimulus2', 'ressources/symbol_46.png'), ('correct_resp', 'd'), ('symbol0', 'ressources/symbol_78.png'), ('symbol1', 'ressources/symbol_18.png'), ('symbol2', 'ressources/symbol_22.png'), ('symbol3', 'ressources/symbol_56.png'), ('symbol4', 'ressources/symbol_64.png'), ('symbol5', 'ressources/symbol_32.png'), ('symbol6', 'ressources/symbol_06.png'), ('symbol7', 'ressources/symbol_44.png')]), OrderedDict([('block', 'test'), ('block_n', 5), ('trial', 2), ('stimulus1', 'ressources/symbol_12.png'), ('stimulus2', 'ressources/symbol_34.png'), ('correct_resp', 'k'), ('symbol0', 'ressources/symbol_56.png'), ('symbol1', 'ressources/symbol_45.png'), ('symbol2', 'ressources/symbol_61.png'), ('symbol3', 'ressources/symbol_15.png'), ('symbol4', 'ressources/symbol_27.png'), ('symbol5', 'ressources/symbol_77.png'), ('symbol6', 'ressources/symbol_02.png'), ('symbol7', 'ressources/symbol_34.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="symbols_scenario.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practiceTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pre_stim"/>
    <Routine name="symbols"/>
    <LoopTerminator name="practiceTrials"/>
    <Routine name="startTask"/>
    <LoopInitiator loopType="TrialHandler" name="testblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 1), ('stimulus1', 'ressources/symbol_08.png'), ('stimulus2', 'ressources/symbol_17.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_44.png'), ('symbol2', 'ressources/symbol_58.png'), ('symbol3', 'ressources/symbol_24.png'), ('symbol4', 'ressources/symbol_08.png'), ('symbol5', 'ressources/symbol_64.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 2), ('stimulus1', 'ressources/symbol_48.png'), ('stimulus2', 'ressources/symbol_55.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_48.png'), ('symbol2', 'ressources/symbol_07.png'), ('symbol3', 'ressources/symbol_68.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 3), ('stimulus1', 'ressources/symbol_35.png'), ('stimulus2', 'ressources/symbol_52.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_12.png'), ('symbol2', 'ressources/symbol_28.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_63.png'), ('symbol5', 'ressources/symbol_55.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 4), ('stimulus1', 'ressources/symbol_61.png'), ('stimulus2', 'ressources/symbol_02.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_63.png'), ('symbol2', 'ressources/symbol_34.png'), ('symbol3', 'ressources/symbol_78.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_25.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 5), ('stimulus1', 'ressources/symbol_34.png'), ('stimulus2', 'ressources/symbol_17.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_28.png'), ('symbol2', 'ressources/symbol_38.png'), ('symbol3', 'ressources/symbol_75.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_54.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 6), ('stimulus1', 'ressources/symbol_64.png'), ('stimulus2', 'ressources/symbol_32.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_24.png'), ('symbol2', 'ressources/symbol_34.png'), ('symbol3', 'ressources/symbol_55.png'), ('symbol4', 'ressources/symbol_44.png'), ('symbol5', 'ressources/symbol_15.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 7), ('stimulus1', 'ressources/symbol_72.png'), ('stimulus2', 'ressources/symbol_28.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_78.png'), ('symbol2', 'ressources/symbol_37.png'), ('symbol3', 'ressources/symbol_15.png'), ('symbol4', 'ressources/symbol_56.png'), ('symbol5', 'ressources/symbol_48.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 8), ('stimulus1', 'ressources/symbol_02.png'), ('stimulus2', 'ressources/symbol_48.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_48.png'), ('symbol2', 'ressources/symbol_51.png'), ('symbol3', 'ressources/symbol_63.png'), ('symbol4', 'ressources/symbol_22.png'), ('symbol5', 'ressources/symbol_06.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 9), ('stimulus1', 'ressources/symbol_66.png'), ('stimulus2', 'ressources/symbol_58.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_75.png'), ('symbol2', 'ressources/symbol_23.png'), ('symbol3', 'ressources/symbol_36.png'), ('symbol4', 'ressources/symbol_05.png'), ('symbol5', 'ressources/symbol_58.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 10), ('stimulus1', 'ressources/symbol_42.png'), ('stimulus2', 'ressources/symbol_32.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_34.png'), ('symbol2', 'ressources/symbol_07.png'), ('symbol3', 'ressources/symbol_73.png'), ('symbol4', 'ressources/symbol_17.png'), ('symbol5', 'ressources/symbol_42.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 1), ('stimulus1', 'ressources/symbol_63.png'), ('stimulus2', 'ressources/symbol_18.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_55.png'), ('symbol2', 'ressources/symbol_08.png'), ('symbol3', 'ressources/symbol_35.png'), ('symbol4', 'ressources/symbol_23.png'), ('symbol5', 'ressources/symbol_17.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 2), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_65.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_16.png'), ('symbol2', 'ressources/symbol_63.png'), ('symbol3', 'ressources/symbol_42.png'), ('symbol4', 'ressources/symbol_56.png'), ('symbol5', 'ressources/symbol_22.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 3), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_21.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_75.png'), ('symbol2', 'ressources/symbol_57.png'), ('symbol3', 'ressources/symbol_66.png'), ('symbol4', 'ressources/symbol_21.png'), ('symbol5', 'ressources/symbol_06.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 4), ('stimulus1', 'ressources/symbol_64.png'), ('stimulus2', 'ressources/symbol_54.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_67.png'), ('symbol2', 'ressources/symbol_53.png'), ('symbol3', 'ressources/symbol_05.png'), ('symbol4', 'ressources/symbol_43.png'), ('symbol5', 'ressources/symbol_17.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 5), ('stimulus1', 'ressources/symbol_58.png'), ('stimulus2', 'ressources/symbol_68.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_17.png'), ('symbol2', 'ressources/symbol_27.png'), ('symbol3', 'ressources/symbol_68.png'), ('symbol4', 'ressources/symbol_71.png'), ('symbol5', 'ressources/symbol_42.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 6), ('stimulus1', 'ressources/symbol_44.png'), ('stimulus2', 'ressources/symbol_65.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_21.png'), ('symbol2', 'ressources/symbol_48.png'), ('symbol3', 'ressources/symbol_76.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_12.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 7), ('stimulus1', 'ressources/symbol_61.png'), ('stimulus2', 'ressources/symbol_43.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_56.png'), ('symbol2', 'ressources/symbol_15.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_43.png'), ('symbol5', 'ressources/symbol_66.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 8), ('stimulus1', 'ressources/symbol_31.png'), ('stimulus2', 'ressources/symbol_64.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_16.png'), ('symbol2', 'ressources/symbol_36.png'), ('symbol3', 'ressources/symbol_55.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_24.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 9), ('stimulus1', 'ressources/symbol_53.png'), ('stimulus2', 'ressources/symbol_68.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_25.png'), ('symbol2', 'ressources/symbol_16.png'), ('symbol3', 'ressources/symbol_66.png'), ('symbol4', 'ressources/symbol_32.png'), ('symbol5', 'ressources/symbol_53.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 10), ('stimulus1', 'ressources/symbol_41.png'), ('stimulus2', 'ressources/symbol_03.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_25.png'), ('symbol2', 'ressources/symbol_12.png'), ('symbol3', 'ressources/symbol_36.png'), ('symbol4', 'ressources/symbol_03.png'), ('symbol5', 'ressources/symbol_41.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 11), ('stimulus1', 'ressources/symbol_21.png'), ('stimulus2', 'ressources/symbol_66.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_21.png'), ('symbol2', 'ressources/symbol_57.png'), ('symbol3', 'ressources/symbol_31.png'), ('symbol4', 'ressources/symbol_46.png'), ('symbol5', 'ressources/symbol_18.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 12), ('stimulus1', 'ressources/symbol_14.png'), ('stimulus2', 'ressources/symbol_35.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_42.png'), ('symbol2', 'ressources/symbol_68.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_04.png'), ('symbol5', 'ressources/symbol_57.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 13), ('stimulus1', 'ressources/symbol_11.png'), ('stimulus2', 'ressources/symbol_57.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_75.png'), ('symbol3', 'ressources/symbol_44.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_08.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 14), ('stimulus1', 'ressources/symbol_67.png'), ('stimulus2', 'ressources/symbol_47.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_26.png'), ('symbol2', 'ressources/symbol_78.png'), ('symbol3', 'ressources/symbol_61.png'), ('symbol4', 'ressources/symbol_48.png'), ('symbol5', 'ressources/symbol_52.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 15), ('stimulus1', 'ressources/symbol_68.png'), ('stimulus2', 'ressources/symbol_58.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_32.png'), ('symbol2', 'ressources/symbol_46.png'), ('symbol3', 'ressources/symbol_64.png'), ('symbol4', 'ressources/symbol_17.png'), ('symbol5', 'ressources/symbol_55.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 16), ('stimulus1', 'ressources/symbol_24.png'), ('stimulus2', 'ressources/symbol_05.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_63.png'), ('symbol2', 'ressources/symbol_72.png'), ('symbol3', 'ressources/symbol_28.png'), ('symbol4', 'ressources/symbol_55.png'), ('symbol5', 'ressources/symbol_05.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 17), ('stimulus1', 'ressources/symbol_32.png'), ('stimulus2', 'ressources/symbol_22.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_61.png'), ('symbol2', 'ressources/symbol_17.png'), ('symbol3', 'ressources/symbol_43.png'), ('symbol4', 'ressources/symbol_32.png'), ('symbol5', 'ressources/symbol_74.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 18), ('stimulus1', 'ressources/symbol_05.png'), ('stimulus2', 'ressources/symbol_46.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_46.png'), ('symbol2', 'ressources/symbol_18.png'), ('symbol3', 'ressources/symbol_24.png'), ('symbol4', 'ressources/symbol_38.png'), ('symbol5', 'ressources/symbol_63.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 19), ('stimulus1', 'ressources/symbol_18.png'), ('stimulus2', 'ressources/symbol_53.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_66.png'), ('symbol2', 'ressources/symbol_32.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_48.png'), ('symbol5', 'ressources/symbol_53.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 20), ('stimulus1', 'ressources/symbol_24.png'), ('stimulus2', 'ressources/symbol_31.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_45.png'), ('symbol2', 'ressources/symbol_03.png'), ('symbol3', 'ressources/symbol_55.png'), ('symbol4', 'ressources/symbol_37.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 21), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_76.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_57.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_31.png'), ('symbol5', 'ressources/symbol_07.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 22), ('stimulus1', 'ressources/symbol_58.png'), ('stimulus2', 'ressources/symbol_27.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_58.png'), ('symbol4', 'ressources/symbol_74.png'), ('symbol5', 'ressources/symbol_21.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 23), ('stimulus1', 'ressources/symbol_65.png'), ('stimulus2', 'ressources/symbol_02.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_36.png'), ('symbol2', 'ressources/symbol_54.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_04.png'), ('symbol5', 'ressources/symbol_64.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 24), ('stimulus1', 'ressources/symbol_68.png'), ('stimulus2', 'ressources/symbol_74.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_11.png'), ('symbol2', 'ressources/symbol_25.png'), ('symbol3', 'ressources/symbol_52.png'), ('symbol4', 'ressources/symbol_74.png'), ('symbol5', 'ressources/symbol_38.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 25), ('stimulus1', 'ressources/symbol_36.png'), ('stimulus2', 'ressources/symbol_78.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_47.png'), ('symbol2', 'ressources/symbol_01.png'), ('symbol3', 'ressources/symbol_63.png'), ('symbol4', 'ressources/symbol_76.png'), ('symbol5', 'ressources/symbol_13.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 26), ('stimulus1', 'ressources/symbol_24.png'), ('stimulus2', 'ressources/symbol_54.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_27.png'), ('symbol2', 'ressources/symbol_04.png'), ('symbol3', 'ressources/symbol_47.png'), ('symbol4', 'ressources/symbol_71.png'), ('symbol5', 'ressources/symbol_32.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 27), ('stimulus1', 'ressources/symbol_68.png'), ('stimulus2', 'ressources/symbol_44.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_04.png'), ('symbol2', 'ressources/symbol_57.png'), ('symbol3', 'ressources/symbol_34.png'), ('symbol4', 'ressources/symbol_14.png'), ('symbol5', 'ressources/symbol_71.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 28), ('stimulus1', 'ressources/symbol_58.png'), ('stimulus2', 'ressources/symbol_63.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_58.png'), ('symbol2', 'ressources/symbol_26.png'), ('symbol3', 'ressources/symbol_36.png'), ('symbol4', 'ressources/symbol_08.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 29), ('stimulus1', 'ressources/symbol_28.png'), ('stimulus2', 'ressources/symbol_34.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_26.png'), ('symbol2', 'ressources/symbol_74.png'), ('symbol3', 'ressources/symbol_34.png'), ('symbol4', 'ressources/symbol_11.png'), ('symbol5', 'ressources/symbol_45.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 30), ('stimulus1', 'ressources/symbol_35.png'), ('stimulus2', 'ressources/symbol_05.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_21.png'), ('symbol2', 'ressources/symbol_42.png'), ('symbol3', 'ressources/symbol_75.png'), ('symbol4', 'ressources/symbol_34.png'), ('symbol5', 'ressources/symbol_61.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 31), ('stimulus1', 'ressources/symbol_53.png'), ('stimulus2', 'ressources/symbol_34.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_05.png'), ('symbol2', 'ressources/symbol_48.png'), ('symbol3', 'ressources/symbol_23.png'), ('symbol4', 'ressources/symbol_73.png'), ('symbol5', 'ressources/symbol_55.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 32), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_25.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_56.png'), ('symbol2', 'ressources/symbol_25.png'), ('symbol3', 'ressources/symbol_48.png'), ('symbol4', 'ressources/symbol_77.png'), ('symbol5', 'ressources/symbol_13.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 33), ('stimulus1', 'ressources/symbol_17.png'), ('stimulus2', 'ressources/symbol_46.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_48.png'), ('symbol2', 'ressources/symbol_65.png'), ('symbol3', 'ressources/symbol_72.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_17.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 34), ('stimulus1', 'ressources/symbol_17.png'), ('stimulus2', 'ressources/symbol_41.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_38.png'), ('symbol2', 'ressources/symbol_24.png'), ('symbol3', 'ressources/symbol_71.png'), ('symbol4', 'ressources/symbol_51.png'), ('symbol5', 'ressources/symbol_04.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 35), ('stimulus1', 'ressources/symbol_35.png'), ('stimulus2', 'ressources/symbol_26.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_73.png'), ('symbol2', 'ressources/symbol_53.png'), ('symbol3', 'ressources/symbol_08.png'), ('symbol4', 'ressources/symbol_35.png'), ('symbol5', 'ressources/symbol_18.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 36), ('stimulus1', 'ressources/symbol_26.png'), ('stimulus2', 'ressources/symbol_14.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_36.png'), ('symbol2', 'ressources/symbol_21.png'), ('symbol3', 'ressources/symbol_71.png'), ('symbol4', 'ressources/symbol_07.png'), ('symbol5', 'ressources/symbol_57.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 37), ('stimulus1', 'ressources/symbol_46.png'), ('stimulus2', 'ressources/symbol_21.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_22.png'), ('symbol2', 'ressources/symbol_01.png'), ('symbol3', 'ressources/symbol_36.png'), ('symbol4', 'ressources/symbol_58.png'), ('symbol5', 'ressources/symbol_43.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 38), ('stimulus1', 'ressources/symbol_43.png'), ('stimulus2', 'ressources/symbol_53.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_45.png'), ('symbol2', 'ressources/symbol_71.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_53.png'), ('symbol5', 'ressources/symbol_23.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 39), ('stimulus1', 'ressources/symbol_65.png'), ('stimulus2', 'ressources/symbol_58.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_13.png'), ('symbol2', 'ressources/symbol_42.png'), ('symbol3', 'ressources/symbol_33.png'), ('symbol4', 'ressources/symbol_52.png'), ('symbol5', 'ressources/symbol_65.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 40), ('stimulus1', 'ressources/symbol_17.png'), ('stimulus2', 'ressources/symbol_37.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_34.png'), ('symbol2', 'ressources/symbol_22.png'), ('symbol3', 'ressources/symbol_44.png'), ('symbol4', 'ressources/symbol_08.png'), ('symbol5', 'ressources/symbol_11.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 41), ('stimulus1', 'ressources/symbol_04.png'), ('stimulus2', 'ressources/symbol_43.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_04.png'), ('symbol2', 'ressources/symbol_12.png'), ('symbol3', 'ressources/symbol_25.png'), ('symbol4', 'ressources/symbol_32.png'), ('symbol5', 'ressources/symbol_45.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 42), ('stimulus1', 'ressources/symbol_34.png'), ('stimulus2', 'ressources/symbol_65.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_74.png'), ('symbol2', 'ressources/symbol_03.png'), ('symbol3', 'ressources/symbol_11.png'), ('symbol4', 'ressources/symbol_65.png'), ('symbol5', 'ressources/symbol_22.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 43), ('stimulus1', 'ressources/symbol_47.png'), ('stimulus2', 'ressources/symbol_18.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_56.png'), ('symbol2', 'ressources/symbol_42.png'), ('symbol3', 'ressources/symbol_66.png'), ('symbol4', 'ressources/symbol_18.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 44), ('stimulus1', 'ressources/symbol_53.png'), ('stimulus2', 'ressources/symbol_25.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_61.png'), ('symbol2', 'ressources/symbol_06.png'), ('symbol3', 'ressources/symbol_12.png'), ('symbol4', 'ressources/symbol_43.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 45), ('stimulus1', 'ressources/symbol_32.png'), ('stimulus2', 'ressources/symbol_68.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_46.png'), ('symbol2', 'ressources/symbol_37.png'), ('symbol3', 'ressources/symbol_23.png'), ('symbol4', 'ressources/symbol_03.png'), ('symbol5', 'ressources/symbol_18.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 46), ('stimulus1', 'ressources/symbol_22.png'), ('stimulus2', 'ressources/symbol_38.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_46.png'), ('symbol2', 'ressources/symbol_78.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_56.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 47), ('stimulus1', 'ressources/symbol_77.png'), ('stimulus2', 'ressources/symbol_21.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_73.png'), ('symbol2', 'ressources/symbol_32.png'), ('symbol3', 'ressources/symbol_06.png'), ('symbol4', 'ressources/symbol_21.png'), ('symbol5', 'ressources/symbol_67.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 48), ('stimulus1', 'ressources/symbol_64.png'), ('stimulus2', 'ressources/symbol_52.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_44.png'), ('symbol2', 'ressources/symbol_02.png'), ('symbol3', 'ressources/symbol_72.png'), ('symbol4', 'ressources/symbol_55.png'), ('symbol5', 'ressources/symbol_15.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 1), ('stimulus1', 'ressources/symbol_54.png'), ('stimulus2', 'ressources/symbol_37.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_44.png'), ('symbol2', 'ressources/symbol_26.png'), ('symbol3', 'ressources/symbol_01.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_37.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 2), ('stimulus1', 'ressources/symbol_27.png'), ('stimulus2', 'ressources/symbol_62.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_44.png'), ('symbol2', 'ressources/symbol_08.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_13.png'), ('symbol5', 'ressources/symbol_71.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 3), ('stimulus1', 'ressources/symbol_28.png'), ('stimulus2', 'ressources/symbol_74.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_13.png'), ('symbol2', 'ressources/symbol_72.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_67.png'), ('symbol5', 'ressources/symbol_04.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 4), ('stimulus1', 'ressources/symbol_55.png'), ('stimulus2', 'ressources/symbol_17.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_07.png'), ('symbol2', 'ressources/symbol_53.png'), ('symbol3', 'ressources/symbol_41.png'), ('symbol4', 'ressources/symbol_17.png'), ('symbol5', 'ressources/symbol_21.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 5), ('stimulus1', 'ressources/symbol_67.png'), ('stimulus2', 'ressources/symbol_45.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_08.png'), ('symbol2', 'ressources/symbol_37.png'), ('symbol3', 'ressources/symbol_52.png'), ('symbol4', 'ressources/symbol_13.png'), ('symbol5', 'ressources/symbol_62.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 6), ('stimulus1', 'ressources/symbol_68.png'), ('stimulus2', 'ressources/symbol_45.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_68.png'), ('symbol2', 'ressources/symbol_75.png'), ('symbol3', 'ressources/symbol_06.png'), ('symbol4', 'ressources/symbol_32.png'), ('symbol5', 'ressources/symbol_28.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 7), ('stimulus1', 'ressources/symbol_57.png'), ('stimulus2', 'ressources/symbol_63.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_75.png'), ('symbol2', 'ressources/symbol_44.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_53.png'), ('symbol5', 'ressources/symbol_08.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 8), ('stimulus1', 'ressources/symbol_28.png'), ('stimulus2', 'ressources/symbol_76.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_58.png'), ('symbol2', 'ressources/symbol_17.png'), ('symbol3', 'ressources/symbol_26.png'), ('symbol4', 'ressources/symbol_76.png'), ('symbol5', 'ressources/symbol_35.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 9), ('stimulus1', 'ressources/symbol_31.png'), ('stimulus2', 'ressources/symbol_52.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_67.png'), ('symbol2', 'ressources/symbol_41.png'), ('symbol3', 'ressources/symbol_17.png'), ('symbol4', 'ressources/symbol_31.png'), ('symbol5', 'ressources/symbol_03.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 10), ('stimulus1', 'ressources/symbol_08.png'), ('stimulus2', 'ressources/symbol_22.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_41.png'), ('symbol2', 'ressources/symbol_56.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_76.png'), ('symbol5', 'ressources/symbol_11.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 11), ('stimulus1', 'ressources/symbol_22.png'), ('stimulus2', 'ressources/symbol_77.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_35.png'), ('symbol2', 'ressources/symbol_57.png'), ('symbol3', 'ressources/symbol_22.png'), ('symbol4', 'ressources/symbol_64.png'), ('symbol5', 'ressources/symbol_01.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 12), ('stimulus1', 'ressources/symbol_22.png'), ('stimulus2', 'ressources/symbol_74.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_52.png'), ('symbol2', 'ressources/symbol_35.png'), ('symbol3', 'ressources/symbol_13.png'), ('symbol4', 'ressources/symbol_67.png'), ('symbol5', 'ressources/symbol_22.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 13), ('stimulus1', 'ressources/symbol_34.png'), ('stimulus2', 'ressources/symbol_06.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_04.png'), ('symbol2', 'ressources/symbol_66.png'), ('symbol3', 'ressources/symbol_55.png'), ('symbol4', 'ressources/symbol_15.png'), ('symbol5', 'ressources/symbol_43.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 14), ('stimulus1', 'ressources/symbol_05.png'), ('stimulus2', 'ressources/symbol_51.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_05.png'), ('symbol2', 'ressources/symbol_62.png'), ('symbol3', 'ressources/symbol_31.png'), ('symbol4', 'ressources/symbol_76.png'), ('symbol5', 'ressources/symbol_11.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 15), ('stimulus1', 'ressources/symbol_57.png'), ('stimulus2', 'ressources/symbol_61.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_26.png'), ('symbol2', 'ressources/symbol_77.png'), ('symbol3', 'ressources/symbol_62.png'), ('symbol4', 'ressources/symbol_51.png'), ('symbol5', 'ressources/symbol_01.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 16), ('stimulus1', 'ressources/symbol_36.png'), ('stimulus2', 'ressources/symbol_03.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_32.png'), ('symbol2', 'ressources/symbol_54.png'), ('symbol3', 'ressources/symbol_14.png'), ('symbol4', 'ressources/symbol_05.png'), ('symbol5', 'ressources/symbol_46.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 17), ('stimulus1', 'ressources/symbol_71.png'), ('stimulus2', 'ressources/symbol_14.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_73.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_57.png'), ('symbol4', 'ressources/symbol_46.png'), ('symbol5', 'ressources/symbol_65.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 18), ('stimulus1', 'ressources/symbol_75.png'), ('stimulus2', 'ressources/symbol_02.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_51.png'), ('symbol2', 'ressources/symbol_26.png'), ('symbol3', 'ressources/symbol_63.png'), ('symbol4', 'ressources/symbol_36.png'), ('symbol5', 'ressources/symbol_46.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 19), ('stimulus1', 'ressources/symbol_72.png'), ('stimulus2', 'ressources/symbol_53.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_54.png'), ('symbol2', 'ressources/symbol_63.png'), ('symbol3', 'ressources/symbol_07.png'), ('symbol4', 'ressources/symbol_14.png'), ('symbol5', 'ressources/symbol_72.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 20), ('stimulus1', 'ressources/symbol_22.png'), ('stimulus2', 'ressources/symbol_48.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_54.png'), ('symbol2', 'ressources/symbol_73.png'), ('symbol3', 'ressources/symbol_13.png'), ('symbol4', 'ressources/symbol_34.png'), ('symbol5', 'ressources/symbol_06.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 21), ('stimulus1', 'ressources/symbol_64.png'), ('stimulus2', 'ressources/symbol_03.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_24.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_43.png'), ('symbol5', 'ressources/symbol_54.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 22), ('stimulus1', 'ressources/symbol_75.png'), ('stimulus2', 'ressources/symbol_53.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_03.png'), ('symbol3', 'ressources/symbol_31.png'), ('symbol4', 'ressources/symbol_26.png'), ('symbol5', 'ressources/symbol_16.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 23), ('stimulus1', 'ressources/symbol_57.png'), ('stimulus2', 'ressources/symbol_26.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_43.png'), ('symbol2', 'ressources/symbol_08.png'), ('symbol3', 'ressources/symbol_63.png'), ('symbol4', 'ressources/symbol_24.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 24), ('stimulus1', 'ressources/symbol_67.png'), ('stimulus2', 'ressources/symbol_27.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_47.png'), ('symbol2', 'ressources/symbol_24.png'), ('symbol3', 'ressources/symbol_08.png'), ('symbol4', 'ressources/symbol_16.png'), ('symbol5', 'ressources/symbol_52.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 25), ('stimulus1', 'ressources/symbol_16.png'), ('stimulus2', 'ressources/symbol_61.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_72.png'), ('symbol2', 'ressources/symbol_66.png'), ('symbol3', 'ressources/symbol_38.png'), ('symbol4', 'ressources/symbol_12.png'), ('symbol5', 'ressources/symbol_58.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 26), ('stimulus1', 'ressources/symbol_71.png'), ('stimulus2', 'ressources/symbol_32.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_77.png'), ('symbol2', 'ressources/symbol_06.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_53.png'), ('symbol5', 'ressources/symbol_65.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 27), ('stimulus1', 'ressources/symbol_41.png'), ('stimulus2', 'ressources/symbol_15.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_21.png'), ('symbol2', 'ressources/symbol_41.png'), ('symbol3', 'ressources/symbol_52.png'), ('symbol4', 'ressources/symbol_68.png'), ('symbol5', 'ressources/symbol_04.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 28), ('stimulus1', 'ressources/symbol_21.png'), ('stimulus2', 'ressources/symbol_11.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_41.png'), ('symbol2', 'ressources/symbol_16.png'), ('symbol3', 'ressources/symbol_35.png'), ('symbol4', 'ressources/symbol_21.png'), ('symbol5', 'ressources/symbol_74.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 29), ('stimulus1', 'ressources/symbol_56.png'), ('stimulus2', 'ressources/symbol_06.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_78.png'), ('symbol2', 'ressources/symbol_05.png'), ('symbol3', 'ressources/symbol_22.png'), ('symbol4', 'ressources/symbol_15.png'), ('symbol5', 'ressources/symbol_37.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 30), ('stimulus1', 'ressources/symbol_01.png'), ('stimulus2', 'ressources/symbol_77.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_53.png'), ('symbol2', 'ressources/symbol_74.png'), ('symbol3', 'ressources/symbol_01.png'), ('symbol4', 'ressources/symbol_63.png'), ('symbol5', 'ressources/symbol_27.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 31), ('stimulus1', 'ressources/symbol_45.png'), ('stimulus2', 'ressources/symbol_37.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_71.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_23.png'), ('symbol5', 'ressources/symbol_61.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 32), ('stimulus1', 'ressources/symbol_54.png'), ('stimulus2', 'ressources/symbol_14.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_76.png'), ('symbol2', 'ressources/symbol_54.png'), ('symbol3', 'ressources/symbol_62.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_41.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 33), ('stimulus1', 'ressources/symbol_25.png'), ('stimulus2', 'ressources/symbol_51.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_26.png'), ('symbol2', 'ressources/symbol_78.png'), ('symbol3', 'ressources/symbol_48.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 34), ('stimulus1', 'ressources/symbol_56.png'), ('stimulus2', 'ressources/symbol_34.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_34.png'), ('symbol2', 'ressources/symbol_62.png'), ('symbol3', 'ressources/symbol_53.png'), ('symbol4', 'ressources/symbol_71.png'), ('symbol5', 'ressources/symbol_23.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 35), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_68.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_17.png'), ('symbol2', 'ressources/symbol_47.png'), ('symbol3', 'ressources/symbol_06.png'), ('symbol4', 'ressources/symbol_26.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 36), ('stimulus1', 'ressources/symbol_75.png'), ('stimulus2', 'ressources/symbol_51.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_46.png'), ('symbol2', 'ressources/symbol_04.png'), ('symbol3', 'ressources/symbol_13.png'), ('symbol4', 'ressources/symbol_53.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 37), ('stimulus1', 'ressources/symbol_13.png'), ('stimulus2', 'ressources/symbol_33.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_55.png'), ('symbol2', 'ressources/symbol_05.png'), ('symbol3', 'ressources/symbol_75.png'), ('symbol4', 'ressources/symbol_48.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 38), ('stimulus1', 'ressources/symbol_72.png'), ('stimulus2', 'ressources/symbol_23.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_25.png'), ('symbol2', 'ressources/symbol_74.png'), ('symbol3', 'ressources/symbol_51.png'), ('symbol4', 'ressources/symbol_67.png'), ('symbol5', 'ressources/symbol_12.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 39), ('stimulus1', 'ressources/symbol_33.png'), ('stimulus2', 'ressources/symbol_62.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_62.png'), ('symbol2', 'ressources/symbol_03.png'), ('symbol3', 'ressources/symbol_13.png'), ('symbol4', 'ressources/symbol_23.png'), ('symbol5', 'ressources/symbol_31.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 40), ('stimulus1', 'ressources/symbol_67.png'), ('stimulus2', 'ressources/symbol_04.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_32.png'), ('symbol2', 'ressources/symbol_63.png'), ('symbol3', 'ressources/symbol_77.png'), ('symbol4', 'ressources/symbol_54.png'), ('symbol5', 'ressources/symbol_47.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 41), ('stimulus1', 'ressources/symbol_58.png'), ('stimulus2', 'ressources/symbol_77.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_28.png'), ('symbol2', 'ressources/symbol_08.png'), ('symbol3', 'ressources/symbol_62.png'), ('symbol4', 'ressources/symbol_75.png'), ('symbol5', 'ressources/symbol_58.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 42), ('stimulus1', 'ressources/symbol_45.png'), ('stimulus2', 'ressources/symbol_71.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_45.png'), ('symbol2', 'ressources/symbol_33.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_15.png'), ('symbol5', 'ressources/symbol_64.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 43), ('stimulus1', 'ressources/symbol_01.png'), ('stimulus2', 'ressources/symbol_64.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_62.png'), ('symbol2', 'ressources/symbol_22.png'), ('symbol3', 'ressources/symbol_53.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_32.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 44), ('stimulus1', 'ressources/symbol_74.png'), ('stimulus2', 'ressources/symbol_24.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_13.png'), ('symbol2', 'ressources/symbol_23.png'), ('symbol3', 'ressources/symbol_07.png'), ('symbol4', 'ressources/symbol_56.png'), ('symbol5', 'ressources/symbol_34.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 45), ('stimulus1', 'ressources/symbol_63.png'), ('stimulus2', 'ressources/symbol_15.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_14.png'), ('symbol2', 'ressources/symbol_68.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_05.png'), ('symbol5', 'ressources/symbol_75.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 46), ('stimulus1', 'ressources/symbol_16.png'), ('stimulus2', 'ressources/symbol_24.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_16.png'), ('symbol2', 'ressources/symbol_07.png'), ('symbol3', 'ressources/symbol_24.png'), ('symbol4', 'ressources/symbol_31.png'), ('symbol5', 'ressources/symbol_47.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 47), ('stimulus1', 'ressources/symbol_34.png'), ('stimulus2', 'ressources/symbol_72.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_23.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_41.png'), ('symbol4', 'ressources/symbol_65.png'), ('symbol5', 'ressources/symbol_04.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 48), ('stimulus1', 'ressources/symbol_65.png'), ('stimulus2', 'ressources/symbol_07.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_42.png'), ('symbol2', 'ressources/symbol_75.png'), ('symbol3', 'ressources/symbol_67.png'), ('symbol4', 'ressources/symbol_21.png'), ('symbol5', 'ressources/symbol_01.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="symbols_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="testblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter"/>
    <LoopInitiator loopType="TrialHandler" name="testTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 1), ('stimulus1', 'ressources/symbol_08.png'), ('stimulus2', 'ressources/symbol_17.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_44.png'), ('symbol2', 'ressources/symbol_58.png'), ('symbol3', 'ressources/symbol_24.png'), ('symbol4', 'ressources/symbol_08.png'), ('symbol5', 'ressources/symbol_64.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 2), ('stimulus1', 'ressources/symbol_48.png'), ('stimulus2', 'ressources/symbol_55.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_48.png'), ('symbol2', 'ressources/symbol_07.png'), ('symbol3', 'ressources/symbol_68.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 3), ('stimulus1', 'ressources/symbol_35.png'), ('stimulus2', 'ressources/symbol_52.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_12.png'), ('symbol2', 'ressources/symbol_28.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_63.png'), ('symbol5', 'ressources/symbol_55.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 4), ('stimulus1', 'ressources/symbol_61.png'), ('stimulus2', 'ressources/symbol_02.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_63.png'), ('symbol2', 'ressources/symbol_34.png'), ('symbol3', 'ressources/symbol_78.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_25.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 5), ('stimulus1', 'ressources/symbol_34.png'), ('stimulus2', 'ressources/symbol_17.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_28.png'), ('symbol2', 'ressources/symbol_38.png'), ('symbol3', 'ressources/symbol_75.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_54.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 6), ('stimulus1', 'ressources/symbol_64.png'), ('stimulus2', 'ressources/symbol_32.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_24.png'), ('symbol2', 'ressources/symbol_34.png'), ('symbol3', 'ressources/symbol_55.png'), ('symbol4', 'ressources/symbol_44.png'), ('symbol5', 'ressources/symbol_15.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 7), ('stimulus1', 'ressources/symbol_72.png'), ('stimulus2', 'ressources/symbol_28.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_78.png'), ('symbol2', 'ressources/symbol_37.png'), ('symbol3', 'ressources/symbol_15.png'), ('symbol4', 'ressources/symbol_56.png'), ('symbol5', 'ressources/symbol_48.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 8), ('stimulus1', 'ressources/symbol_02.png'), ('stimulus2', 'ressources/symbol_48.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_48.png'), ('symbol2', 'ressources/symbol_51.png'), ('symbol3', 'ressources/symbol_63.png'), ('symbol4', 'ressources/symbol_22.png'), ('symbol5', 'ressources/symbol_06.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 9), ('stimulus1', 'ressources/symbol_66.png'), ('stimulus2', 'ressources/symbol_58.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_75.png'), ('symbol2', 'ressources/symbol_23.png'), ('symbol3', 'ressources/symbol_36.png'), ('symbol4', 'ressources/symbol_05.png'), ('symbol5', 'ressources/symbol_58.png')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 10), ('stimulus1', 'ressources/symbol_42.png'), ('stimulus2', 'ressources/symbol_32.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_34.png'), ('symbol2', 'ressources/symbol_07.png'), ('symbol3', 'ressources/symbol_73.png'), ('symbol4', 'ressources/symbol_17.png'), ('symbol5', 'ressources/symbol_42.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 1), ('stimulus1', 'ressources/symbol_63.png'), ('stimulus2', 'ressources/symbol_18.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_55.png'), ('symbol2', 'ressources/symbol_08.png'), ('symbol3', 'ressources/symbol_35.png'), ('symbol4', 'ressources/symbol_23.png'), ('symbol5', 'ressources/symbol_17.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 2), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_65.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_16.png'), ('symbol2', 'ressources/symbol_63.png'), ('symbol3', 'ressources/symbol_42.png'), ('symbol4', 'ressources/symbol_56.png'), ('symbol5', 'ressources/symbol_22.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 3), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_21.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_75.png'), ('symbol2', 'ressources/symbol_57.png'), ('symbol3', 'ressources/symbol_66.png'), ('symbol4', 'ressources/symbol_21.png'), ('symbol5', 'ressources/symbol_06.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 4), ('stimulus1', 'ressources/symbol_64.png'), ('stimulus2', 'ressources/symbol_54.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_67.png'), ('symbol2', 'ressources/symbol_53.png'), ('symbol3', 'ressources/symbol_05.png'), ('symbol4', 'ressources/symbol_43.png'), ('symbol5', 'ressources/symbol_17.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 5), ('stimulus1', 'ressources/symbol_58.png'), ('stimulus2', 'ressources/symbol_68.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_17.png'), ('symbol2', 'ressources/symbol_27.png'), ('symbol3', 'ressources/symbol_68.png'), ('symbol4', 'ressources/symbol_71.png'), ('symbol5', 'ressources/symbol_42.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 6), ('stimulus1', 'ressources/symbol_44.png'), ('stimulus2', 'ressources/symbol_65.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_21.png'), ('symbol2', 'ressources/symbol_48.png'), ('symbol3', 'ressources/symbol_76.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_12.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 7), ('stimulus1', 'ressources/symbol_61.png'), ('stimulus2', 'ressources/symbol_43.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_56.png'), ('symbol2', 'ressources/symbol_15.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_43.png'), ('symbol5', 'ressources/symbol_66.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 8), ('stimulus1', 'ressources/symbol_31.png'), ('stimulus2', 'ressources/symbol_64.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_16.png'), ('symbol2', 'ressources/symbol_36.png'), ('symbol3', 'ressources/symbol_55.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_24.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 9), ('stimulus1', 'ressources/symbol_53.png'), ('stimulus2', 'ressources/symbol_68.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_25.png'), ('symbol2', 'ressources/symbol_16.png'), ('symbol3', 'ressources/symbol_66.png'), ('symbol4', 'ressources/symbol_32.png'), ('symbol5', 'ressources/symbol_53.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 10), ('stimulus1', 'ressources/symbol_41.png'), ('stimulus2', 'ressources/symbol_03.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_25.png'), ('symbol2', 'ressources/symbol_12.png'), ('symbol3', 'ressources/symbol_36.png'), ('symbol4', 'ressources/symbol_03.png'), ('symbol5', 'ressources/symbol_41.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 11), ('stimulus1', 'ressources/symbol_21.png'), ('stimulus2', 'ressources/symbol_66.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_21.png'), ('symbol2', 'ressources/symbol_57.png'), ('symbol3', 'ressources/symbol_31.png'), ('symbol4', 'ressources/symbol_46.png'), ('symbol5', 'ressources/symbol_18.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 12), ('stimulus1', 'ressources/symbol_14.png'), ('stimulus2', 'ressources/symbol_35.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_42.png'), ('symbol2', 'ressources/symbol_68.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_04.png'), ('symbol5', 'ressources/symbol_57.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 13), ('stimulus1', 'ressources/symbol_11.png'), ('stimulus2', 'ressources/symbol_57.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_75.png'), ('symbol3', 'ressources/symbol_44.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_08.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 14), ('stimulus1', 'ressources/symbol_67.png'), ('stimulus2', 'ressources/symbol_47.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_26.png'), ('symbol2', 'ressources/symbol_78.png'), ('symbol3', 'ressources/symbol_61.png'), ('symbol4', 'ressources/symbol_48.png'), ('symbol5', 'ressources/symbol_52.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 15), ('stimulus1', 'ressources/symbol_68.png'), ('stimulus2', 'ressources/symbol_58.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_32.png'), ('symbol2', 'ressources/symbol_46.png'), ('symbol3', 'ressources/symbol_64.png'), ('symbol4', 'ressources/symbol_17.png'), ('symbol5', 'ressources/symbol_55.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 16), ('stimulus1', 'ressources/symbol_24.png'), ('stimulus2', 'ressources/symbol_05.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_63.png'), ('symbol2', 'ressources/symbol_72.png'), ('symbol3', 'ressources/symbol_28.png'), ('symbol4', 'ressources/symbol_55.png'), ('symbol5', 'ressources/symbol_05.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 17), ('stimulus1', 'ressources/symbol_32.png'), ('stimulus2', 'ressources/symbol_22.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_61.png'), ('symbol2', 'ressources/symbol_17.png'), ('symbol3', 'ressources/symbol_43.png'), ('symbol4', 'ressources/symbol_32.png'), ('symbol5', 'ressources/symbol_74.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 18), ('stimulus1', 'ressources/symbol_05.png'), ('stimulus2', 'ressources/symbol_46.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_46.png'), ('symbol2', 'ressources/symbol_18.png'), ('symbol3', 'ressources/symbol_24.png'), ('symbol4', 'ressources/symbol_38.png'), ('symbol5', 'ressources/symbol_63.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 19), ('stimulus1', 'ressources/symbol_18.png'), ('stimulus2', 'ressources/symbol_53.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_66.png'), ('symbol2', 'ressources/symbol_32.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_48.png'), ('symbol5', 'ressources/symbol_53.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 20), ('stimulus1', 'ressources/symbol_24.png'), ('stimulus2', 'ressources/symbol_31.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_45.png'), ('symbol2', 'ressources/symbol_03.png'), ('symbol3', 'ressources/symbol_55.png'), ('symbol4', 'ressources/symbol_37.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 21), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_76.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_57.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_31.png'), ('symbol5', 'ressources/symbol_07.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 22), ('stimulus1', 'ressources/symbol_58.png'), ('stimulus2', 'ressources/symbol_27.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_58.png'), ('symbol4', 'ressources/symbol_74.png'), ('symbol5', 'ressources/symbol_21.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 23), ('stimulus1', 'ressources/symbol_65.png'), ('stimulus2', 'ressources/symbol_02.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_36.png'), ('symbol2', 'ressources/symbol_54.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_04.png'), ('symbol5', 'ressources/symbol_64.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 24), ('stimulus1', 'ressources/symbol_68.png'), ('stimulus2', 'ressources/symbol_74.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_11.png'), ('symbol2', 'ressources/symbol_25.png'), ('symbol3', 'ressources/symbol_52.png'), ('symbol4', 'ressources/symbol_74.png'), ('symbol5', 'ressources/symbol_38.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 25), ('stimulus1', 'ressources/symbol_36.png'), ('stimulus2', 'ressources/symbol_78.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_47.png'), ('symbol2', 'ressources/symbol_01.png'), ('symbol3', 'ressources/symbol_63.png'), ('symbol4', 'ressources/symbol_76.png'), ('symbol5', 'ressources/symbol_13.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 26), ('stimulus1', 'ressources/symbol_24.png'), ('stimulus2', 'ressources/symbol_54.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_27.png'), ('symbol2', 'ressources/symbol_04.png'), ('symbol3', 'ressources/symbol_47.png'), ('symbol4', 'ressources/symbol_71.png'), ('symbol5', 'ressources/symbol_32.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 27), ('stimulus1', 'ressources/symbol_68.png'), ('stimulus2', 'ressources/symbol_44.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_04.png'), ('symbol2', 'ressources/symbol_57.png'), ('symbol3', 'ressources/symbol_34.png'), ('symbol4', 'ressources/symbol_14.png'), ('symbol5', 'ressources/symbol_71.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 28), ('stimulus1', 'ressources/symbol_58.png'), ('stimulus2', 'ressources/symbol_63.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_58.png'), ('symbol2', 'ressources/symbol_26.png'), ('symbol3', 'ressources/symbol_36.png'), ('symbol4', 'ressources/symbol_08.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 29), ('stimulus1', 'ressources/symbol_28.png'), ('stimulus2', 'ressources/symbol_34.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_26.png'), ('symbol2', 'ressources/symbol_74.png'), ('symbol3', 'ressources/symbol_34.png'), ('symbol4', 'ressources/symbol_11.png'), ('symbol5', 'ressources/symbol_45.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 30), ('stimulus1', 'ressources/symbol_35.png'), ('stimulus2', 'ressources/symbol_05.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_21.png'), ('symbol2', 'ressources/symbol_42.png'), ('symbol3', 'ressources/symbol_75.png'), ('symbol4', 'ressources/symbol_34.png'), ('symbol5', 'ressources/symbol_61.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 31), ('stimulus1', 'ressources/symbol_53.png'), ('stimulus2', 'ressources/symbol_34.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_05.png'), ('symbol2', 'ressources/symbol_48.png'), ('symbol3', 'ressources/symbol_23.png'), ('symbol4', 'ressources/symbol_73.png'), ('symbol5', 'ressources/symbol_55.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 32), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_25.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_56.png'), ('symbol2', 'ressources/symbol_25.png'), ('symbol3', 'ressources/symbol_48.png'), ('symbol4', 'ressources/symbol_77.png'), ('symbol5', 'ressources/symbol_13.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 33), ('stimulus1', 'ressources/symbol_17.png'), ('stimulus2', 'ressources/symbol_46.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_48.png'), ('symbol2', 'ressources/symbol_65.png'), ('symbol3', 'ressources/symbol_72.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_17.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 34), ('stimulus1', 'ressources/symbol_17.png'), ('stimulus2', 'ressources/symbol_41.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_38.png'), ('symbol2', 'ressources/symbol_24.png'), ('symbol3', 'ressources/symbol_71.png'), ('symbol4', 'ressources/symbol_51.png'), ('symbol5', 'ressources/symbol_04.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 35), ('stimulus1', 'ressources/symbol_35.png'), ('stimulus2', 'ressources/symbol_26.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_73.png'), ('symbol2', 'ressources/symbol_53.png'), ('symbol3', 'ressources/symbol_08.png'), ('symbol4', 'ressources/symbol_35.png'), ('symbol5', 'ressources/symbol_18.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 36), ('stimulus1', 'ressources/symbol_26.png'), ('stimulus2', 'ressources/symbol_14.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_36.png'), ('symbol2', 'ressources/symbol_21.png'), ('symbol3', 'ressources/symbol_71.png'), ('symbol4', 'ressources/symbol_07.png'), ('symbol5', 'ressources/symbol_57.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 37), ('stimulus1', 'ressources/symbol_46.png'), ('stimulus2', 'ressources/symbol_21.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_22.png'), ('symbol2', 'ressources/symbol_01.png'), ('symbol3', 'ressources/symbol_36.png'), ('symbol4', 'ressources/symbol_58.png'), ('symbol5', 'ressources/symbol_43.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 38), ('stimulus1', 'ressources/symbol_43.png'), ('stimulus2', 'ressources/symbol_53.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_45.png'), ('symbol2', 'ressources/symbol_71.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_53.png'), ('symbol5', 'ressources/symbol_23.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 39), ('stimulus1', 'ressources/symbol_65.png'), ('stimulus2', 'ressources/symbol_58.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_13.png'), ('symbol2', 'ressources/symbol_42.png'), ('symbol3', 'ressources/symbol_33.png'), ('symbol4', 'ressources/symbol_52.png'), ('symbol5', 'ressources/symbol_65.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 40), ('stimulus1', 'ressources/symbol_17.png'), ('stimulus2', 'ressources/symbol_37.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_34.png'), ('symbol2', 'ressources/symbol_22.png'), ('symbol3', 'ressources/symbol_44.png'), ('symbol4', 'ressources/symbol_08.png'), ('symbol5', 'ressources/symbol_11.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 41), ('stimulus1', 'ressources/symbol_04.png'), ('stimulus2', 'ressources/symbol_43.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_04.png'), ('symbol2', 'ressources/symbol_12.png'), ('symbol3', 'ressources/symbol_25.png'), ('symbol4', 'ressources/symbol_32.png'), ('symbol5', 'ressources/symbol_45.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 42), ('stimulus1', 'ressources/symbol_34.png'), ('stimulus2', 'ressources/symbol_65.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_74.png'), ('symbol2', 'ressources/symbol_03.png'), ('symbol3', 'ressources/symbol_11.png'), ('symbol4', 'ressources/symbol_65.png'), ('symbol5', 'ressources/symbol_22.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 43), ('stimulus1', 'ressources/symbol_47.png'), ('stimulus2', 'ressources/symbol_18.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_56.png'), ('symbol2', 'ressources/symbol_42.png'), ('symbol3', 'ressources/symbol_66.png'), ('symbol4', 'ressources/symbol_18.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 44), ('stimulus1', 'ressources/symbol_53.png'), ('stimulus2', 'ressources/symbol_25.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_61.png'), ('symbol2', 'ressources/symbol_06.png'), ('symbol3', 'ressources/symbol_12.png'), ('symbol4', 'ressources/symbol_43.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 45), ('stimulus1', 'ressources/symbol_32.png'), ('stimulus2', 'ressources/symbol_68.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_46.png'), ('symbol2', 'ressources/symbol_37.png'), ('symbol3', 'ressources/symbol_23.png'), ('symbol4', 'ressources/symbol_03.png'), ('symbol5', 'ressources/symbol_18.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 46), ('stimulus1', 'ressources/symbol_22.png'), ('stimulus2', 'ressources/symbol_38.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_46.png'), ('symbol2', 'ressources/symbol_78.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_56.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 47), ('stimulus1', 'ressources/symbol_77.png'), ('stimulus2', 'ressources/symbol_21.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_73.png'), ('symbol2', 'ressources/symbol_32.png'), ('symbol3', 'ressources/symbol_06.png'), ('symbol4', 'ressources/symbol_21.png'), ('symbol5', 'ressources/symbol_67.png')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 48), ('stimulus1', 'ressources/symbol_64.png'), ('stimulus2', 'ressources/symbol_52.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_44.png'), ('symbol2', 'ressources/symbol_02.png'), ('symbol3', 'ressources/symbol_72.png'), ('symbol4', 'ressources/symbol_55.png'), ('symbol5', 'ressources/symbol_15.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 1), ('stimulus1', 'ressources/symbol_54.png'), ('stimulus2', 'ressources/symbol_37.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_44.png'), ('symbol2', 'ressources/symbol_26.png'), ('symbol3', 'ressources/symbol_01.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_37.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 2), ('stimulus1', 'ressources/symbol_27.png'), ('stimulus2', 'ressources/symbol_62.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_44.png'), ('symbol2', 'ressources/symbol_08.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_13.png'), ('symbol5', 'ressources/symbol_71.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 3), ('stimulus1', 'ressources/symbol_28.png'), ('stimulus2', 'ressources/symbol_74.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_13.png'), ('symbol2', 'ressources/symbol_72.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_67.png'), ('symbol5', 'ressources/symbol_04.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 4), ('stimulus1', 'ressources/symbol_55.png'), ('stimulus2', 'ressources/symbol_17.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_07.png'), ('symbol2', 'ressources/symbol_53.png'), ('symbol3', 'ressources/symbol_41.png'), ('symbol4', 'ressources/symbol_17.png'), ('symbol5', 'ressources/symbol_21.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 5), ('stimulus1', 'ressources/symbol_67.png'), ('stimulus2', 'ressources/symbol_45.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_08.png'), ('symbol2', 'ressources/symbol_37.png'), ('symbol3', 'ressources/symbol_52.png'), ('symbol4', 'ressources/symbol_13.png'), ('symbol5', 'ressources/symbol_62.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 6), ('stimulus1', 'ressources/symbol_68.png'), ('stimulus2', 'ressources/symbol_45.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_68.png'), ('symbol2', 'ressources/symbol_75.png'), ('symbol3', 'ressources/symbol_06.png'), ('symbol4', 'ressources/symbol_32.png'), ('symbol5', 'ressources/symbol_28.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 7), ('stimulus1', 'ressources/symbol_57.png'), ('stimulus2', 'ressources/symbol_63.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_75.png'), ('symbol2', 'ressources/symbol_44.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_53.png'), ('symbol5', 'ressources/symbol_08.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 8), ('stimulus1', 'ressources/symbol_28.png'), ('stimulus2', 'ressources/symbol_76.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_58.png'), ('symbol2', 'ressources/symbol_17.png'), ('symbol3', 'ressources/symbol_26.png'), ('symbol4', 'ressources/symbol_76.png'), ('symbol5', 'ressources/symbol_35.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 9), ('stimulus1', 'ressources/symbol_31.png'), ('stimulus2', 'ressources/symbol_52.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_67.png'), ('symbol2', 'ressources/symbol_41.png'), ('symbol3', 'ressources/symbol_17.png'), ('symbol4', 'ressources/symbol_31.png'), ('symbol5', 'ressources/symbol_03.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 10), ('stimulus1', 'ressources/symbol_08.png'), ('stimulus2', 'ressources/symbol_22.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_41.png'), ('symbol2', 'ressources/symbol_56.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_76.png'), ('symbol5', 'ressources/symbol_11.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 11), ('stimulus1', 'ressources/symbol_22.png'), ('stimulus2', 'ressources/symbol_77.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_35.png'), ('symbol2', 'ressources/symbol_57.png'), ('symbol3', 'ressources/symbol_22.png'), ('symbol4', 'ressources/symbol_64.png'), ('symbol5', 'ressources/symbol_01.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 12), ('stimulus1', 'ressources/symbol_22.png'), ('stimulus2', 'ressources/symbol_74.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_52.png'), ('symbol2', 'ressources/symbol_35.png'), ('symbol3', 'ressources/symbol_13.png'), ('symbol4', 'ressources/symbol_67.png'), ('symbol5', 'ressources/symbol_22.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 13), ('stimulus1', 'ressources/symbol_34.png'), ('stimulus2', 'ressources/symbol_06.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_04.png'), ('symbol2', 'ressources/symbol_66.png'), ('symbol3', 'ressources/symbol_55.png'), ('symbol4', 'ressources/symbol_15.png'), ('symbol5', 'ressources/symbol_43.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 14), ('stimulus1', 'ressources/symbol_05.png'), ('stimulus2', 'ressources/symbol_51.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_05.png'), ('symbol2', 'ressources/symbol_62.png'), ('symbol3', 'ressources/symbol_31.png'), ('symbol4', 'ressources/symbol_76.png'), ('symbol5', 'ressources/symbol_11.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 15), ('stimulus1', 'ressources/symbol_57.png'), ('stimulus2', 'ressources/symbol_61.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_26.png'), ('symbol2', 'ressources/symbol_77.png'), ('symbol3', 'ressources/symbol_62.png'), ('symbol4', 'ressources/symbol_51.png'), ('symbol5', 'ressources/symbol_01.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 16), ('stimulus1', 'ressources/symbol_36.png'), ('stimulus2', 'ressources/symbol_03.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_32.png'), ('symbol2', 'ressources/symbol_54.png'), ('symbol3', 'ressources/symbol_14.png'), ('symbol4', 'ressources/symbol_05.png'), ('symbol5', 'ressources/symbol_46.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 17), ('stimulus1', 'ressources/symbol_71.png'), ('stimulus2', 'ressources/symbol_14.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_73.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_57.png'), ('symbol4', 'ressources/symbol_46.png'), ('symbol5', 'ressources/symbol_65.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 18), ('stimulus1', 'ressources/symbol_75.png'), ('stimulus2', 'ressources/symbol_02.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_51.png'), ('symbol2', 'ressources/symbol_26.png'), ('symbol3', 'ressources/symbol_63.png'), ('symbol4', 'ressources/symbol_36.png'), ('symbol5', 'ressources/symbol_46.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 19), ('stimulus1', 'ressources/symbol_72.png'), ('stimulus2', 'ressources/symbol_53.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_54.png'), ('symbol2', 'ressources/symbol_63.png'), ('symbol3', 'ressources/symbol_07.png'), ('symbol4', 'ressources/symbol_14.png'), ('symbol5', 'ressources/symbol_72.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 20), ('stimulus1', 'ressources/symbol_22.png'), ('stimulus2', 'ressources/symbol_48.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_54.png'), ('symbol2', 'ressources/symbol_73.png'), ('symbol3', 'ressources/symbol_13.png'), ('symbol4', 'ressources/symbol_34.png'), ('symbol5', 'ressources/symbol_06.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 21), ('stimulus1', 'ressources/symbol_64.png'), ('stimulus2', 'ressources/symbol_03.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_24.png'), ('symbol3', 'ressources/symbol_74.png'), ('symbol4', 'ressources/symbol_43.png'), ('symbol5', 'ressources/symbol_54.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 22), ('stimulus1', 'ressources/symbol_75.png'), ('stimulus2', 'ressources/symbol_53.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_65.png'), ('symbol2', 'ressources/symbol_03.png'), ('symbol3', 'ressources/symbol_31.png'), ('symbol4', 'ressources/symbol_26.png'), ('symbol5', 'ressources/symbol_16.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 23), ('stimulus1', 'ressources/symbol_57.png'), ('stimulus2', 'ressources/symbol_26.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_43.png'), ('symbol2', 'ressources/symbol_08.png'), ('symbol3', 'ressources/symbol_63.png'), ('symbol4', 'ressources/symbol_24.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 24), ('stimulus1', 'ressources/symbol_67.png'), ('stimulus2', 'ressources/symbol_27.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_47.png'), ('symbol2', 'ressources/symbol_24.png'), ('symbol3', 'ressources/symbol_08.png'), ('symbol4', 'ressources/symbol_16.png'), ('symbol5', 'ressources/symbol_52.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 25), ('stimulus1', 'ressources/symbol_16.png'), ('stimulus2', 'ressources/symbol_61.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_72.png'), ('symbol2', 'ressources/symbol_66.png'), ('symbol3', 'ressources/symbol_38.png'), ('symbol4', 'ressources/symbol_12.png'), ('symbol5', 'ressources/symbol_58.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 26), ('stimulus1', 'ressources/symbol_71.png'), ('stimulus2', 'ressources/symbol_32.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_77.png'), ('symbol2', 'ressources/symbol_06.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_53.png'), ('symbol5', 'ressources/symbol_65.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 27), ('stimulus1', 'ressources/symbol_41.png'), ('stimulus2', 'ressources/symbol_15.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_21.png'), ('symbol2', 'ressources/symbol_41.png'), ('symbol3', 'ressources/symbol_52.png'), ('symbol4', 'ressources/symbol_68.png'), ('symbol5', 'ressources/symbol_04.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 28), ('stimulus1', 'ressources/symbol_21.png'), ('stimulus2', 'ressources/symbol_11.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_41.png'), ('symbol2', 'ressources/symbol_16.png'), ('symbol3', 'ressources/symbol_35.png'), ('symbol4', 'ressources/symbol_21.png'), ('symbol5', 'ressources/symbol_74.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 29), ('stimulus1', 'ressources/symbol_56.png'), ('stimulus2', 'ressources/symbol_06.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_78.png'), ('symbol2', 'ressources/symbol_05.png'), ('symbol3', 'ressources/symbol_22.png'), ('symbol4', 'ressources/symbol_15.png'), ('symbol5', 'ressources/symbol_37.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 30), ('stimulus1', 'ressources/symbol_01.png'), ('stimulus2', 'ressources/symbol_77.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_53.png'), ('symbol2', 'ressources/symbol_74.png'), ('symbol3', 'ressources/symbol_01.png'), ('symbol4', 'ressources/symbol_63.png'), ('symbol5', 'ressources/symbol_27.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 31), ('stimulus1', 'ressources/symbol_45.png'), ('stimulus2', 'ressources/symbol_37.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_71.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_32.png'), ('symbol4', 'ressources/symbol_23.png'), ('symbol5', 'ressources/symbol_61.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 32), ('stimulus1', 'ressources/symbol_54.png'), ('stimulus2', 'ressources/symbol_14.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_76.png'), ('symbol2', 'ressources/symbol_54.png'), ('symbol3', 'ressources/symbol_62.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_41.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 33), ('stimulus1', 'ressources/symbol_25.png'), ('stimulus2', 'ressources/symbol_51.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_26.png'), ('symbol2', 'ressources/symbol_78.png'), ('symbol3', 'ressources/symbol_48.png'), ('symbol4', 'ressources/symbol_57.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 34), ('stimulus1', 'ressources/symbol_56.png'), ('stimulus2', 'ressources/symbol_34.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_34.png'), ('symbol2', 'ressources/symbol_62.png'), ('symbol3', 'ressources/symbol_53.png'), ('symbol4', 'ressources/symbol_71.png'), ('symbol5', 'ressources/symbol_23.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 35), ('stimulus1', 'ressources/symbol_06.png'), ('stimulus2', 'ressources/symbol_68.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_17.png'), ('symbol2', 'ressources/symbol_47.png'), ('symbol3', 'ressources/symbol_06.png'), ('symbol4', 'ressources/symbol_26.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 36), ('stimulus1', 'ressources/symbol_75.png'), ('stimulus2', 'ressources/symbol_51.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_46.png'), ('symbol2', 'ressources/symbol_04.png'), ('symbol3', 'ressources/symbol_13.png'), ('symbol4', 'ressources/symbol_53.png'), ('symbol5', 'ressources/symbol_78.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 37), ('stimulus1', 'ressources/symbol_13.png'), ('stimulus2', 'ressources/symbol_33.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_55.png'), ('symbol2', 'ressources/symbol_05.png'), ('symbol3', 'ressources/symbol_75.png'), ('symbol4', 'ressources/symbol_48.png'), ('symbol5', 'ressources/symbol_33.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 38), ('stimulus1', 'ressources/symbol_72.png'), ('stimulus2', 'ressources/symbol_23.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_25.png'), ('symbol2', 'ressources/symbol_74.png'), ('symbol3', 'ressources/symbol_51.png'), ('symbol4', 'ressources/symbol_67.png'), ('symbol5', 'ressources/symbol_12.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 39), ('stimulus1', 'ressources/symbol_33.png'), ('stimulus2', 'ressources/symbol_62.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_62.png'), ('symbol2', 'ressources/symbol_03.png'), ('symbol3', 'ressources/symbol_13.png'), ('symbol4', 'ressources/symbol_23.png'), ('symbol5', 'ressources/symbol_31.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 40), ('stimulus1', 'ressources/symbol_67.png'), ('stimulus2', 'ressources/symbol_04.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_32.png'), ('symbol2', 'ressources/symbol_63.png'), ('symbol3', 'ressources/symbol_77.png'), ('symbol4', 'ressources/symbol_54.png'), ('symbol5', 'ressources/symbol_47.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 41), ('stimulus1', 'ressources/symbol_58.png'), ('stimulus2', 'ressources/symbol_77.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_28.png'), ('symbol2', 'ressources/symbol_08.png'), ('symbol3', 'ressources/symbol_62.png'), ('symbol4', 'ressources/symbol_75.png'), ('symbol5', 'ressources/symbol_58.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 42), ('stimulus1', 'ressources/symbol_45.png'), ('stimulus2', 'ressources/symbol_71.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_45.png'), ('symbol2', 'ressources/symbol_33.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_15.png'), ('symbol5', 'ressources/symbol_64.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 43), ('stimulus1', 'ressources/symbol_01.png'), ('stimulus2', 'ressources/symbol_64.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_62.png'), ('symbol2', 'ressources/symbol_22.png'), ('symbol3', 'ressources/symbol_53.png'), ('symbol4', 'ressources/symbol_01.png'), ('symbol5', 'ressources/symbol_32.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 44), ('stimulus1', 'ressources/symbol_74.png'), ('stimulus2', 'ressources/symbol_24.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_13.png'), ('symbol2', 'ressources/symbol_23.png'), ('symbol3', 'ressources/symbol_07.png'), ('symbol4', 'ressources/symbol_56.png'), ('symbol5', 'ressources/symbol_34.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 45), ('stimulus1', 'ressources/symbol_63.png'), ('stimulus2', 'ressources/symbol_15.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_14.png'), ('symbol2', 'ressources/symbol_68.png'), ('symbol3', 'ressources/symbol_27.png'), ('symbol4', 'ressources/symbol_05.png'), ('symbol5', 'ressources/symbol_75.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 46), ('stimulus1', 'ressources/symbol_16.png'), ('stimulus2', 'ressources/symbol_24.png'), ('correct_resp', 'k'), ('symbol1', 'ressources/symbol_16.png'), ('symbol2', 'ressources/symbol_07.png'), ('symbol3', 'ressources/symbol_24.png'), ('symbol4', 'ressources/symbol_31.png'), ('symbol5', 'ressources/symbol_47.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 47), ('stimulus1', 'ressources/symbol_34.png'), ('stimulus2', 'ressources/symbol_72.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_23.png'), ('symbol2', 'ressources/symbol_14.png'), ('symbol3', 'ressources/symbol_41.png'), ('symbol4', 'ressources/symbol_65.png'), ('symbol5', 'ressources/symbol_04.png')]), OrderedDict([('block', 'test'), ('block_n', 3), ('trial', 48), ('stimulus1', 'ressources/symbol_65.png'), ('stimulus2', 'ressources/symbol_07.png'), ('correct_resp', 'd'), ('symbol1', 'ressources/symbol_42.png'), ('symbol2', 'ressources/symbol_75.png'), ('symbol3', 'ressources/symbol_67.png'), ('symbol4', 'ressources/symbol_21.png'), ('symbol5', 'ressources/symbol_01.png')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="symbols_scenario.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="testTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="pre_stim"/>
    <Routine name="symbols"/>
    <LoopTerminator name="testTrials"/>
    <Routine name="pause"/>
    <LoopTerminator name="testblocks"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>

<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="False" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="KeepTrack" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="warning" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="init">
      <RoutineSettingsComponent name="init" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="init" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="define_block" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import pandas as pd&amp;#10;&amp;#10;# Load the CSV file&amp;#10;scenario_df = pd.read_csv('keep_track_scenario.csv')&amp;#10;&amp;#10;# Select practice and test blocks&amp;#10;practice_blocks = scenario_df[scenario_df['block'] == 'practice']['block_n'].unique().tolist()&amp;#10;test_blocks = scenario_df[scenario_df['block'] == 'test']['block_n'].unique().tolist()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as pd from 'pandas';&amp;#10;scenario_df = pd.read_csv(&quot;keep_track_scenario.csv&quot;);&amp;#10;practice_blocks = scenario_df[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)][&quot;block_n&quot;].unique().tolist();&amp;#10;test_blocks = scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().tolist();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="language" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'French'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Define instructions based on the selected language&amp;#10;if language == &quot;English&quot;:&amp;#10;    instructions = {&amp;#10;        'name_task': 'KEEP-TRACK',&amp;#10;        'Introduction1': &quot;Welcome to the Keep-Track task.\nIn this task, you will be presented with a sequence of 15 words, one at a time in the center of the screen.\n\nThe words will be selected from the following 6 categories:\n\n- Animals: bear, dog, horse, lion, rabbit, wolf\n- Colors: blue, green, white, purple, red, yellow\n- Countries: Australia, Brazil, China, Italy, India, Japan\n- Fruits: banana, strawberry, melon, pear, apple, apricot\n- Body: mouth, arm, elbow, foot, leg, hand\n- Family: mother, father, brother, sister, aunt, uncle\n\nTake a moment to familiarize yourself with the words.&quot;,&amp;#10;        'Introduction2': &quot;Once the 15 words have been presented, you will be asked to recall the last word presented for the selected categories.\nYou will always be informed of the categories to pay attention to before each new round begins.\n\nExample: The categories to keep track of are 'Animals' and 'Family'.\n\nThe 15 words are presented one by one in the center of the screen. The last item presented for the 'Animals' category is 'bear'. Type 'bear' for 'Animals' when you are asked to enter your responses in the text boxes. Make sure the spelling of the word you enter is correct.\n\n!Important!\nIt is important that you memorize the words.\nDo not write down the words.\n\nYou can start the practice when you are ready.&quot;,&amp;#10;        'Start_Actual_Task': &quot;Start of the Test\n\nThe training is over and the test is about to begin. There will be 12 rounds in total and the maximum number of categories to track will be 5.\n\nHere is a reminder of all the possible words:\n\n- Animals: bear, dog, horse, lion, rabbit, wolf\n- Colors: blue, green, white, purple, red, yellow\n- Countries: Australia, Brazil, China, Italy, India, Japan\n- Fruits: banana, strawberry, melon, pear, apple, apricot\n- Body: mouth, arm, elbow, foot, leg, hand\n- Family: mother, father, brother, sister, aunt, uncle\n\n!Important!\nIt is important that you memorize the words.\nDo not write down the words.\n\nYou can start the test when you are ready.&quot;,&amp;#10;        'Pause': &quot;Pause\n\nPress the space bar when you are ready to continue&quot;,&amp;#10;        'text_end_task': &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;,&amp;#10;        'MemorizeCategories': &quot;Memorize the words from the following categories:\n\n\n\nPress spacebar when ready&quot;&amp;#10;    }&amp;#10;else:  # Default to French if any issues&amp;#10;    instructions = {&amp;#10;        'name_task': 'KEEP-TRACK',&amp;#10;        'Introduction1': &quot;Bienvenue dans la tâche de 'Keep-Track'.\nDans cette tâche, une séquence de 15 mots vous sera présentée, un par un au milieu de l'écran.\n\nLes mots seront sélectionnés parmi les 6 catégories suivantes :\n\n- Animaux: ours, chien, cheval, lion, lapin, loup\n- Couleurs: bleu, vert, blanc, violet, rouge, jaune\n- Pays: Australie, Brésil, Chine, Italie, Inde, Japon\n- Fruits: banane, fraise, melon, poire, pomme, abricot\n- Corps: bouche, bras, coude, pied, jambe, main\n- Famille: mère, père, frère, soeur, tante, oncle\n\nPrenez un moment pour vous familiariser avec les mots.&quot;,&amp;#10;        'Introduction2': &quot;Une fois que les 15 mots auront défilés, il vous sera demandé de rappeler le dernier mot présenté pour les catégories sélectionnées.\nIl vous sera toujours indiqué les catégories auxquelles il faudra prêter attention avant le début de chaque nouvelle manche.\n\nExemple: Les catégories à suivre sont : 'Animaux' et 'Famille'.\n\nLes 15 mots défilent un par un au milieu de l'écran. Le dernier élément présenté pour la catégorie 'Animaux' est 'ours'. Tapez 'ours' pour 'Animaux' lorsqu'on vous demandera d'entrer vos réponses dans les zones de texte. Vérifiez bien que l'orthographe du mot que vous entrez est correcte.\n\n!Important!\nIl est important que vous mémorisiez les mots.\nN'écrivez pas les mots.\n\nVous pouvez commencer l'entraînement quand vous êtes prêt.&quot;,&amp;#10;        'Start_Actual_Task': &quot;Début du test\n\nL'entraînement est terminé et le test est sur le point de commencer. Il y aura 12 manches au total et le nombre maximum de catégories à suivre sera de 5.\n\nVoici un rappel de tous les mots possibles:\n\n- Animaux: ours, chien, cheval, lion, lapin, loup\n- Couleurs: bleu, vert, blanc, violet, rouge, jaune\n- Pays: Australie, Brésil, Chine, Italie, Inde, Japon\n- Fruits: banane, fraise, melon, poire, pomme, abricot\n- Corps: bouche, bras, coude, pied, jambe, main\n- Famille: mère, père, frère, soeur, tante, oncle\n\n!Important!\nIl est important que vous mémorisiez les mots.\nN'écrivez pas les mots.\n\nVous pouvez commencer le test quand vous êtes prêt.&quot;,&amp;#10;        'Pause': &quot;Pause\n\nAppuyez sur la barre d'espace lorsque vous êtes prêt·e à continuer&quot;,&amp;#10;        'text_end_task': &quot;Cette tâche est maintenant terminée.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;,&amp;#10;        'MemorizeCategories': &quot;Mémorisez les mots des catégories suivantes :\n\n\n\nAppuyez sur la barre d'espace pour continuer&quot;&amp;#10;    }&amp;#10;&amp;#10;# Category translation dictionary with lowercase keys&amp;#10;category_translations = {&amp;#10;    'animal': 'animal',&amp;#10;    'color': 'couleur',&amp;#10;    'country': 'pays',&amp;#10;    'fruit': 'fruit',&amp;#10;    'body': 'corps',&amp;#10;    'family': 'famille'&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;French&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;KEEP-TRACK&quot;, &quot;Introduction1&quot;: &quot;Welcome to the Keep-Track task.\nIn this task, you will be presented with a sequence of 15 words, one at a time in the center of the screen.\n\nThe words will be selected from the following 6 categories:\n\n- Animals: bear, dog, horse, lion, rabbit, wolf\n- Colors: blue, green, white, purple, red, yellow\n- Countries: Australia, Brazil, China, Italy, India, Japan\n- Fruits: banana, strawberry, melon, pear, apple, apricot\n- Body: mouth, arm, elbow, foot, leg, hand\n- Family: mother, father, brother, sister, aunt, uncle\n\nTake a moment to familiarize yourself with the words.&quot;, &quot;Introduction2&quot;: &quot;Once the 15 words have been presented, you will be asked to recall the last word presented for the selected categories.\nYou will always be informed of the categories to pay attention to before each new round begins.\n\nExample: The categories to keep track of are 'Animals' and 'Family'.\n\nThe 15 words are presented one by one in the center of the screen. The last item presented for the 'Animals' category is 'bear'. Type 'bear' for 'Animals' when you are asked to enter your responses in the text boxes. Make sure the spelling of the word you enter is correct.\n\n!Important!\nIt is important that you memorize the words.\nDo not write down the words.\n\nYou can start the practice when you are ready.&quot;, &quot;Start_Actual_Task&quot;: &quot;Start of the Test\n\nThe training is over and the test is about to begin. There will be 12 rounds in total and the maximum number of categories to track will be 5.\n\nHere is a reminder of all the possible words:\n\n- Animals: bear, dog, horse, lion, rabbit, wolf\n- Colors: blue, green, white, purple, red, yellow\n- Countries: Australia, Brazil, China, Italy, India, Japan\n- Fruits: banana, strawberry, melon, pear, apple, apricot\n- Body: mouth, arm, elbow, foot, leg, hand\n- Family: mother, father, brother, sister, aunt, uncle\n\n!Important!\nIt is important that you memorize the words.\nDo not write down the words.\n\nYou can start the test when you are ready.&quot;, &quot;Pause&quot;: &quot;Pause\n\nPress the space bar when you are ready to continue&quot;, &quot;text_end_task&quot;: &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;, &quot;MemorizeCategories&quot;: &quot;Memorize the words from the following categories:\n\n\n\nPress spacebar when ready&quot;};&amp;#10;} else {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;KEEP-TRACK&quot;, &quot;Introduction1&quot;: &quot;Bienvenue dans la t\u00e2che de 'Keep-Track'.\nDans cette t\u00e2che, une s\u00e9quence de 15 mots vous sera pr\u00e9sent\u00e9e, un par un au milieu de l'\u00e9cran.\n\nLes mots seront s\u00e9lectionn\u00e9s parmi les 6 cat\u00e9gories suivantes :\n\n- Animaux: ours, chien, cheval, lion, lapin, loup\n- Couleurs: bleu, vert, blanc, violet, rouge, jaune\n- Pays: Australie, Br\u00e9sil, Chine, Italie, Inde, Japon\n- Fruits: banane, fraise, melon, poire, pomme, abricot\n- Corps: bouche, bras, coude, pied, jambe, main\n- Famille: m\u00e8re, p\u00e8re, fr\u00e8re, soeur, tante, oncle\n\nPrenez un moment pour vous familiariser avec les mots.&quot;, &quot;Introduction2&quot;: &quot;Une fois que les 15 mots auront d\u00e9fil\u00e9s, il vous sera demand\u00e9 de rappeler le dernier mot pr\u00e9sent\u00e9 pour les cat\u00e9gories s\u00e9lectionn\u00e9es.\nIl vous sera toujours indiqu\u00e9 les cat\u00e9gories auxquelles il faudra pr\u00eater attention avant le d\u00e9but de chaque nouvelle manche.\n\nExemple: Les cat\u00e9gories \u00e0 suivre sont : 'Animaux' et 'Famille'.\n\nLes 15 mots d\u00e9filent un par un au milieu de l'\u00e9cran. Le dernier \u00e9l\u00e9ment pr\u00e9sent\u00e9 pour la cat\u00e9gorie 'Animaux' est 'ours'. Tapez 'ours' pour 'Animaux' lorsqu'on vous demandera d'entrer vos r\u00e9ponses dans les zones de texte. V\u00e9rifiez bien que l'orthographe du mot que vous entrez est correcte.\n\n!Important!\nIl est important que vous m\u00e9morisiez les mots.\nN'\u00e9crivez pas les mots.\n\nVous pouvez commencer l'entra\u00eenement quand vous \u00eates pr\u00eat.&quot;, &quot;Start_Actual_Task&quot;: &quot;D\u00e9but du test\n\nL'entra\u00eenement est termin\u00e9 et le test est sur le point de commencer. Il y aura 12 manches au total et le nombre maximum de cat\u00e9gories \u00e0 suivre sera de 5.\n\nVoici un rappel de tous les mots possibles:\n\n- Animaux: ours, chien, cheval, lion, lapin, loup\n- Couleurs: bleu, vert, blanc, violet, rouge, jaune\n- Pays: Australie, Br\u00e9sil, Chine, Italie, Inde, Japon\n- Fruits: banane, fraise, melon, poire, pomme, abricot\n- Corps: bouche, bras, coude, pied, jambe, main\n- Famille: m\u00e8re, p\u00e8re, fr\u00e8re, soeur, tante, oncle\n\n!Important!\nIl est important que vous m\u00e9morisiez les mots.\nN'\u00e9crivez pas les mots.\n\nVous pouvez commencer le test quand vous \u00eates pr\u00eat.&quot;, &quot;Pause&quot;: &quot;Pause\n\nAppuyez sur la barre d'espace lorsque vous \u00eates pr\u00eat\u00b7e \u00e0 continuer&quot;, &quot;text_end_task&quot;: &quot;Cette t\u00e2che est maintenant termin\u00e9e.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;, &quot;MemorizeCategories&quot;: &quot;M\u00e9morisez les mots des cat\u00e9gories suivantes :\n\n\n\nAppuyez sur la barre d'espace pour continuer&quot;};&amp;#10;}&amp;#10;category_translations = {&quot;animal&quot;: &quot;animal&quot;, &quot;color&quot;: &quot;couleur&quot;, &quot;country&quot;: &quot;pays&quot;, &quot;fruit&quot;: &quot;fruit&quot;, &quot;body&quot;: &quot;corps&quot;, &quot;family&quot;: &quot;famille&quot;};&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="language" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import socket&amp;#10;import json&amp;#10;import threading&amp;#10;from pylsl import local_clock&amp;#10;&amp;#10;# Function to send markers to the LSL server&amp;#10;def send_marker(marker):&amp;#10;    event = {&amp;#10;        'marker': marker,&amp;#10;        'timestamp': local_clock()&amp;#10;    }&amp;#10;    message = json.dumps(event)&amp;#10;    &amp;#10;    def send():&amp;#10;        try:&amp;#10;            # Connect to the socket server and send the marker with a timeout&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&amp;#10;            client_socket.settimeout(0.1)  # Set timeout to 100 milliseconds&amp;#10;            client_socket.connect(('localhost', 5000))&amp;#10;            client_socket.sendall(message.encode('utf-8'))&amp;#10;            client_socket.close()&amp;#10;        except (ConnectionRefusedError, socket.timeout):&amp;#10;            print(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;)&amp;#10;    &amp;#10;    # Create and start a thread to send the marker&amp;#10;    send_thread = threading.Thread(target=send)&amp;#10;    send_thread.start()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as socket from 'socket';&amp;#10;import * as json from 'json';&amp;#10;import * as threading from 'threading';&amp;#10;import {local_clock} from 'pylsl';&amp;#10;function send_marker(marker) {&amp;#10;    var event, message, send_thread;&amp;#10;    event = {&quot;marker&quot;: marker, &quot;timestamp&quot;: local_clock()};&amp;#10;    message = json.dumps(psychoJS.eventManager);&amp;#10;    function send() {&amp;#10;        var client_socket;&amp;#10;        try {&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM);&amp;#10;            client_socket.settimeout(0.1);&amp;#10;            client_socket.connect([&quot;localhost&quot;, 5000]);&amp;#10;            client_socket.sendall(message.encode(&quot;utf-8&quot;));&amp;#10;            client_socket.close();&amp;#10;        } catch(e) {&amp;#10;            if (((e instanceof ConnectionRefusedError) || (e instanceof socket.timeout))) {&amp;#10;                console.log(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;);&amp;#10;            } else {&amp;#10;                throw e;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    send_thread = new threading.Thread({&quot;target&quot;: send});&amp;#10;    send_thread.start();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="ActivateWindow" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="win.winHandle.activate()  # Ensure the PsychoPy window is the primary window&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="psychoJS.window.winHandle.activate();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ActivateWindow" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="DeactivateMouse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="event.Mouse(visible=False)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: false});&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="DeactivateMouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="QuitTask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy import core, event&amp;#10;&amp;#10;# Add a global shutdown key: Ctrl + Q to quit the experiment&amp;#10;event.globalKeys.add(key='q', modifiers=['ctrl'], func=core.quit)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {core, event} from 'psychopy';&amp;#10;psychoJS.eventManager.globalKeys.add({&quot;key&quot;: &quot;q&quot;, &quot;modifiers&quot;: [&quot;ctrl&quot;], &quot;func&quot;: core.quit});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="QuitTask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="stimulus">
      <RoutineSettingsComponent name="stimulus" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="stimulus" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="word" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="word" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="90" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_word" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    word.text = stim_eng;&amp;#10;} else {&amp;#10;    word.text = stim_fr;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;if language == &quot;English&quot;:&amp;#10;    word.text = stim_eng&amp;#10;else:&amp;#10;    word.text = stim_fr&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_word" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_word" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((language === &quot;English&quot;)) {&amp;#10;    send_marker(stim_eng);&amp;#10;} else {&amp;#10;    send_marker(stim_fr);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if language == &quot;English&quot;:&amp;#10;    send_marker(stim_eng)&amp;#10;else:&amp;#10;    send_marker(stim_fr)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_word" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_categories_stim" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_categories_stim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="90" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_text_categories_stim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((language === &quot;French&quot;)) {&amp;#10;    categories_to_memorize = function () {&amp;#10;    var _pj_a = [], _pj_b = categories_to_memorize;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var cat = _pj_b[_pj_c];&amp;#10;        _pj_a.push(category_translations.get(cat, cat));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;}&amp;#10;text_categories_stim.setText(categories_to_memorize.join(&quot;   &quot;));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Translate categories if language is French&amp;#10;if language == &quot;French&quot;:&amp;#10;    categories_to_memorize = [category_translations.get(cat, cat) for cat in categories_to_memorize]&amp;#10;&amp;#10;text_categories_stim.setText(&quot;   &quot;.join(categories_to_memorize))" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_text_categories_stim" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="thanks">
      <RoutineSettingsComponent name="thanks" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="thanks" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText4" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="LSL_KeepTrack_end" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;KeepTrack_end&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('KeepTrack_end')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_KeepTrack_end" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText4.setText(instructions[&quot;text_end_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText4.setText(instructions['text_end_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_end" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_end" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ISI">
      <RoutineSettingsComponent name="ISI" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ISI" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="ISI_wait" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="ISI_wait" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_categories_ISI" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_categories_ISI" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_text_categories_ISI" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((language === &quot;French&quot;)) {&amp;#10;    categories_to_memorize = function () {&amp;#10;    var _pj_a = [], _pj_b = categories_to_memorize;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var cat = _pj_b[_pj_c];&amp;#10;        _pj_a.push(category_translations.get(cat, cat));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;}&amp;#10;text_categories_ISI.setText(categories_to_memorize.join(&quot;   &quot;));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Translate categories if language is French&amp;#10;if language == &quot;French&quot;:&amp;#10;    categories_to_memorize = [category_translations.get(cat, cat) for cat in categories_to_memorize]&amp;#10;&amp;#10;text_categories_ISI.setText(&quot;   &quot;.join(categories_to_memorize))" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_text_categories_ISI" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter_practice">
      <RoutineSettingsComponent name="block_counter_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;if ((block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)][&quot;block_n&quot;].unique().length)) {&amp;#10;    practiceblocks.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    block_n = block_index;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1&amp;#10;&amp;#10;# Determine the current block type and number&amp;#10;# block_type = 'test'&amp;#10;if block_index &gt;= len(scenario_df[scenario_df['block'] == 'practice']['block_n'].unique()):&amp;#10;    # Skip the remaining test blocks&amp;#10;    practiceblocks.finished = True&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    block_n = block_index  # block_n in CSV starts from 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_testblock_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;start_practice&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;start_practice&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_testblock_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="console.log((&quot;block_n = &quot; + block_n.toString()));&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print(&quot;block_n = &quot; + str(block_n))" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="increment_block_practice">
      <RoutineSettingsComponent name="increment_block_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="increment_block_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="check_block_counter_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((is_practice &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)][&quot;block_n&quot;].unique().length))) {&amp;#10;    practiceblocks.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if the block is test and block_n is to skip the loop&amp;#10;if is_practice and block_index &gt;= len(scenario_df[scenario_df['block'] == 'practice']['block_n'].unique()):&amp;#10;    practiceblocks.finished = True  # Skip the loop" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_block_counter_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="startTask">
      <RoutineSettingsComponent name="startTask" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="startTask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_start_task" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_start_task" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="start_Task" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="start_Task" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsStartTask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_start_task.text = instructions[&quot;Start_Actual_Task&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_start_task.text = instructions['Start_Actual_Task']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsStartTask" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_task" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_task" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_test = true;&amp;#10;is_practice = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for test&amp;#10;is_test = True&amp;#10;is_practice = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="test_script" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log(&quot;START TASK&quot;);&amp;#10;console.log(&quot;START TASK&quot;);&amp;#10;console.log(&quot;START TASK&quot;);&amp;#10;console.log(&quot;START TASK&quot;);&amp;#10;console.log(&quot;START TASK&quot;);&amp;#10;console.log(&quot;START TASK&quot;);&amp;#10;console.log(&quot;START TASK&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Debugging print statements&amp;#10;print(&quot;START TASK&quot;)&amp;#10;print(&quot;START TASK&quot;)&amp;#10;print(&quot;START TASK&quot;)&amp;#10;print(&quot;START TASK&quot;)&amp;#10;print(&quot;START TASK&quot;)&amp;#10;print(&quot;START TASK&quot;)&amp;#10;print(&quot;START TASK&quot;)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="test_script" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter">
      <RoutineSettingsComponent name="block_counter" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_testblock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_testblock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="pause">
      <RoutineSettingsComponent name="pause" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="pause" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_pause" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_pause" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="Unpause" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Unpause" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsPause" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_pause.text = instructions[&quot;Pause&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_pause.text = instructions['Pause']&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsPause" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_test">
      <RoutineSettingsComponent name="instructions_test" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_test" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_mouse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="event.Mouse(visible=False)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: false});&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_mouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_IdentifyCategories" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if (is_practice) {&amp;#10;    block_type = &quot;practice&quot;;&amp;#10;} else {&amp;#10;    block_type = &quot;test&quot;;&amp;#10;}&amp;#10;categories_to_memorize = [];&amp;#10;num_categories = Number.parseInt(scenario_df[((scenario_df[&quot;block&quot;] === block_type) &amp; (scenario_df[&quot;block_n&quot;] === block_index))].iloc[0][&quot;word_n&quot;]);&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(1, (num_categories + 1)), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    category = scenario_df[((scenario_df[&quot;block&quot;] === block_type) &amp; (scenario_df[&quot;block_n&quot;] === block_index))].iloc[0][`cat_to_memorize${i}`];&amp;#10;    if ((category !== &quot;NA&quot;)) {&amp;#10;        if (((language === &quot;French&quot;) &amp;&amp; _pj.in_es6(category, category_translations))) {&amp;#10;            category = category_translations[category];&amp;#10;        }&amp;#10;        categories_to_memorize.push(category);&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;categories_to_memorize&quot;, categories_to_memorize);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Determine the current block type and number&amp;#10;if is_practice:&amp;#10;    block_type = 'practice'&amp;#10;else:&amp;#10;    block_type = 'test'&amp;#10;&amp;#10;# Initialize categories_to_memorize as an empty list&amp;#10;categories_to_memorize = []&amp;#10;&amp;#10;# Get the number of words to memorize from the current block&amp;#10;num_categories = int(scenario_df[(scenario_df['block'] == block_type) &amp; (scenario_df['block_n'] == block_index)].iloc[0]['word_n'])&amp;#10;&amp;#10;# Dynamically add categories based on the CSV columns&amp;#10;for i in range(1, num_categories + 1):&amp;#10;    category = scenario_df[(scenario_df['block'] == block_type) &amp; (scenario_df['block_n'] == block_index)].iloc[0][f'cat_to_memorize{i}']&amp;#10;    if category != 'NA':&amp;#10;        # Translate the category if language is French&amp;#10;        if language == &quot;French&quot; and category in category_translations:&amp;#10;            category = category_translations[category]&amp;#10;        categories_to_memorize.append(category)&amp;#10;&amp;#10;# Save the categories to memorize in the experiment data&amp;#10;thisExp.addData('categories_to_memorize', categories_to_memorize)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_IdentifyCategories" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_instructions" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_instructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="&amp;#10;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_text_instructions" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="text_instructions.setText(instructions[&quot;MemorizeCategories&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="text_instructions.setText(instructions['MemorizeCategories'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_text_instructions" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_categories" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_categories" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_text_categories" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((language === &quot;French&quot;)) {&amp;#10;    categories_to_memorize = function () {&amp;#10;    var _pj_a = [], _pj_b = categories_to_memorize;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var cat = _pj_b[_pj_c];&amp;#10;        _pj_a.push(category_translations.get(cat, cat));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;}&amp;#10;text_categories.setText(categories_to_memorize.join(&quot;   &quot;));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Translate categories if language is French&amp;#10;if language == &quot;French&quot;:&amp;#10;    categories_to_memorize = [category_translations.get(cat, cat) for cat in categories_to_memorize]&amp;#10;&amp;#10;text_categories.setText(&quot;   &quot;.join(categories_to_memorize))" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_text_categories" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;practice_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('practice_block')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="response">
      <RoutineSettingsComponent name="response" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="response" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="DynamicTextBoxes" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Create a list to hold the text boxes&amp;#10;text_boxes = []&amp;#10;&amp;#10;# Create the text boxes dynamically based on categories_to_memorize&amp;#10;for i, category in enumerate(categories_to_memorize):&amp;#10;    # Create a new text box with the category name&amp;#10;    text_box = visual.TextBox2(&amp;#10;        win=win, &amp;#10;        text=f&quot;{category}: &quot;,  # Include category name&amp;#10;        font='Arial',&amp;#10;        pos=(0, 0.2 - i*0.1),  # Adjust the position as needed&amp;#10;        letterHeight=0.05,&amp;#10;        size=(1.0, 0.1),&amp;#10;        borderWidth=2.0,&amp;#10;        color='black',&amp;#10;        colorSpace='rgb',&amp;#10;        opacity=None,&amp;#10;        bold=False,&amp;#10;        italic=False,&amp;#10;        lineSpacing=1.0,&amp;#10;        padding=None,&amp;#10;        alignment='center',&amp;#10;        anchor='center',&amp;#10;        fillColor='white',&amp;#10;        borderColor='black',&amp;#10;        flipHoriz=False,&amp;#10;        flipVert=False,&amp;#10;        editable=True,&amp;#10;        name=f'text_box_{i}',&amp;#10;        autoLog=True,&amp;#10;    )&amp;#10;    # Add the text box to the list&amp;#10;    text_boxes.append(text_box)&amp;#10;&amp;#10;# Create a &quot;Validate&quot; button&amp;#10;validate_button = visual.ButtonStim(&amp;#10;    win,&amp;#10;    text='Validate',&amp;#10;    font='Arial',&amp;#10;    pos=(0, -0.4),  # Position it below the text boxes&amp;#10;    letterHeight=0.05,&amp;#10;    size=(0.3, 0.1),&amp;#10;    borderWidth=2.0,&amp;#10;    fillColor='lightgrey',&amp;#10;    borderColor='black',&amp;#10;    color='black',&amp;#10;    colorSpace='rgb',&amp;#10;    opacity=1,&amp;#10;    bold=True,&amp;#10;    italic=False,&amp;#10;    padding=None,&amp;#10;    anchor='center',&amp;#10;    name='validate_button'&amp;#10;)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Activate Mouse&amp;#10;event.Mouse(visible=True)&amp;#10;&amp;#10;# Draw the text boxes&amp;#10;for text_box in text_boxes:&amp;#10;    text_box.draw()&amp;#10;&amp;#10;# Draw the validate button&amp;#10;validate_button.draw()&amp;#10;&amp;#10;# Check for mouse clicks on the validate button&amp;#10;if mouse.isPressedIn(validate_button):&amp;#10;    continueRoutine = False  # End the routine when the button is clicked&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: true});&amp;#10;for (var text_box, _pj_c = 0, _pj_a = text_boxes, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    text_box = _pj_a[_pj_c];&amp;#10;    text_box.draw();&amp;#10;}&amp;#10;validate_button.draw();&amp;#10;if (mouse.isPressedIn(validate_button)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Clear the text boxes&amp;#10;for text_box in text_boxes:&amp;#10;    text_box.setAutoDraw(False)&amp;#10;&amp;#10;# Save the responses&amp;#10;responses = {}&amp;#10;for i, text_box in enumerate(text_boxes):&amp;#10;    responses[f'category_{i}'] = text_box.text&amp;#10;&amp;#10;# Save the responses in the experiment data&amp;#10;thisExp.addData('responses', responses)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="DynamicTextBoxes" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="textbox" plugin="None">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="textbox" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="visible" valType="str" updates="constant" name="overflow"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="Type here..." valType="str" updates="constant" name="placeholder"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="list" updates="constant" name="speechPoint"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </TextboxComponent>
      <CodeComponent name="check_block_counter_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (((is_practice &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)][&quot;block_n&quot;].unique().length)) || (is_test &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length)))) {&amp;#10;    if (is_practice) {&amp;#10;        console.log(&quot;All practice blocks completed.&quot;);&amp;#10;        practiceblocks.finished = true;&amp;#10;    } else {&amp;#10;        if (is_test) {&amp;#10;            console.log(&quot;All test blocks completed.&quot;);&amp;#10;            testblocks.finished = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Check if the block is test and block_n is to skip the loop&amp;#10;#if is_practice and block_index &gt;= len(scenario_df[scenario_df['block'] == 'practice']['block_n'].unique()):&amp;#10;#    practiceblocks.finished = True  # Skip the loop&amp;#10;&amp;#10;# Check if the block is practice or test and if block_index exceeds the number of available blocks to skip the loop&amp;#10;if (is_practice and block_index &gt;= len(scenario_df[scenario_df['block'] == 'practice']['block_n'].unique())) or (is_test and block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique())):&amp;#10;    if is_practice:&amp;#10;        print(&quot;All practice blocks completed.&quot;)&amp;#10;        practiceblocks.finished = True  # Skip the practice loop&amp;#10;    elif is_test:&amp;#10;        print(&quot;All test blocks completed.&quot;)&amp;#10;        testblocks.finished = True  # Skip the test loop" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_block_counter_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse" plugin="None">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <CodeComponent name="LSL_recall" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;recall&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('recall')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;end_recall&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('end_recall')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_recall" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions2">
      <RoutineSettingsComponent name="instructions2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_introduction_2" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_introduction_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.6" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="end_inst_2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="end_inst_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_Instructions_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_introduction_2.text = instructions[&quot;Introduction2&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_introduction_2.text = instructions['Introduction2']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_Instructions_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_initialize_block_index" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for practice&amp;#10;is_practice = True&amp;#10;is_test = False" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_practice = true;&amp;#10;is_test = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_initialize_block_index" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_nametask_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="nametask_2.setText(instructions[&quot;name_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="nametask_2.setText(instructions['name_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nametask_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="nametask_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nametask_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="instructions1">
      <RoutineSettingsComponent name="instructions1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_introduction_1" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_introduction_1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.6" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="end_inst_1" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="end_inst_1" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_Instructions_1" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_introduction_1.text = instructions[&quot;Introduction1&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_introduction_1.text = instructions['Introduction1']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_Instructions_1" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_KT_start" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;KeepTrack_start&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('KeepTrack_start')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_KT_start" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_nametask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="nametask.setText(instructions[&quot;name_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="nametask.setText(instructions['name_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nametask" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="nametask" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nametask" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="init"/>
    <Routine name="instructions1"/>
    <Routine name="instructions2"/>
    <LoopInitiator loopType="TrialHandler" name="practiceblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('word_n', 2), ('trial', 1), ('stim_fr', 'ours'), ('stim_eng', 'bear'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('word_n', 2), ('trial', 2), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('word_n', 3), ('trial', 1), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('word_n', 3), ('trial', 2), ('stim_fr', 'Chine'), ('stim_eng', 'China'), ('animal', None), ('color', None), ('country', 'China'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 1), ('stim_fr', 'rouge'), ('stim_eng', 'red'), ('animal', None), ('color', 'red'), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 2), ('stim_fr', 'Japon'), ('stim_eng', 'Japan'), ('animal', None), ('color', 'red'), ('country', 'Japan'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 12), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', None), ('color', 'green'), ('country', 'Brazil'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('word_n', 2), ('trial', 1), ('stim_fr', 'poire'), ('stim_eng', 'pear'), ('animal', None), ('color', None), ('country', None), ('fruit', 'pear'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('word_n', 2), ('trial', 2), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', None), ('color', None), ('country', None), ('fruit', 'strawberry'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 1), ('stim_fr', 'chien'), ('stim_eng', 'dog'), ('animal', 'dog'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 2), ('stim_fr', 'pied'), ('stim_eng', 'foot'), ('animal', 'dog'), ('color', None), ('country', None), ('fruit', None), ('body', 'foot'), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 11), ('stim_fr', 'Australie'), ('stim_eng', 'Australia'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', 'brother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 12), ('stim_fr', 'abricot'), ('stim_eng', 'apricot'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', 'brother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 4), ('word_n', 3), ('trial', 1), ('stim_fr', 'abricot'), ('stim_eng', 'apricot'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apricot'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 4), ('word_n', 3), ('trial', 2), ('stim_fr', 'main'), ('stim_eng', 'hand'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apricot'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 1), ('stim_fr', 'coude'), ('stim_eng', 'elbow'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 2), ('stim_fr', 'poire'), ('stim_eng', 'pear'), ('animal', None), ('color', None), ('country', None), ('fruit', 'pear'), ('body', 'elbow'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 11), ('stim_fr', 'pomme'), ('stim_eng', 'apple'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apple'), ('body', 'arm'), ('family', 'father'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 12), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apple'), ('body', 'leg'), ('family', 'father'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 6), ('word_n', 3), ('trial', 1), ('stim_fr', 'Japon'), ('stim_eng', 'Japan'), ('animal', None), ('color', None), ('country', 'Japan'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'color'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 6), ('word_n', 3), ('trial', 12), ('stim_fr', 'Chine'), ('stim_eng', 'China'), ('animal', 'bear'), ('color', 'white'), ('country', 'China'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'color'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 7), ('word_n', 4), ('trial', 1), ('stim_fr', 'tante'), ('stim_eng', 'aunt'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'aunt'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 7), ('word_n', 4), ('trial', 2), ('stim_fr', 'bleu'), ('stim_eng', 'blue'), ('animal', None), ('color', 'blue'), ('country', None), ('fruit', None), ('body', None), ('family', 'aunt'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 8), ('word_n', 4), ('trial', 1), ('stim_fr', 'mère'), ('stim_eng', 'mother'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'fruit'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', 'body'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 8), ('word_n', 4), ('trial', 2), ('stim_fr', 'blanc'), ('stim_eng', 'white'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'fruit'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', 'body'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 9), ('word_n', 4), ('trial', 1), ('stim_fr', 'Inde'), ('stim_eng', 'India'), ('animal', None), ('color', None), ('country', 'India'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 9), ('word_n', 4), ('trial', 2), ('stim_fr', 'mère'), ('stim_eng', 'mother'), ('animal', None), ('color', None), ('country', 'India'), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 10), ('word_n', 4), ('trial', 1), ('stim_fr', 'jaune'), ('stim_eng', 'yellow'), ('animal', None), ('color', 'yellow'), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 10), ('word_n', 4), ('trial', 2), ('stim_fr', 'pied'), ('stim_eng', 'foot'), ('animal', None), ('color', 'yellow'), ('country', None), ('fruit', None), ('body', 'foot'), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 11), ('word_n', 5), ('trial', 11), ('stim_fr', 'melon'), ('stim_eng', 'melon'), ('animal', None), ('color', 'purple'), ('country', 'China'), ('fruit', 'melon'), ('body', None), ('family', 'uncle'), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 11), ('word_n', 5), ('trial', 12), ('stim_fr', 'pomme'), ('stim_eng', 'apple'), ('animal', None), ('color', 'purple'), ('country', 'China'), ('fruit', 'apple'), ('body', None), ('family', 'uncle'), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 12), ('word_n', 5), ('trial', 1), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', 'leg'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 12), ('word_n', 5), ('trial', 12), ('stim_fr', 'cheval'), ('stim_eng', 'horse'), ('animal', 'horse'), ('color', None), ('country', 'Japan'), ('fruit', None), ('body', 'arm'), ('family', 'mother'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="keep_track_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="practiceblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter_practice"/>
    <Routine name="instructions_test"/>
    <LoopInitiator loopType="TrialHandler" name="practiceTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('word_n', 2), ('trial', 1), ('stim_fr', 'ours'), ('stim_eng', 'bear'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('word_n', 2), ('trial', 2), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('word_n', 3), ('trial', 1), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('word_n', 3), ('trial', 2), ('stim_fr', 'Chine'), ('stim_eng', 'China'), ('animal', None), ('color', None), ('country', 'China'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 1), ('stim_fr', 'rouge'), ('stim_eng', 'red'), ('animal', None), ('color', 'red'), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 2), ('stim_fr', 'Japon'), ('stim_eng', 'Japan'), ('animal', None), ('color', 'red'), ('country', 'Japan'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 12), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', None), ('color', 'green'), ('country', 'Brazil'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('word_n', 2), ('trial', 1), ('stim_fr', 'poire'), ('stim_eng', 'pear'), ('animal', None), ('color', None), ('country', None), ('fruit', 'pear'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('word_n', 2), ('trial', 2), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', None), ('color', None), ('country', None), ('fruit', 'strawberry'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 1), ('stim_fr', 'chien'), ('stim_eng', 'dog'), ('animal', 'dog'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 2), ('stim_fr', 'pied'), ('stim_eng', 'foot'), ('animal', 'dog'), ('color', None), ('country', None), ('fruit', None), ('body', 'foot'), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 11), ('stim_fr', 'Australie'), ('stim_eng', 'Australia'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', 'brother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 12), ('stim_fr', 'abricot'), ('stim_eng', 'apricot'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', 'brother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 4), ('word_n', 3), ('trial', 1), ('stim_fr', 'abricot'), ('stim_eng', 'apricot'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apricot'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 4), ('word_n', 3), ('trial', 2), ('stim_fr', 'main'), ('stim_eng', 'hand'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apricot'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 1), ('stim_fr', 'coude'), ('stim_eng', 'elbow'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 2), ('stim_fr', 'poire'), ('stim_eng', 'pear'), ('animal', None), ('color', None), ('country', None), ('fruit', 'pear'), ('body', 'elbow'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 11), ('stim_fr', 'pomme'), ('stim_eng', 'apple'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apple'), ('body', 'arm'), ('family', 'father'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 12), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apple'), ('body', 'leg'), ('family', 'father'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 6), ('word_n', 3), ('trial', 1), ('stim_fr', 'Japon'), ('stim_eng', 'Japan'), ('animal', None), ('color', None), ('country', 'Japan'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'color'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 6), ('word_n', 3), ('trial', 12), ('stim_fr', 'Chine'), ('stim_eng', 'China'), ('animal', 'bear'), ('color', 'white'), ('country', 'China'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'color'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 7), ('word_n', 4), ('trial', 1), ('stim_fr', 'tante'), ('stim_eng', 'aunt'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'aunt'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 7), ('word_n', 4), ('trial', 2), ('stim_fr', 'bleu'), ('stim_eng', 'blue'), ('animal', None), ('color', 'blue'), ('country', None), ('fruit', None), ('body', None), ('family', 'aunt'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 8), ('word_n', 4), ('trial', 1), ('stim_fr', 'mère'), ('stim_eng', 'mother'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'fruit'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', 'body'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 8), ('word_n', 4), ('trial', 2), ('stim_fr', 'blanc'), ('stim_eng', 'white'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'fruit'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', 'body'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 9), ('word_n', 4), ('trial', 1), ('stim_fr', 'Inde'), ('stim_eng', 'India'), ('animal', None), ('color', None), ('country', 'India'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 9), ('word_n', 4), ('trial', 2), ('stim_fr', 'mère'), ('stim_eng', 'mother'), ('animal', None), ('color', None), ('country', 'India'), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 10), ('word_n', 4), ('trial', 1), ('stim_fr', 'jaune'), ('stim_eng', 'yellow'), ('animal', None), ('color', 'yellow'), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 10), ('word_n', 4), ('trial', 2), ('stim_fr', 'pied'), ('stim_eng', 'foot'), ('animal', None), ('color', 'yellow'), ('country', None), ('fruit', None), ('body', 'foot'), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 11), ('word_n', 5), ('trial', 11), ('stim_fr', 'melon'), ('stim_eng', 'melon'), ('animal', None), ('color', 'purple'), ('country', 'China'), ('fruit', 'melon'), ('body', None), ('family', 'uncle'), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 11), ('word_n', 5), ('trial', 12), ('stim_fr', 'pomme'), ('stim_eng', 'apple'), ('animal', None), ('color', 'purple'), ('country', 'China'), ('fruit', 'apple'), ('body', None), ('family', 'uncle'), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 12), ('word_n', 5), ('trial', 1), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', 'leg'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 12), ('word_n', 5), ('trial', 12), ('stim_fr', 'cheval'), ('stim_eng', 'horse'), ('animal', 'horse'), ('color', None), ('country', 'Japan'), ('fruit', None), ('body', 'arm'), ('family', 'mother'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="keep_track_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="practiceTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ISI"/>
    <Routine name="stimulus"/>
    <LoopTerminator name="practiceTrials"/>
    <Routine name="response"/>
    <LoopTerminator name="practiceblocks"/>
    <Routine name="startTask"/>
    <LoopInitiator loopType="TrialHandler" name="testblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('word_n', 2), ('trial', 1), ('stim_fr', 'ours'), ('stim_eng', 'bear'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('word_n', 2), ('trial', 2), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('word_n', 3), ('trial', 1), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('word_n', 3), ('trial', 2), ('stim_fr', 'Chine'), ('stim_eng', 'China'), ('animal', None), ('color', None), ('country', 'China'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 1), ('stim_fr', 'rouge'), ('stim_eng', 'red'), ('animal', None), ('color', 'red'), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 2), ('stim_fr', 'Japon'), ('stim_eng', 'Japan'), ('animal', None), ('color', 'red'), ('country', 'Japan'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 12), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', None), ('color', 'green'), ('country', 'Brazil'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('word_n', 2), ('trial', 1), ('stim_fr', 'poire'), ('stim_eng', 'pear'), ('animal', None), ('color', None), ('country', None), ('fruit', 'pear'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('word_n', 2), ('trial', 2), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', None), ('color', None), ('country', None), ('fruit', 'strawberry'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 1), ('stim_fr', 'chien'), ('stim_eng', 'dog'), ('animal', 'dog'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 2), ('stim_fr', 'pied'), ('stim_eng', 'foot'), ('animal', 'dog'), ('color', None), ('country', None), ('fruit', None), ('body', 'foot'), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 11), ('stim_fr', 'Australie'), ('stim_eng', 'Australia'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', 'brother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 12), ('stim_fr', 'abricot'), ('stim_eng', 'apricot'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', 'brother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 4), ('word_n', 3), ('trial', 1), ('stim_fr', 'abricot'), ('stim_eng', 'apricot'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apricot'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 4), ('word_n', 3), ('trial', 2), ('stim_fr', 'main'), ('stim_eng', 'hand'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apricot'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 1), ('stim_fr', 'coude'), ('stim_eng', 'elbow'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 2), ('stim_fr', 'poire'), ('stim_eng', 'pear'), ('animal', None), ('color', None), ('country', None), ('fruit', 'pear'), ('body', 'elbow'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 11), ('stim_fr', 'pomme'), ('stim_eng', 'apple'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apple'), ('body', 'arm'), ('family', 'father'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 12), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apple'), ('body', 'leg'), ('family', 'father'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 6), ('word_n', 3), ('trial', 1), ('stim_fr', 'Japon'), ('stim_eng', 'Japan'), ('animal', None), ('color', None), ('country', 'Japan'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'color'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 6), ('word_n', 3), ('trial', 12), ('stim_fr', 'Chine'), ('stim_eng', 'China'), ('animal', 'bear'), ('color', 'white'), ('country', 'China'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'color'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 7), ('word_n', 4), ('trial', 1), ('stim_fr', 'tante'), ('stim_eng', 'aunt'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'aunt'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 7), ('word_n', 4), ('trial', 2), ('stim_fr', 'bleu'), ('stim_eng', 'blue'), ('animal', None), ('color', 'blue'), ('country', None), ('fruit', None), ('body', None), ('family', 'aunt'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 8), ('word_n', 4), ('trial', 1), ('stim_fr', 'mère'), ('stim_eng', 'mother'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'fruit'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', 'body'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 8), ('word_n', 4), ('trial', 2), ('stim_fr', 'blanc'), ('stim_eng', 'white'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'fruit'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', 'body'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 9), ('word_n', 4), ('trial', 1), ('stim_fr', 'Inde'), ('stim_eng', 'India'), ('animal', None), ('color', None), ('country', 'India'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 9), ('word_n', 4), ('trial', 2), ('stim_fr', 'mère'), ('stim_eng', 'mother'), ('animal', None), ('color', None), ('country', 'India'), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 10), ('word_n', 4), ('trial', 1), ('stim_fr', 'jaune'), ('stim_eng', 'yellow'), ('animal', None), ('color', 'yellow'), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 10), ('word_n', 4), ('trial', 2), ('stim_fr', 'pied'), ('stim_eng', 'foot'), ('animal', None), ('color', 'yellow'), ('country', None), ('fruit', None), ('body', 'foot'), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 11), ('word_n', 5), ('trial', 11), ('stim_fr', 'melon'), ('stim_eng', 'melon'), ('animal', None), ('color', 'purple'), ('country', 'China'), ('fruit', 'melon'), ('body', None), ('family', 'uncle'), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 11), ('word_n', 5), ('trial', 12), ('stim_fr', 'pomme'), ('stim_eng', 'apple'), ('animal', None), ('color', 'purple'), ('country', 'China'), ('fruit', 'apple'), ('body', None), ('family', 'uncle'), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 12), ('word_n', 5), ('trial', 1), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', 'leg'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 12), ('word_n', 5), ('trial', 12), ('stim_fr', 'cheval'), ('stim_eng', 'horse'), ('animal', 'horse'), ('color', None), ('country', 'Japan'), ('fruit', None), ('body', 'arm'), ('family', 'mother'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="keep_track_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="testblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter"/>
    <Routine name="instructions_test"/>
    <LoopInitiator loopType="TrialHandler" name="testTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('word_n', 2), ('trial', 1), ('stim_fr', 'ours'), ('stim_eng', 'bear'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('word_n', 2), ('trial', 2), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('word_n', 3), ('trial', 1), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('word_n', 3), ('trial', 2), ('stim_fr', 'Chine'), ('stim_eng', 'China'), ('animal', None), ('color', None), ('country', 'China'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 1), ('stim_fr', 'rouge'), ('stim_eng', 'red'), ('animal', None), ('color', 'red'), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 2), ('stim_fr', 'Japon'), ('stim_eng', 'Japan'), ('animal', None), ('color', 'red'), ('country', 'Japan'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 1), ('word_n', 2), ('trial', 12), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', None), ('color', 'green'), ('country', 'Brazil'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('word_n', 2), ('trial', 1), ('stim_fr', 'poire'), ('stim_eng', 'pear'), ('animal', None), ('color', None), ('country', None), ('fruit', 'pear'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('word_n', 2), ('trial', 2), ('stim_fr', 'fraise'), ('stim_eng', 'strawberry'), ('animal', None), ('color', None), ('country', None), ('fruit', 'strawberry'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', None), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 1), ('stim_fr', 'chien'), ('stim_eng', 'dog'), ('animal', 'dog'), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 2), ('stim_fr', 'pied'), ('stim_eng', 'foot'), ('animal', 'dog'), ('color', None), ('country', None), ('fruit', None), ('body', 'foot'), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 11), ('stim_fr', 'Australie'), ('stim_eng', 'Australia'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', 'brother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 3), ('word_n', 3), ('trial', 12), ('stim_fr', 'abricot'), ('stim_eng', 'apricot'), ('animal', 'bear'), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', 'brother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 4), ('word_n', 3), ('trial', 1), ('stim_fr', 'abricot'), ('stim_eng', 'apricot'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apricot'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 4), ('word_n', 3), ('trial', 2), ('stim_fr', 'main'), ('stim_eng', 'hand'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apricot'), ('body', None), ('family', None), ('cat_to_memorize1', 'country'), ('cat_to_memorize2', 'fruit'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 1), ('stim_fr', 'coude'), ('stim_eng', 'elbow'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', 'elbow'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 2), ('stim_fr', 'poire'), ('stim_eng', 'pear'), ('animal', None), ('color', None), ('country', None), ('fruit', 'pear'), ('body', 'elbow'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 11), ('stim_fr', 'pomme'), ('stim_eng', 'apple'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apple'), ('body', 'arm'), ('family', 'father'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 5), ('word_n', 3), ('trial', 12), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', 'apple'), ('body', 'leg'), ('family', 'father'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 6), ('word_n', 3), ('trial', 1), ('stim_fr', 'Japon'), ('stim_eng', 'Japan'), ('animal', None), ('color', None), ('country', 'Japan'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'color'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 6), ('word_n', 3), ('trial', 12), ('stim_fr', 'Chine'), ('stim_eng', 'China'), ('animal', 'bear'), ('color', 'white'), ('country', 'China'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'color'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', None), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 7), ('word_n', 4), ('trial', 1), ('stim_fr', 'tante'), ('stim_eng', 'aunt'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'aunt'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 7), ('word_n', 4), ('trial', 2), ('stim_fr', 'bleu'), ('stim_eng', 'blue'), ('animal', None), ('color', 'blue'), ('country', None), ('fruit', None), ('body', None), ('family', 'aunt'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 8), ('word_n', 4), ('trial', 1), ('stim_fr', 'mère'), ('stim_eng', 'mother'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'fruit'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', 'body'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 8), ('word_n', 4), ('trial', 2), ('stim_fr', 'blanc'), ('stim_eng', 'white'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'fruit'), ('cat_to_memorize2', 'family'), ('cat_to_memorize3', 'country'), ('cat_to_memorize4', 'body'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 9), ('word_n', 4), ('trial', 1), ('stim_fr', 'Inde'), ('stim_eng', 'India'), ('animal', None), ('color', None), ('country', 'India'), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 9), ('word_n', 4), ('trial', 2), ('stim_fr', 'mère'), ('stim_eng', 'mother'), ('animal', None), ('color', None), ('country', 'India'), ('fruit', None), ('body', None), ('family', 'mother'), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'country'), ('cat_to_memorize3', 'animal'), ('cat_to_memorize4', 'fruit'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 10), ('word_n', 4), ('trial', 1), ('stim_fr', 'jaune'), ('stim_eng', 'yellow'), ('animal', None), ('color', 'yellow'), ('country', None), ('fruit', None), ('body', None), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 10), ('word_n', 4), ('trial', 2), ('stim_fr', 'pied'), ('stim_eng', 'foot'), ('animal', None), ('color', 'yellow'), ('country', None), ('fruit', None), ('body', 'foot'), ('family', None), ('cat_to_memorize1', 'family'), ('cat_to_memorize2', 'body'), ('cat_to_memorize3', 'color'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', None)]), OrderedDict([('block', 'test'), ('block_n', 11), ('word_n', 5), ('trial', 11), ('stim_fr', 'melon'), ('stim_eng', 'melon'), ('animal', None), ('color', 'purple'), ('country', 'China'), ('fruit', 'melon'), ('body', None), ('family', 'uncle'), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 11), ('word_n', 5), ('trial', 12), ('stim_fr', 'pomme'), ('stim_eng', 'apple'), ('animal', None), ('color', 'purple'), ('country', 'China'), ('fruit', 'apple'), ('body', None), ('family', 'uncle'), ('cat_to_memorize1', 'animal'), ('cat_to_memorize2', 'color'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 12), ('word_n', 5), ('trial', 1), ('stim_fr', 'jambe'), ('stim_eng', 'leg'), ('animal', None), ('color', None), ('country', None), ('fruit', None), ('body', 'leg'), ('family', None), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')]), OrderedDict([('block', 'test'), ('block_n', 12), ('word_n', 5), ('trial', 12), ('stim_fr', 'cheval'), ('stim_eng', 'horse'), ('animal', 'horse'), ('color', None), ('country', 'Japan'), ('fruit', None), ('body', 'arm'), ('family', 'mother'), ('cat_to_memorize1', 'body'), ('cat_to_memorize2', 'animal'), ('cat_to_memorize3', 'fruit'), ('cat_to_memorize4', 'country'), ('cat_to_memorize5', 'family')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="keep_track_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="testTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ISI"/>
    <Routine name="stimulus"/>
    <LoopTerminator name="testTrials"/>
    <Routine name="response"/>
    <Routine name="pause"/>
    <LoopTerminator name="testblocks"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>

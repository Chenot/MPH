<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.4">
  <Settings>
    <Param val="1" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="completionURL" valType="str" updates="None" name="Completion URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="False" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="" valType="str" updates="None" name="OSF Project ID"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[-1,-1,-1]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="GoNoGo" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="main">
      <RoutineSettingsComponent name="main" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="main" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="stim" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$stimulus" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="stim" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <KeyboardComponent name="response" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="LSL_stimulus" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="marker = `stimulus_${stimulus}`;&amp;#10;send_marker(marker);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="marker = f&quot;stimulus_{stimulus}&quot;&amp;#10;send_marker(marker)  # Function to send the LSL marker&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="answer_corr = `response_${response.corr}`;&amp;#10;send_marker(answer_corr);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="answer_corr = f&quot;response_{response.corr}&quot;&amp;#10;send_marker(answer_corr)  # Function to send the LSL marker&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions1">
      <RoutineSettingsComponent name="instructions1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText1" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="startInst" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startInst" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText1" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText1.setText(instructions[&quot;Text_instructions&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the first set of instructions&amp;#10;InstructionsText1.setText(instructions['Text_instructions'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText1" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_GoNoGo_start" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;GoNoGo_start&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('GoNoGo_start')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_GoNoGo_start" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;practice&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('practice')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_nametask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="nametask.setText(instructions[&quot;name_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="nametask.setText(instructions['name_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nametask" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="nametask" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nametask" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="startTask">
      <RoutineSettingsComponent name="startTask" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="startTask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText2" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText2.setText(instructions[&quot;Text_start_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the second set of instructions&amp;#10;InstructionsText2.setText(instructions['Text_start_task'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_test_blocks" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_test_blocks" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for test&amp;#10;is_test = True" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_test = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="thanks">
      <RoutineSettingsComponent name="thanks" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="thanks" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText4" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="LSL_GoNoGo_end" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;GoNoGo_end&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('GoNoGo_end')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_GoNoGo_end" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_InstructionsText4" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText4.setText(instructions[&quot;Text_end_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText4.setText(instructions['Text_end_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_end" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_end" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pause">
      <RoutineSettingsComponent name="pause" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="pause" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText3" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText3.text = instructions['Text3']&amp;#10;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText3.setText(instructions[&quot;Text_pause_between_blocks&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText3.setText(instructions['Text_pause_between_blocks'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_block_counter" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Check if the block is test and block_n is to skip the loop&amp;#10;if is_test and block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    testblocks.finished = True  # Skip the loop" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="if ((is_test &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length))) {&amp;#10;    testblocks.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_block_counter" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="init">
      <RoutineSettingsComponent name="init" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="init" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="define_block" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import pandas as pd&amp;#10;import psychopy.logging as logging&amp;#10;&amp;#10;# Set logging level to WARNING to suppress INFO and DEBUG messages&amp;#10;logging.console.setLevel(logging.WARNING)&amp;#10;&amp;#10;# Load the scenario CSV file&amp;#10;scenario_df = pd.read_csv('gonogo_task_scenario.csv')&amp;#10;&amp;#10;# Filter the practice trials&amp;#10;practice_indices = scenario_df.index[scenario_df['block'] == 'practice'].tolist()&amp;#10;# Convert indices to PsychoPy's format (string of ranges)&amp;#10;selected_rows_practice = f&quot;{practice_indices[0]}:{practice_indices[-1]+1}&quot; if practice_indices else &quot;&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as pd from 'pandas';&amp;#10;import * as logging from 'psychopy/logging';&amp;#10;logging.console.setLevel(logging.WARNING);&amp;#10;scenario_df = pd.read_csv(&quot;gonogo_task_scenario.csv&quot;);&amp;#10;practice_indices = scenario_df.index[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)].tolist();&amp;#10;selected_rows_practice = (practice_indices ? `${practice_indices[0]}:${(practice_indices.slice((- 1))[0] + 1)}` : &quot;&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="language" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Define instructions based on the selected language&amp;#10;if language == &quot;English&quot;:&amp;#10;    instructions = {&amp;#10;        'name_task' : 'GoNoGo',&amp;#10;        'Text_instructions': (&amp;#10;            &quot;Welcome to the Go / No-Go Task\n\n&quot;&amp;#10;            &quot;On each trial, a GREEN or a RED square will appear on the screen.\n&quot;&amp;#10;            &quot;If the square is GREEN, press the spacebar (with your dominant hand) as QUICKLY as possible.\n&quot;&amp;#10;            &quot;If the square is RED, do NOT press the spacebar.\n\n&quot;&amp;#10;            &quot;Press the space bar to start the practice.&quot;&amp;#10;        ),&amp;#10;        'Text_start_task': (&amp;#10;            &quot;The practice is over. Now we shall begin the actual experiment.\nThis will consist of 4 blocks of 1 minute.\n\n&quot;&amp;#10;            &quot;Ready?\n\n&quot;&amp;#10;            &quot;Press the space bar to begin.&quot;&amp;#10;        ),&amp;#10;        'Text_pause_between_blocks': (&amp;#10;            &quot;Pause\n\n&quot;&amp;#10;            &quot;Press the space bar when you are ready to continue.&quot;&amp;#10;        ),&amp;#10;        'Text_end_task': (&amp;#10;            &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue.&quot;&amp;#10;        )&amp;#10;    }&amp;#10;&amp;#10;else:  # Default to French if any issues&amp;#10;    instructions = {&amp;#10;        'name_task' : 'GoNoGo',&amp;#10;        'Text_instructions': (&amp;#10;            &quot;Bienvenue dans la tâche de Go / No-Go\n\n&quot;&amp;#10;            &quot;À chaque essai, un rectangle VERT ou ROUGE apparaîtra à l'écran.\n&quot;&amp;#10;            &quot;Si le rectangle est VERT, appuyez sur la barre d'espace (avec votre main dominante) le plus RAPIDEMENT possible.\n&quot;&amp;#10;            &quot;Si le rectangle est ROUGE, n'appuyez PAS sur la barre d'espace.\n\n&quot;&amp;#10;            &quot;Appuyez sur la barre d'espace pour commencer l'entraînement.&quot;&amp;#10;        ),&amp;#10;        'Text_start_task': (&amp;#10;            &quot;L'entraînement est terminé. Nous allons maintenant commencer la tâche.\nCette dernière sera constituée de 4 blocks d'une minute.\n\n&quot;&amp;#10;            &quot;Prêt·e ?\n\n&quot;&amp;#10;            &quot;Appuyez sur la barre d'espace pour commencer.&quot;&amp;#10;        ),&amp;#10;        'Text_pause_between_blocks': (&amp;#10;            &quot;Pause\n\n&quot;&amp;#10;            &quot;Appuyez sur la barre d'espace lorsque vous êtes prêt·e à continuer.&quot;&amp;#10;        ),&amp;#10;        'Text_end_task': (&amp;#10;            &quot;Cette tâche est maintenant terminée.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;&amp;#10;        )&amp;#10;    }&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;GoNoGo&quot;, &quot;Text_instructions&quot;: &quot;Welcome to the Go / No-Go Task\n\nOn each trial, a GREEN or a RED square will appear on the screen.\nIf the square is GREEN, press the spacebar (with your dominant hand) as QUICKLY as possible.\nIf the square is RED, do NOT press the spacebar.\n\nPress the space bar to start the practice.&quot;, &quot;Text_start_task&quot;: &quot;The practice is over. Now we shall begin the actual experiment.\nThis will consist of 4 blocks of 1 minute.\n\nReady?\n\nPress the space bar to begin.&quot;, &quot;Text_pause_between_blocks&quot;: &quot;Pause\n\nPress the space bar when you are ready to continue.&quot;, &quot;Text_end_task&quot;: &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue.&quot;};&amp;#10;} else {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;GoNoGo&quot;, &quot;Text_instructions&quot;: &quot;Bienvenue dans la t\u00e2che de Go / No-Go\n\n\u00c0 chaque essai, un rectangle VERT ou ROUGE appara\u00eetra \u00e0 l'\u00e9cran.\nSi le rectangle est VERT, appuyez sur la barre d'espace (avec votre main dominante) le plus RAPIDEMENT possible.\nSi le rectangle est ROUGE, n'appuyez PAS sur la barre d'espace.\n\nAppuyez sur la barre d'espace pour commencer l'entra\u00eenement.&quot;, &quot;Text_start_task&quot;: &quot;L'entra\u00eenement est termin\u00e9. Nous allons maintenant commencer la t\u00e2che.\nCette derni\u00e8re sera constitu\u00e9e de 4 blocks d'une minute.\n\nPr\u00eat\u00b7e ?\n\nAppuyez sur la barre d'espace pour commencer.&quot;, &quot;Text_pause_between_blocks&quot;: &quot;Pause\n\nAppuyez sur la barre d'espace lorsque vous \u00eates pr\u00eat\u00b7e \u00e0 continuer.&quot;, &quot;Text_end_task&quot;: &quot;Cette t\u00e2che est maintenant termin\u00e9e.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;};&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="language" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import socket&amp;#10;import json&amp;#10;import threading&amp;#10;from pylsl import local_clock&amp;#10;&amp;#10;# Function to send markers to the LSL server&amp;#10;def send_marker(marker):&amp;#10;    event = {&amp;#10;        'marker': marker,&amp;#10;        'timestamp': local_clock()&amp;#10;    }&amp;#10;    message = json.dumps(event)&amp;#10;    &amp;#10;    def send():&amp;#10;        try:&amp;#10;            # Connect to the socket server and send the marker with a timeout&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&amp;#10;            client_socket.settimeout(0.1)  # Set timeout to 100 milliseconds&amp;#10;            client_socket.connect(('localhost', 5000))&amp;#10;            client_socket.sendall(message.encode('utf-8'))&amp;#10;            client_socket.close()&amp;#10;        except (ConnectionRefusedError, socket.timeout):&amp;#10;            print(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;)&amp;#10;    &amp;#10;    # Create and start a thread to send the marker&amp;#10;    send_thread = threading.Thread(target=send)&amp;#10;    send_thread.start()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as socket from 'socket';&amp;#10;import * as json from 'json';&amp;#10;import * as threading from 'threading';&amp;#10;import {local_clock} from 'pylsl';&amp;#10;function send_marker(marker) {&amp;#10;    var event, message, send_thread;&amp;#10;    event = {&quot;marker&quot;: marker, &quot;timestamp&quot;: local_clock()};&amp;#10;    message = json.dumps(psychoJS.eventManager);&amp;#10;    function send() {&amp;#10;        var client_socket;&amp;#10;        try {&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM);&amp;#10;            client_socket.settimeout(0.1);&amp;#10;            client_socket.connect([&quot;localhost&quot;, 5000]);&amp;#10;            client_socket.sendall(message.encode(&quot;utf-8&quot;));&amp;#10;            client_socket.close();&amp;#10;        } catch(e) {&amp;#10;            if (((e instanceof ConnectionRefusedError) || (e instanceof socket.timeout))) {&amp;#10;                console.log(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;);&amp;#10;            } else {&amp;#10;                throw e;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    send_thread = new threading.Thread({&quot;target&quot;: send});&amp;#10;    send_thread.start();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="ActivateWindow" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="win.winHandle.activate()  # Ensure the PsychoPy window is the primary window&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="psychoJS.window.winHandle.activate();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ActivateWindow" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="DeactivateMouse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="event.Mouse(visible=False)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: false});&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="DeactivateMouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="QuitTask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy import core, event&amp;#10;&amp;#10;# Add a global shutdown key: Ctrl + Q to quit the experiment&amp;#10;event.globalKeys.add(key='q', modifiers=['ctrl'], func=core.quit)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {core, event} from 'psychopy';&amp;#10;psychoJS.eventManager.globalKeys.add({&quot;key&quot;: &quot;q&quot;, &quot;modifiers&quot;: [&quot;ctrl&quot;], &quot;func&quot;: core.quit});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="QuitTask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter">
      <RoutineSettingsComponent name="block_counter" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;if ((block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length)) {&amp;#10;    testblocks.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    block_n = block_index;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1&amp;#10;&amp;#10;# Determine the current block type and number&amp;#10;# block_type = 'test'&amp;#10;if block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    # Skip the remaining test blocks&amp;#10;    testblocks.finished = True&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    block_n = block_index  # block_n in CSV starts from 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_testblock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_testblock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="prestim">
      <RoutineSettingsComponent name="prestim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="prestim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="polygon" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon" valType="code" updates="None" name="name"/>
        <Param val="0" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="triangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="$ISI_60Hz" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="cue_SOA">
      <RoutineSettingsComponent name="cue_SOA" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="cue_SOA" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="cue_prestim" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="ressources/prestim.png" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="cue_prestim" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$cue_prestim_size" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="$soa_frame60hz" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="LSL_cue" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;cue&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker(&quot;cue&quot;)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_cue" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="init"/>
    <Routine name="instructions1"/>
    <LoopInitiator loopType="TrialHandler" name="practiceTrials">
      <Param name="Selected rows" updates="None" val="$selected_rows_practice" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 1), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 2), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 3), ('stimulus', 'resources/nogo.png'), ('correct_resp', None)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('trial', 4), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 1), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 2), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 3), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 4), ('stimulus', 'resources/nogo.png'), ('correct_resp', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 1), ('stimulus', 'resources/nogo.png'), ('correct_resp', None)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 2), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 3), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 4), ('stimulus', 'resources/go.png'), ('correct_resp', 'space')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="gonogo_task_scenario.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practiceTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prestim"/>
    <Routine name="main"/>
    <LoopTerminator name="practiceTrials"/>
    <Routine name="startTask"/>
    <LoopInitiator loopType="TrialHandler" name="testblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 1), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 2), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 3), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 4), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 5), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 6), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 7), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 8), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 9), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 10), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 1), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 2), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 3), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 4), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 5), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 6), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 7), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 8), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 9), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 10), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 11), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_nogo.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 12), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 13), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 14), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 15), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 16), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 17), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 18), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 19), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 20), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 1), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 2), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 3), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 4), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 5), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 6), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 7), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 8), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 9), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 10), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 11), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 12), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 13), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 14), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 15), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 16), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 17), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 18), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 19), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 20), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="gonogo_task_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="testblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter"/>
    <LoopInitiator loopType="TrialHandler" name="testTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 1), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 2), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 3), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 4), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 5), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 6), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 7), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 8), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 9), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'practice'), ('block_n', 0), ('trial', 10), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 1), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 2), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 3), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 4), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 5), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 6), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 7), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 8), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 9), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 10), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 11), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_nogo.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 12), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 13), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 14), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 15), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 16), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 17), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 18), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 19), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 1), ('trial', 20), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 1), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 2), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 3), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 4), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 5), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 6), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 7), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 8), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 9), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 10), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 11), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 12), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 13), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 14), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 15), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_go.png'), ('soa_sec', 0.4), ('soa_frame60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 16), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 17), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.2), ('soa_frame60hz', 12)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 18), ('cue', 'ressources/horizontal_rectangle.png'), ('stimulus', 'ressources/horizontal_rectangle_nogo.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 19), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.1), ('soa_frame60hz', 6)]), OrderedDict([('block', 'test'), ('block_n', 2), ('trial', 20), ('cue', 'ressources/vertical_rectangle.png'), ('stimulus', 'ressources/vertical_rectangle_go.png'), ('soa_sec', 0.3), ('soa_frame60hz', 18)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="gonogo_task_scenario.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="testTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prestim"/>
    <Routine name="main"/>
    <LoopTerminator name="testTrials"/>
    <Routine name="pause"/>
    <LoopTerminator name="testblocks"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>

<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.4">
  <Settings>
    <Param val="1" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="completionURL" valType="str" updates="None" name="Completion URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="False" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="" valType="str" updates="None" name="OSF Project ID"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[-1,-1,-1]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="ColorShape" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="startTask">
      <RoutineSettingsComponent name="startTask" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="startTask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_start_task" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_start_task" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="start_Task" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="start_Task" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsStartTask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_start_task.text = instructions[&quot;Start_Actual_Task&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_start_task.text = instructions['Start_Actual_Task']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsStartTask" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_task" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;block&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_task" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_test = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for test&amp;#10;is_test = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="thanks">
      <RoutineSettingsComponent name="thanks" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="thanks" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText4" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="LSL_ColorShape_end" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;ColorShape_end&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('ColorShape_end')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_ColorShape_end" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_InstructionThanks" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText4.setText(instructions['text_end_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="InstructionsText4.setText(instructions[&quot;text_end_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionThanks" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_end" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_end" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pause">
      <RoutineSettingsComponent name="pause" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="pause" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_pause" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_pause" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="Unpause" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Unpause" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsPause" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_pause.text = instructions[&quot;Pause&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_pause.text = instructions['Pause']&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsPause" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_block_counter" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((is_test &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length))) {&amp;#10;    testblocks.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if the block is test and block_n is to skip the loop&amp;#10;if is_test and block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    testblocks.finished = True  # Skip the loop" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_block_counter" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="init">
      <RoutineSettingsComponent name="init" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="init" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="define_block" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import pandas as pd&amp;#10;&amp;#10;# Load the scenario file&amp;#10;scenario_df = pd.read_csv('color_shape_task_scenario.csv')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as pd from 'pandas';&amp;#10;scenario_df = pd.read_csv(&quot;color_shape_task_scenario.csv&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="language" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Define instructions based on the selected language&amp;#10;if language == &quot;English&quot;:&amp;#10;    instructions = {&amp;#10;        'name_task' : 'COLOR-SHAPE',&amp;#10;        'Introduction': &quot;Welcome to the 'COLOR-SHAPE' task.\n\nIn this task, you will see one of four stimuli (green circle, green triangle, red circle, red triangle), appearing one at a time.\n\nSometimes you will be asked to respond to the COLOR; at other times, you will be asked to respond to the SHAPE of the stimulus.&quot;,&amp;#10;        'Practice_Color_Only': &quot;If you see a 'C' on the screen, you will be asked to respond to the COLOR of the stimulus that appears.\n\nIf it is GREEN, press the 'd' key.\nIf it is RED, press the 'k' key.\n\nPress the space bar to begin the practice session for color only.&quot;,&amp;#10;        'Practice_Shape_Only': &quot;If you see a 'S' on the screen, you will be asked to respond to the SHAPE of the stimulus that appears.\n\nIf it is a CIRCLE, press the 'd' key.\nIf it is a TRIANGLE, press the 'k' key.\n\nPress the space bar to begin the practice session for shape only.&quot;,&amp;#10;        'Practice_Both': &quot;You will now practice responding to both SHAPE and COLOR.\n\nPay attention to the cues and respond to the objects as quickly as possible without making too many errors.\n\nPress the space bar to begin the practice session.&quot;,&amp;#10;        'Start_Actual_Task': &quot;The training is over. Let's start the real task.\n\nThe actual task consists of 4 rounds. Each round lasts about 2 minutes.\n\nPress the space bar to start.&quot;,&amp;#10;        'Pause': &quot;Pause\n\nPress the space bar when you are ready to continue&quot;,&amp;#10;        'text_end_task': &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;&amp;#10;    }&amp;#10;else:  # Default to French if any issues&amp;#10;    instructions = {&amp;#10;        'name_task' : 'COLOR-SHAPE',&amp;#10;        'Introduction': &quot;Bienvenue dans la tâche 'COLOR-SHAPE'.\n\nDans cette tâche, vous verrez un stimulus parmi quatre (cercle vert, triangle vert, cercle rouge, triangle rouge), apparaissant un à la fois.\n\nParfois, on vous demandera de répondre selon la COULEUR; à d'autres moments, on vous demandera de répondre selon la FORME du stimulus.&quot;,&amp;#10;        'Practice_Color_Only': &quot;Si vous voyez un 'C' à l'écran, il vous sera demandé de répondre à la COULEUR du stimulus qui apparaîtra.\n\nSi l'objet est VERT, appuyez sur la touche 'd'.\nSi l'objet est ROUGE, appuyez sur la touche 'k'.\n\nAppuyez sur la barre d'espace pour commencer la session d'entraînement pour la couleur uniquement.&quot;,&amp;#10;        'Practice_Shape_Only': &quot;Si vous voyez un 'F' à l'écran, il vous sera demandé de répondre à la FORME du stimulus qui apparaîtra.\n\nSi l'objet est un CERCLE, appuyez sur la touche 'd'.\nSi l'objet est un TRIANGLE, appuyez sur la touche 'k'.\n\nAppuyez sur la barre d'espace pour commencer la session d'entraînement pour la forme uniquement.&quot;,&amp;#10;        'Practice_Both': &quot;Vous allez maintenant vous entraîner à répondre à la fois à la FORME et à la COULEUR.\n\nFaites attention aux indices et répondez aux stimuli aussi vite que possible sans faire trop d'erreurs.\n\nAppuyez sur la barre d'espace pour commencer la session d'entraînement.&quot;,&amp;#10;        'Start_Actual_Task': &quot;L'entrainement est terminé. Passons maintenant à la vraie tâche.\n\nCette dernière se composera de 4 tours. Chaque tour durera environ 2 minutes.\n\nAppuyez sur la barre d'espace pour commencer.&quot;,&amp;#10;        'Pause': &quot;Pause\n\nAppuyez sur la barre d'espace lorsque vous êtes prêt·e à continuer&quot;,&amp;#10;        'text_end_task': &quot;Cette tâche est maintenant terminée.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;&amp;#10;    }&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;COLOR-SHAPE&quot;, &quot;Introduction&quot;: &quot;Welcome to the 'COLOR-SHAPE' task.\n\nIn this task, you will see one of four stimuli (green circle, green triangle, red circle, red triangle), appearing one at a time.\n\nSometimes you will be asked to respond to the COLOR; at other times, you will be asked to respond to the SHAPE of the stimulus.&quot;, &quot;Practice_Color_Only&quot;: &quot;If you see a 'C' on the screen, you will be asked to respond to the COLOR of the stimulus that appears.\n\nIf it is GREEN, press the 'd' key.\nIf it is RED, press the 'k' key.\n\nPress the space bar to begin the practice session for color only.&quot;, &quot;Practice_Shape_Only&quot;: &quot;If you see a 'S' on the screen, you will be asked to respond to the SHAPE of the stimulus that appears.\n\nIf it is a CIRCLE, press the 'd' key.\nIf it is a TRIANGLE, press the 'k' key.\n\nPress the space bar to begin the practice session for shape only.&quot;, &quot;Practice_Both&quot;: &quot;You will now practice responding to both SHAPE and COLOR.\n\nPay attention to the cues and respond to the objects as quickly as possible without making too many errors.\n\nPress the space bar to begin the practice session.&quot;, &quot;Start_Actual_Task&quot;: &quot;The training is over. Let's start the real task.\n\nThe actual task consists of 4 rounds. Each round lasts about 2 minutes.\n\nPress the space bar to start.&quot;, &quot;Pause&quot;: &quot;Pause\n\nPress the space bar when you are ready to continue&quot;, &quot;text_end_task&quot;: &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;};&amp;#10;} else {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;COLOR-SHAPE&quot;, &quot;Introduction&quot;: &quot;Bienvenue dans la t\u00e2che 'COLOR-SHAPE'.\n\nDans cette t\u00e2che, vous verrez un stimulus parmi quatre (cercle vert, triangle vert, cercle rouge, triangle rouge), apparaissant un \u00e0 la fois.\n\nParfois, on vous demandera de r\u00e9pondre selon la COULEUR; \u00e0 d'autres moments, on vous demandera de r\u00e9pondre selon la FORME du stimulus.&quot;, &quot;Practice_Color_Only&quot;: &quot;Si vous voyez un 'C' \u00e0 l'\u00e9cran, il vous sera demand\u00e9 de r\u00e9pondre \u00e0 la COULEUR du stimulus qui appara\u00eetra.\n\nSi l'objet est VERT, appuyez sur la touche 'd'.\nSi l'objet est ROUGE, appuyez sur la touche 'k'.\n\nAppuyez sur la barre d'espace pour commencer la session d'entra\u00eenement pour la couleur uniquement.&quot;, &quot;Practice_Shape_Only&quot;: &quot;Si vous voyez un 'F' \u00e0 l'\u00e9cran, il vous sera demand\u00e9 de r\u00e9pondre \u00e0 la FORME du stimulus qui appara\u00eetra.\n\nSi l'objet est un CERCLE, appuyez sur la touche 'd'.\nSi l'objet est un TRIANGLE, appuyez sur la touche 'k'.\n\nAppuyez sur la barre d'espace pour commencer la session d'entra\u00eenement pour la forme uniquement.&quot;, &quot;Practice_Both&quot;: &quot;Vous allez maintenant vous entra\u00eener \u00e0 r\u00e9pondre \u00e0 la fois \u00e0 la FORME et \u00e0 la COULEUR.\n\nFaites attention aux indices et r\u00e9pondez aux stimuli aussi vite que possible sans faire trop d'erreurs.\n\nAppuyez sur la barre d'espace pour commencer la session d'entra\u00eenement.&quot;, &quot;Start_Actual_Task&quot;: &quot;L'entrainement est termin\u00e9. Passons maintenant \u00e0 la vraie t\u00e2che.\n\nCette derni\u00e8re se composera de 4 tours. Chaque tour durera environ 2 minutes.\n\nAppuyez sur la barre d'espace pour commencer.&quot;, &quot;Pause&quot;: &quot;Pause\n\nAppuyez sur la barre d'espace lorsque vous \u00eates pr\u00eat\u00b7e \u00e0 continuer&quot;, &quot;text_end_task&quot;: &quot;Cette t\u00e2che est maintenant termin\u00e9e.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;};&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="language" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import socket&amp;#10;import json&amp;#10;import threading&amp;#10;from pylsl import local_clock&amp;#10;&amp;#10;# Function to send markers to the LSL server&amp;#10;def send_marker(marker):&amp;#10;    event = {&amp;#10;        'marker': marker,&amp;#10;        'timestamp': local_clock()&amp;#10;    }&amp;#10;    message = json.dumps(event)&amp;#10;    &amp;#10;    def send():&amp;#10;        try:&amp;#10;            # Connect to the socket server and send the marker with a timeout&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&amp;#10;            client_socket.settimeout(0.1)  # Set timeout to 100 milliseconds&amp;#10;            client_socket.connect(('localhost', 5000))&amp;#10;            client_socket.sendall(message.encode('utf-8'))&amp;#10;            client_socket.close()&amp;#10;        except (ConnectionRefusedError, socket.timeout):&amp;#10;            print(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;)&amp;#10;    &amp;#10;    # Create and start a thread to send the marker&amp;#10;    send_thread = threading.Thread(target=send)&amp;#10;    send_thread.start()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as socket from 'socket';&amp;#10;import * as json from 'json';&amp;#10;import * as threading from 'threading';&amp;#10;import {local_clock} from 'pylsl';&amp;#10;function send_marker(marker) {&amp;#10;    var event, message, send_thread;&amp;#10;    event = {&quot;marker&quot;: marker, &quot;timestamp&quot;: local_clock()};&amp;#10;    message = json.dumps(psychoJS.eventManager);&amp;#10;    function send() {&amp;#10;        var client_socket;&amp;#10;        try {&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM);&amp;#10;            client_socket.settimeout(0.1);&amp;#10;            client_socket.connect([&quot;localhost&quot;, 5000]);&amp;#10;            client_socket.sendall(message.encode(&quot;utf-8&quot;));&amp;#10;            client_socket.close();&amp;#10;        } catch(e) {&amp;#10;            if (((e instanceof ConnectionRefusedError) || (e instanceof socket.timeout))) {&amp;#10;                console.log(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;);&amp;#10;            } else {&amp;#10;                throw e;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    send_thread = new threading.Thread({&quot;target&quot;: send});&amp;#10;    send_thread.start();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="ActivateWindow" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="win.winHandle.activate()  # Ensure the PsychoPy window is the primary window&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="psychoJS.window.winHandle.activate();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ActivateWindow" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="DeactivateMouse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="event.Mouse(visible=False)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: false});&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="DeactivateMouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="QuitTask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy import core, event&amp;#10;&amp;#10;# Add a global shutdown key: Ctrl + Q to quit the experiment&amp;#10;event.globalKeys.add(key='q', modifiers=['ctrl'], func=core.quit)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {core, event} from 'psychopy';&amp;#10;psychoJS.eventManager.globalKeys.add({&quot;key&quot;: &quot;q&quot;, &quot;modifiers&quot;: [&quot;ctrl&quot;], &quot;func&quot;: core.quit});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="QuitTask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_color">
      <RoutineSettingsComponent name="instructions_color" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_color" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_practice_color" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_practice_color" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="startColor" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startColor" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsColor" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_practice_color.text = instructions[&quot;Practice_Color_Only&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_practice_color.text = instructions['Practice_Color_Only']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsColor" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_practice_C" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;practice_C&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('practice_C')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practice_C" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_shape">
      <RoutineSettingsComponent name="instructions_shape" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_shape" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_practice_shape" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_practice_shape" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="test" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="startShape" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startShape" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsShape" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_practice_shape.text = instructions[&quot;Practice_Shape_Only&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_practice_shape.text = instructions['Practice_Shape_Only']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsShape" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_practice_S" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;practice_S&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('practice_S')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practice_S" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_both">
      <RoutineSettingsComponent name="instructions_both" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_both" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_practice_both" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_practice_both" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="startBoth" plugin="None">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startBoth" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsBoth" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_practice_both.text = instructions[&quot;Practice_Both&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_practice_both.text = instructions['Practice_Both']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsBoth" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_practice_both" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;practice_CS&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('practice_CS')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practice_both" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback">
      <RoutineSettingsComponent name="feedback" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="feedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="set_feedback" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((! response_practice.corr)) {&amp;#10;    feedback_message = &quot;X&quot;;&amp;#10;    feedback_text.color = &quot;red&quot;;&amp;#10;} else {&amp;#10;    feedback_message = &quot;&quot;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if not response_practice.corr:  # Check if the response is incorrect&amp;#10;    feedback_message = 'X'  # Set the feedback message to a red cross&amp;#10;    feedback_text.color = 'red'  # Set the color to red&amp;#10;else:&amp;#10;    feedback_message = ''  # No feedback if correct&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_feedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="feedback_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.20" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$feedback_message" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instruction_d_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_d_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.4, -0.3)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instruction_k_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_k_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.4, -0.3)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_instruction_text_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="current_block_type = scenario_df[((scenario_df[&quot;block&quot;] === &quot;practice&quot;) &amp; (scenario_df[&quot;block_n&quot;] === block_index))][&quot;block_type&quot;].values[0];&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    if ((current_block_type === &quot;color&quot;)) {&amp;#10;        instruction_d_2.text = &quot;d\ngreen&quot;;&amp;#10;        instruction_k_2.text = &quot;k\nred&quot;;&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;shape&quot;)) {&amp;#10;            instruction_d_2.text = &quot;d\ncircle&quot;;&amp;#10;            instruction_k_2.text = &quot;k\ntriangle&quot;;&amp;#10;        } else {&amp;#10;            if ((current_block_type === &quot;both&quot;)) {&amp;#10;                instruction_d_2.text = &quot;d\ngreen\ncircle&quot;;&amp;#10;                instruction_k_2.text = &quot;k\nred\ntriangle&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((current_block_type === &quot;color&quot;)) {&amp;#10;        instruction_d_2.text = &quot;d\nvert&quot;;&amp;#10;        instruction_k_2.text = &quot;k\nrouge&quot;;&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;shape&quot;)) {&amp;#10;            instruction_d_2.text = &quot;d\ncercle&quot;;&amp;#10;            instruction_k_2.text = &quot;k\ntriangle&quot;;&amp;#10;        } else {&amp;#10;            if ((current_block_type === &quot;both&quot;)) {&amp;#10;                instruction_d_2.text = &quot;d\nvert\ncercle&quot;;&amp;#10;                instruction_k_2.text = &quot;k\nrouge\ntriangle&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Determine the block type for the current block&amp;#10;current_block_type = scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)]['block_type'].values[0]&amp;#10;&amp;#10;if language == &quot;English&quot;:&amp;#10;    if current_block_type == 'color':&amp;#10;        instruction_d_2.text = 'd\ngreen'&amp;#10;        instruction_k_2.text = 'k\nred'&amp;#10;    elif current_block_type == 'shape':&amp;#10;        instruction_d_2.text = 'd\ncircle'&amp;#10;        instruction_k_2.text = 'k\ntriangle'&amp;#10;    elif current_block_type == 'both':&amp;#10;        instruction_d_2.text = 'd\ngreen\ncircle'&amp;#10;        instruction_k_2.text = 'k\nred\ntriangle'&amp;#10;else:&amp;#10;    if current_block_type == 'color':&amp;#10;        instruction_d_2.text = 'd\nvert'&amp;#10;        instruction_k_2.text = 'k\nrouge'&amp;#10;    elif current_block_type == 'shape':&amp;#10;        instruction_d_2.text = 'd\ncercle'&amp;#10;        instruction_k_2.text = 'k\ntriangle'&amp;#10;    elif current_block_type == 'both':&amp;#10;        instruction_d_2.text = 'd\nvert\ncercle'&amp;#10;        instruction_k_2.text = 'k\nrouge\ntriangle'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_instruction_text_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instruction_global">
      <RoutineSettingsComponent name="instruction_global" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instruction_global" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="instruction_text_component_introduction" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_introduction" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="end_inst" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="end_inst" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_Instructions" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instruction_text_component_introduction.text = instructions[&quot;Introduction&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instruction_text_component_introduction.text = instructions['Introduction']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_Instructions" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_CS_start" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;ColorShape_start&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('ColorShape_start')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_CS_start" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_block_variable" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_practice = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for test&amp;#10;is_practice = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_block_variable" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="nametask" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nametask" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_nametask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="nametask.setText(instructions[&quot;name_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="nametask.setText(instructions['name_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nametask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter">
      <RoutineSettingsComponent name="block_counter" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;if ((block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length)) {&amp;#10;    testblocks.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    block_n = block_index;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1&amp;#10;&amp;#10;# Determine the current block type and number&amp;#10;# block_type = 'test'&amp;#10;if block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    # Skip the remaining test blocks&amp;#10;    testblocks.finished = True&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    block_n = block_index  # block_n in CSV starts from 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_testblock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_testblock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_practice">
      <RoutineSettingsComponent name="instructions_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="LSL_start_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;practice_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker('practice_block')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_InstructionsPractice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="current_block_type = scenario_df[((scenario_df[&quot;block&quot;] === &quot;practice&quot;) &amp; (scenario_df[&quot;block_n&quot;] === block_index))][&quot;block_type&quot;].values[0];&amp;#10;if ((current_block_type === &quot;color&quot;)) {&amp;#10;    text_practice.text = instructions[&quot;Practice_Color_Only&quot;];&amp;#10;} else {&amp;#10;    if ((current_block_type === &quot;shape&quot;)) {&amp;#10;        text_practice.text = instructions[&quot;Practice_Shape_Only&quot;];&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;both&quot;)) {&amp;#10;            text_practice.text = instructions[&quot;Practice_Both&quot;];&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Extract block_type for the current block&amp;#10;current_block_type = scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)]['block_type'].values[0]&amp;#10;&amp;#10;# Set the instruction text based on the block type&amp;#10;if current_block_type == 'color':&amp;#10;    text_practice.text = instructions['Practice_Color_Only']&amp;#10;elif current_block_type == 'shape':&amp;#10;    text_practice.text = instructions['Practice_Shape_Only']&amp;#10;elif current_block_type == 'both':&amp;#10;    text_practice.text = instructions['Practice_Both']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsPractice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="startPractice" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startPractice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="text_practice" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_practice" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="increment_block_practice">
      <RoutineSettingsComponent name="increment_block_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="increment_block_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="check_block_counter_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((is_practice &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)][&quot;block_n&quot;].unique().length))) {&amp;#10;    practiceblocks.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if the block is test and block_n is to skip the loop&amp;#10;if is_practice and block_index &gt;= len(scenario_df[scenario_df['block'] == 'practice']['block_n'].unique()):&amp;#10;    practiceblocks.finished = True  # Skip the loop" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_block_counter_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter_practice">
      <RoutineSettingsComponent name="block_counter_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;if ((block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)][&quot;block_n&quot;].unique().length)) {&amp;#10;    practiceblocks.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    block_n = block_index;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1&amp;#10;&amp;#10;# Determine the current block type and number&amp;#10;# block_type = 'test'&amp;#10;if block_index &gt;= len(scenario_df[scenario_df['block'] == 'practice']['block_n'].unique()):&amp;#10;    # Skip the remaining test blocks&amp;#10;    practiceblocks.finished = True&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    block_n = block_index  # block_n in CSV starts from 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_testblock_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;start_block_practice&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;start_block_practice&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_testblock_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial_practice">
      <RoutineSettingsComponent name="trial_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="trial_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="response_practice" plugin="None">
        <Param val="'d','k'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response_practice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="$iti_60hz+soa_60hz" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="ITI_practice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="ITI_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="$iti_60hz" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instruction_text_component_practice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.10" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="$iti_60hz" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="stimulus_image_practice" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$stimulus" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stimulus_image_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.3, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="$iti_60hz+soa_60hz" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="code_instruction_text" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;current_block_type = scenario_df[((scenario_df[&quot;block&quot;] === &quot;practice&quot;) &amp; (scenario_df[&quot;block_n&quot;] === block_index))][&quot;block_type&quot;].values[0];&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    if ((current_block_type === &quot;color&quot;)) {&amp;#10;        instruction_text_component_practice.text = instruction_eng;&amp;#10;        instruction_d.text = &quot;d\ngreen&quot;;&amp;#10;        instruction_k.text = &quot;k\nred&quot;;&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;shape&quot;)) {&amp;#10;            instruction_text_component_practice.text = instruction_eng;&amp;#10;            instruction_d.text = &quot;d\ncircle&quot;;&amp;#10;            instruction_k.text = &quot;k\ntriangle&quot;;&amp;#10;        } else {&amp;#10;            if ((current_block_type === &quot;both&quot;)) {&amp;#10;                instruction_text_component_practice.text = instruction_eng;&amp;#10;                instruction_d.text = &quot;d\ngreen\ncircle&quot;;&amp;#10;                instruction_k.text = &quot;k\nred\ntriangle&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((current_block_type === &quot;color&quot;)) {&amp;#10;        instruction_text_component_practice.text = instruction_fr;&amp;#10;        instruction_d.text = &quot;d\nvert&quot;;&amp;#10;        instruction_k.text = &quot;k\nrouge&quot;;&amp;#10;    } else {&amp;#10;        if ((current_block_type === &quot;shape&quot;)) {&amp;#10;            instruction_text_component_practice.text = instruction_fr;&amp;#10;            instruction_d.text = &quot;d\ncercle&quot;;&amp;#10;            instruction_k.text = &quot;k\ntriangle&quot;;&amp;#10;        } else {&amp;#10;            if ((current_block_type === &quot;both&quot;)) {&amp;#10;                instruction_text_component_practice.text = instruction_fr;&amp;#10;                instruction_d.text = &quot;d\nvert\ncercle&quot;;&amp;#10;                instruction_k.text = &quot;k\nrouge\ntriangle&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Determine the block type for the current block&amp;#10;current_block_type = scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)]['block_type'].values[0]&amp;#10;&amp;#10;if language == &quot;English&quot;:&amp;#10;    if current_block_type == 'color':&amp;#10;        instruction_text_component_practice.text = instruction_eng&amp;#10;        instruction_d.text = 'd\ngreen'&amp;#10;        instruction_k.text = 'k\nred'&amp;#10;    elif current_block_type == 'shape':&amp;#10;        instruction_text_component_practice.text = instruction_eng&amp;#10;        instruction_d.text = 'd\ncircle'&amp;#10;        instruction_k.text = 'k\ntriangle'&amp;#10;    elif current_block_type == 'both':&amp;#10;        instruction_text_component_practice.text = instruction_eng&amp;#10;        instruction_d.text = 'd\ngreen\ncircle'&amp;#10;        instruction_k.text = 'k\nred\ntriangle'&amp;#10;else:&amp;#10;    if current_block_type == 'color':&amp;#10;        instruction_text_component_practice.text = instruction_fr&amp;#10;        instruction_d.text = 'd\nvert'&amp;#10;        instruction_k.text = 'k\nrouge'&amp;#10;    elif current_block_type == 'shape':&amp;#10;        instruction_text_component_practice.text = instruction_fr&amp;#10;        instruction_d.text = 'd\ncercle'&amp;#10;        instruction_k.text = 'k\ntriangle'&amp;#10;    elif current_block_type == 'both':&amp;#10;        instruction_text_component_practice.text = instruction_fr&amp;#10;        instruction_d.text = 'd\nvert\ncercle'&amp;#10;        instruction_k.text = 'k\nrouge\ntriangle'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_instruction_text" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="instruction_d" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_d" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.4, -0.3)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instruction_k" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_k" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.4, -0.3)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="LSL_stimulus_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Check if the current frame matches the isi_frame60hz value&amp;#10;if frameN == iti_60hz+soa_60hz:&amp;#10;    # Send the marker with the stimulus type&amp;#10;    send_marker(&quot;stimulus_&quot; + instruction + &quot;_&quot; + trial_type + &quot;_&quot; + stimulus)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((frameN === (iti_60hz + soa_60hz))) {&amp;#10;    send_marker((((((&quot;stimulus_&quot; + instruction) + &quot;_&quot;) + trial_type) + &quot;_&quot;) + stimulus));&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="answer_corr = `response_${response_practice.corr}`;&amp;#10;send_marker(answer_corr);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="answer_corr = f&quot;response_{response_practice.corr}&quot;&amp;#10;send_marker(answer_corr)  # Function to send the LSL marker&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial_test">
      <RoutineSettingsComponent name="trial_test" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="trial_test" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="response" plugin="None">
        <Param val="'d','k'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="$correct_resp" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="$iti_60hz+soa_60hz" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="ITI" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="ITI" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="$iti_60hz" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instruction_text_component" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.10" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instruction_text_component" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="$iti_60hz" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="stimulus_image" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$stimulus" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="stimulus_image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.3, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="$iti_60hz+soa_60hz" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    instruction_text_component.text = instruction_eng;&amp;#10;} else {&amp;#10;    instruction_text_component.text = instruction_fr;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Set the instruction text based on the language&amp;#10;if language == &quot;English&quot;:&amp;#10;    instruction_text_component.text = instruction_eng&amp;#10;else:&amp;#10;    instruction_text_component.text = instruction_fr&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_stimulus" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Check if the current frame matches the isi_frame60hz value&amp;#10;if frameN == iti_60hz+soa_60hz:&amp;#10;    # Send the marker with the stimulus type&amp;#10;    send_marker(&quot;stimulus_&quot; + instruction + &quot;_&quot; + trial_type + &quot;_&quot; + stimulus)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((frameN === (iti_60hz + soa_60hz))) {&amp;#10;    send_marker((((((&quot;stimulus_&quot; + instruction) + &quot;_&quot;) + trial_type) + &quot;_&quot;) + stimulus));&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="answer_corr = `response_${response.corr}`;&amp;#10;send_marker(answer_corr);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="answer_corr = f&quot;response_{response.corr}&quot;&amp;#10;send_marker(answer_corr)  # Function to send the LSL marker&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback_test">
      <RoutineSettingsComponent name="feedback_test" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="feedback_test" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="set_feedback_test" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((! response.corr)) {&amp;#10;    feedback_message = &quot;&quot;;&amp;#10;} else {&amp;#10;    feedback_message = &quot;&quot;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if not response.corr:  # Check if the response is incorrect&amp;#10;    feedback_message = ''  # No feedback (test trials)&amp;#10;else:&amp;#10;    feedback_message = ''  # No feedback if correct&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_feedback_test" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="feedback_text_test" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.20" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_text_test" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="30" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$feedback_message" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="init"/>
    <Routine name="instruction_global"/>
    <LoopInitiator loopType="TrialHandler" name="practiceblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.545), ('soa', 0.464), ('iti_60hz', 33), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.615), ('soa', 0.442), ('iti_60hz', 37), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.625), ('soa', 0.448), ('iti_60hz', 38), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.538), ('soa', 0.506), ('iti_60hz', 32), ('soa_60hz', 30)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.643), ('soa', 0.445), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.515), ('soa', 0.465), ('iti_60hz', 31), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.544), ('soa', 0.545), ('iti_60hz', 33), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.63), ('soa', 0.531), ('iti_60hz', 38), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 48), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.537), ('soa', 0.4), ('iti_60hz', 32), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.58), ('soa', 0.495), ('iti_60hz', 35), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 47), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.675), ('soa', 0.512), ('iti_60hz', 40), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 48), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.57), ('soa', 0.539), ('iti_60hz', 34), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.653), ('soa', 0.457), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.526), ('soa', 0.523), ('iti_60hz', 32), ('soa_60hz', 31)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="color_shape_task_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="practiceblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter_practice"/>
    <Routine name="instructions_practice"/>
    <LoopInitiator loopType="TrialHandler" name="practiceTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.545), ('soa', 0.464), ('iti_60hz', 33), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.615), ('soa', 0.442), ('iti_60hz', 37), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 3), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.695), ('soa', 0.471), ('iti_60hz', 42), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 4), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.605), ('soa', 0.561), ('iti_60hz', 36), ('soa_60hz', 34)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 5), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.633), ('soa', 0.406), ('iti_60hz', 38), ('soa_60hz', 24)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 6), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.599), ('soa', 0.547), ('iti_60hz', 36), ('soa_60hz', 33)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 7), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.661), ('soa', 0.407), ('iti_60hz', 40), ('soa_60hz', 24)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 8), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.67), ('soa', 0.489), ('iti_60hz', 40), ('soa_60hz', 29)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.625), ('soa', 0.448), ('iti_60hz', 38), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.538), ('soa', 0.506), ('iti_60hz', 32), ('soa_60hz', 30)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 3), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.57), ('soa', 0.579), ('iti_60hz', 34), ('soa_60hz', 35)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 4), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.681), ('soa', 0.439), ('iti_60hz', 41), ('soa_60hz', 26)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 5), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.586), ('soa', 0.518), ('iti_60hz', 35), ('soa_60hz', 31)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 6), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.549), ('soa', 0.559), ('iti_60hz', 33), ('soa_60hz', 34)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 7), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.528), ('soa', 0.46), ('iti_60hz', 32), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 8), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.518), ('soa', 0.45), ('iti_60hz', 31), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.643), ('soa', 0.445), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.515), ('soa', 0.465), ('iti_60hz', 31), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 3), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.672), ('soa', 0.474), ('iti_60hz', 40), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 4), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.6), ('soa', 0.564), ('iti_60hz', 36), ('soa_60hz', 34)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 5), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.594), ('soa', 0.463), ('iti_60hz', 36), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 6), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.667), ('soa', 0.534), ('iti_60hz', 40), ('soa_60hz', 32)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 7), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.615), ('soa', 0.559), ('iti_60hz', 37), ('soa_60hz', 34)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 8), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.643), ('soa', 0.547), ('iti_60hz', 39), ('soa_60hz', 33)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 9), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.662), ('soa', 0.508), ('iti_60hz', 40), ('soa_60hz', 30)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 10), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.642), ('soa', 0.524), ('iti_60hz', 39), ('soa_60hz', 31)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 11), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.618), ('soa', 0.466), ('iti_60hz', 37), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 12), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.592), ('soa', 0.542), ('iti_60hz', 36), ('soa_60hz', 33)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 13), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.685), ('soa', 0.439), ('iti_60hz', 41), ('soa_60hz', 26)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 14), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.581), ('soa', 0.447), ('iti_60hz', 35), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 15), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.569), ('soa', 0.468), ('iti_60hz', 34), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 16), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.533), ('soa', 0.548), ('iti_60hz', 32), ('soa_60hz', 33)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 17), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.66), ('soa', 0.498), ('iti_60hz', 40), ('soa_60hz', 30)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 18), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.54), ('soa', 0.533), ('iti_60hz', 32), ('soa_60hz', 32)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 19), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.684), ('soa', 0.536), ('iti_60hz', 41), ('soa_60hz', 32)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 20), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.613), ('soa', 0.545), ('iti_60hz', 37), ('soa_60hz', 33)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 21), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.546), ('soa', 0.513), ('iti_60hz', 33), ('soa_60hz', 31)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 22), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.518), ('soa', 0.454), ('iti_60hz', 31), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 23), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.601), ('soa', 0.521), ('iti_60hz', 36), ('soa_60hz', 31)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 24), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.69), ('soa', 0.479), ('iti_60hz', 41), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.544), ('soa', 0.545), ('iti_60hz', 33), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.63), ('soa', 0.531), ('iti_60hz', 38), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 3), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.629), ('soa', 0.433), ('iti_60hz', 38), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 4), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.527), ('soa', 0.448), ('iti_60hz', 32), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 5), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.652), ('soa', 0.418), ('iti_60hz', 39), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 6), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.599), ('soa', 0.529), ('iti_60hz', 36), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 7), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.531), ('soa', 0.475), ('iti_60hz', 32), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 8), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.543), ('soa', 0.416), ('iti_60hz', 33), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 9), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.599), ('soa', 0.597), ('iti_60hz', 36), ('soa_60hz', 36)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 10), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.525), ('soa', 0.421), ('iti_60hz', 32), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 11), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.58), ('soa', 0.534), ('iti_60hz', 35), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 12), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.526), ('soa', 0.52), ('iti_60hz', 32), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 13), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.687), ('soa', 0.481), ('iti_60hz', 41), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 14), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.594), ('soa', 0.45), ('iti_60hz', 36), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 15), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.553), ('soa', 0.435), ('iti_60hz', 33), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 16), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.595), ('soa', 0.469), ('iti_60hz', 36), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 17), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.639), ('soa', 0.503), ('iti_60hz', 38), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 18), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.6), ('soa', 0.55), ('iti_60hz', 36), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 19), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.611), ('soa', 0.409), ('iti_60hz', 37), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 20), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.549), ('soa', 0.447), ('iti_60hz', 33), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 21), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.588), ('soa', 0.515), ('iti_60hz', 35), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 22), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.52), ('soa', 0.424), ('iti_60hz', 31), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 23), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.513), ('soa', 0.549), ('iti_60hz', 31), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 24), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.567), ('soa', 0.438), ('iti_60hz', 34), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 25), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.521), ('soa', 0.558), ('iti_60hz', 31), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 26), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.552), ('soa', 0.556), ('iti_60hz', 33), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 27), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.654), ('soa', 0.546), ('iti_60hz', 39), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 28), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.689), ('soa', 0.579), ('iti_60hz', 41), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 29), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.623), ('soa', 0.459), ('iti_60hz', 37), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 30), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.638), ('soa', 0.5), ('iti_60hz', 38), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 31), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.568), ('soa', 0.513), ('iti_60hz', 34), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 32), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.695), ('soa', 0.566), ('iti_60hz', 42), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 33), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.581), ('soa', 0.557), ('iti_60hz', 35), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 34), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.639), ('soa', 0.5), ('iti_60hz', 38), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 35), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.543), ('soa', 0.444), ('iti_60hz', 33), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 36), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.666), ('soa', 0.569), ('iti_60hz', 40), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 37), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.66), ('soa', 0.402), ('iti_60hz', 40), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 38), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.648), ('soa', 0.404), ('iti_60hz', 39), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 39), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.68), ('soa', 0.515), ('iti_60hz', 41), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 40), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.579), ('soa', 0.464), ('iti_60hz', 35), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 41), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.59), ('soa', 0.593), ('iti_60hz', 35), ('soa_60hz', 36)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 42), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.607), ('soa', 0.426), ('iti_60hz', 36), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 43), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.658), ('soa', 0.419), ('iti_60hz', 39), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 44), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.648), ('soa', 0.471), ('iti_60hz', 39), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 45), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.577), ('soa', 0.462), ('iti_60hz', 35), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 46), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.59), ('soa', 0.427), ('iti_60hz', 35), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 47), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.595), ('soa', 0.496), ('iti_60hz', 36), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 48), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.537), ('soa', 0.4), ('iti_60hz', 32), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.58), ('soa', 0.495), ('iti_60hz', 35), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.546), ('soa', 0.572), ('iti_60hz', 33), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 3), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.575), ('soa', 0.478), ('iti_60hz', 34), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 4), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.54), ('soa', 0.565), ('iti_60hz', 32), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 5), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.53), ('soa', 0.512), ('iti_60hz', 32), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 6), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.606), ('soa', 0.548), ('iti_60hz', 36), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 7), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.501), ('soa', 0.472), ('iti_60hz', 30), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 8), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.53), ('soa', 0.411), ('iti_60hz', 32), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 9), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.628), ('soa', 0.432), ('iti_60hz', 38), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 10), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.535), ('soa', 0.485), ('iti_60hz', 32), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 11), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.549), ('soa', 0.437), ('iti_60hz', 33), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 12), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.522), ('soa', 0.457), ('iti_60hz', 31), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 13), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.656), ('soa', 0.533), ('iti_60hz', 39), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 14), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.53), ('soa', 0.597), ('iti_60hz', 32), ('soa_60hz', 36)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 15), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.668), ('soa', 0.514), ('iti_60hz', 40), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 16), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.683), ('soa', 0.555), ('iti_60hz', 41), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 17), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.617), ('soa', 0.465), ('iti_60hz', 37), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 18), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.603), ('soa', 0.587), ('iti_60hz', 36), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 19), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.532), ('soa', 0.533), ('iti_60hz', 32), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 20), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.593), ('soa', 0.522), ('iti_60hz', 36), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 21), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.539), ('soa', 0.402), ('iti_60hz', 32), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 22), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.536), ('soa', 0.598), ('iti_60hz', 32), ('soa_60hz', 36)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 23), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.568), ('soa', 0.405), ('iti_60hz', 34), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 24), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.638), ('soa', 0.56), ('iti_60hz', 38), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 25), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.689), ('soa', 0.438), ('iti_60hz', 41), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 26), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.62), ('soa', 0.474), ('iti_60hz', 37), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 27), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.684), ('soa', 0.57), ('iti_60hz', 41), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 28), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.545), ('soa', 0.417), ('iti_60hz', 33), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 29), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.693), ('soa', 0.585), ('iti_60hz', 42), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 30), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.639), ('soa', 0.481), ('iti_60hz', 38), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 31), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.6), ('soa', 0.414), ('iti_60hz', 36), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 32), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.647), ('soa', 0.472), ('iti_60hz', 39), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 33), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.613), ('soa', 0.405), ('iti_60hz', 37), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 34), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.662), ('soa', 0.523), ('iti_60hz', 40), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 35), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.674), ('soa', 0.575), ('iti_60hz', 40), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 36), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.582), ('soa', 0.404), ('iti_60hz', 35), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 37), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.511), ('soa', 0.409), ('iti_60hz', 31), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 38), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.512), ('soa', 0.56), ('iti_60hz', 31), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 39), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.696), ('soa', 0.559), ('iti_60hz', 42), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 40), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.523), ('soa', 0.563), ('iti_60hz', 31), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 41), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.682), ('soa', 0.485), ('iti_60hz', 41), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 42), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.569), ('soa', 0.41), ('iti_60hz', 34), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 43), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.625), ('soa', 0.449), ('iti_60hz', 38), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 44), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.529), ('soa', 0.494), ('iti_60hz', 32), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 45), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.685), ('soa', 0.564), ('iti_60hz', 41), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 46), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.502), ('soa', 0.517), ('iti_60hz', 30), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 47), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.615), ('soa', 0.433), ('iti_60hz', 37), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 48), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.611), ('soa', 0.466), ('iti_60hz', 37), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.588), ('soa', 0.548), ('iti_60hz', 35), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.512), ('soa', 0.453), ('iti_60hz', 31), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 3), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.582), ('soa', 0.572), ('iti_60hz', 35), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 4), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.55), ('soa', 0.574), ('iti_60hz', 33), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 5), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.545), ('soa', 0.53), ('iti_60hz', 33), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 6), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.555), ('soa', 0.567), ('iti_60hz', 33), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 7), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.667), ('soa', 0.584), ('iti_60hz', 40), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 8), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.509), ('soa', 0.512), ('iti_60hz', 31), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 9), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.657), ('soa', 0.523), ('iti_60hz', 39), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 10), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.685), ('soa', 0.472), ('iti_60hz', 41), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 11), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.581), ('soa', 0.429), ('iti_60hz', 35), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 12), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.68), ('soa', 0.406), ('iti_60hz', 41), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 13), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.555), ('soa', 0.53), ('iti_60hz', 33), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 14), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.549), ('soa', 0.414), ('iti_60hz', 33), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 15), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.542), ('soa', 0.404), ('iti_60hz', 33), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 16), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.599), ('soa', 0.492), ('iti_60hz', 36), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 17), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.591), ('soa', 0.404), ('iti_60hz', 35), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 18), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.571), ('soa', 0.423), ('iti_60hz', 34), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 19), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.609), ('soa', 0.571), ('iti_60hz', 37), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 20), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.665), ('soa', 0.461), ('iti_60hz', 40), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 21), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.503), ('soa', 0.509), ('iti_60hz', 30), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 22), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.646), ('soa', 0.509), ('iti_60hz', 39), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 23), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.657), ('soa', 0.507), ('iti_60hz', 39), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 24), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.594), ('soa', 0.417), ('iti_60hz', 36), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 25), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.516), ('soa', 0.589), ('iti_60hz', 31), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 26), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.534), ('soa', 0.484), ('iti_60hz', 32), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 27), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.628), ('soa', 0.553), ('iti_60hz', 38), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 28), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.537), ('soa', 0.441), ('iti_60hz', 32), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 29), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.693), ('soa', 0.485), ('iti_60hz', 42), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 30), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.556), ('soa', 0.47), ('iti_60hz', 33), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 31), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.647), ('soa', 0.569), ('iti_60hz', 39), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 32), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.673), ('soa', 0.559), ('iti_60hz', 40), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 33), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.7), ('soa', 0.486), ('iti_60hz', 42), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 34), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.631), ('soa', 0.412), ('iti_60hz', 38), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 35), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.536), ('soa', 0.566), ('iti_60hz', 32), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 36), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.649), ('soa', 0.547), ('iti_60hz', 39), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 37), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.52), ('soa', 0.578), ('iti_60hz', 31), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 38), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.653), ('soa', 0.547), ('iti_60hz', 39), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 39), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.565), ('soa', 0.429), ('iti_60hz', 34), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 40), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.512), ('soa', 0.55), ('iti_60hz', 31), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 41), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.511), ('soa', 0.428), ('iti_60hz', 31), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 42), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.519), ('soa', 0.596), ('iti_60hz', 31), ('soa_60hz', 36)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 43), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.633), ('soa', 0.463), ('iti_60hz', 38), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 44), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.658), ('soa', 0.445), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 45), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.675), ('soa', 0.453), ('iti_60hz', 40), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 46), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.599), ('soa', 0.598), ('iti_60hz', 36), ('soa_60hz', 36)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 47), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.675), ('soa', 0.512), ('iti_60hz', 40), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 48), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.57), ('soa', 0.539), ('iti_60hz', 34), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.653), ('soa', 0.457), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.526), ('soa', 0.523), ('iti_60hz', 32), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 3), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.695), ('soa', 0.431), ('iti_60hz', 42), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 4), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.538), ('soa', 0.411), ('iti_60hz', 32), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 5), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.589), ('soa', 0.59), ('iti_60hz', 35), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 6), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.608), ('soa', 0.477), ('iti_60hz', 36), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 7), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.603), ('soa', 0.505), ('iti_60hz', 36), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 8), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.657), ('soa', 0.411), ('iti_60hz', 39), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 9), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.625), ('soa', 0.554), ('iti_60hz', 38), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 10), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.559), ('soa', 0.528), ('iti_60hz', 34), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 11), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.514), ('soa', 0.431), ('iti_60hz', 31), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 12), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.546), ('soa', 0.463), ('iti_60hz', 33), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 13), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.641), ('soa', 0.423), ('iti_60hz', 38), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 14), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.607), ('soa', 0.435), ('iti_60hz', 36), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 15), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.533), ('soa', 0.561), ('iti_60hz', 32), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 16), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.557), ('soa', 0.403), ('iti_60hz', 33), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 17), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.506), ('soa', 0.529), ('iti_60hz', 30), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 18), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.53), ('soa', 0.444), ('iti_60hz', 32), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 19), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.686), ('soa', 0.497), ('iti_60hz', 41), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 20), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.616), ('soa', 0.568), ('iti_60hz', 37), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 21), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.582), ('soa', 0.433), ('iti_60hz', 35), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 22), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.505), ('soa', 0.525), ('iti_60hz', 30), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 23), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.562), ('soa', 0.464), ('iti_60hz', 34), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 24), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.639), ('soa', 0.442), ('iti_60hz', 38), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 25), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.617), ('soa', 0.461), ('iti_60hz', 37), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 26), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.527), ('soa', 0.503), ('iti_60hz', 32), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 27), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.533), ('soa', 0.525), ('iti_60hz', 32), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 28), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.621), ('soa', 0.526), ('iti_60hz', 37), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 29), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.6), ('soa', 0.434), ('iti_60hz', 36), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 30), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.598), ('soa', 0.478), ('iti_60hz', 36), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 31), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.688), ('soa', 0.547), ('iti_60hz', 41), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 32), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.542), ('soa', 0.406), ('iti_60hz', 33), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 33), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.693), ('soa', 0.452), ('iti_60hz', 42), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 34), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.514), ('soa', 0.55), ('iti_60hz', 31), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 35), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.579), ('soa', 0.42), ('iti_60hz', 35), ('soa_60hz', 25)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 36), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.67), ('soa', 0.466), ('iti_60hz', 40), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 37), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.506), ('soa', 0.493), ('iti_60hz', 30), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 38), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.592), ('soa', 0.576), ('iti_60hz', 36), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 39), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.615), ('soa', 0.447), ('iti_60hz', 37), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 40), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.629), ('soa', 0.559), ('iti_60hz', 38), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 41), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.618), ('soa', 0.553), ('iti_60hz', 37), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 42), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.515), ('soa', 0.462), ('iti_60hz', 31), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 43), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.695), ('soa', 0.518), ('iti_60hz', 42), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 44), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.54), ('soa', 0.482), ('iti_60hz', 32), ('soa_60hz', 29)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 45), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.557), ('soa', 0.591), ('iti_60hz', 33), ('soa_60hz', 35)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 46), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.584), ('soa', 0.572), ('iti_60hz', 35), ('soa_60hz', 34)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 47), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.544), ('soa', 0.44), ('iti_60hz', 33), ('soa_60hz', 26)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 48), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.63), ('soa', 0.555), ('iti_60hz', 38), ('soa_60hz', 33)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="color_shape_task_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="practiceTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_practice"/>
    <Routine name="feedback"/>
    <LoopTerminator name="practiceTrials"/>
    <Routine name="increment_block_practice"/>
    <LoopTerminator name="practiceblocks"/>
    <Routine name="startTask"/>
    <LoopInitiator loopType="TrialHandler" name="testblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.545), ('soa', 0.464), ('iti_60hz', 33), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.615), ('soa', 0.442), ('iti_60hz', 37), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.625), ('soa', 0.448), ('iti_60hz', 38), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.538), ('soa', 0.506), ('iti_60hz', 32), ('soa_60hz', 30)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.643), ('soa', 0.445), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.515), ('soa', 0.465), ('iti_60hz', 31), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.544), ('soa', 0.545), ('iti_60hz', 33), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.63), ('soa', 0.531), ('iti_60hz', 38), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 48), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.537), ('soa', 0.4), ('iti_60hz', 32), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.58), ('soa', 0.495), ('iti_60hz', 35), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 47), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.675), ('soa', 0.512), ('iti_60hz', 40), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 48), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.57), ('soa', 0.539), ('iti_60hz', 34), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.653), ('soa', 0.457), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.526), ('soa', 0.523), ('iti_60hz', 32), ('soa_60hz', 31)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="color_shape_task_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="testblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter"/>
    <LoopInitiator loopType="TrialHandler" name="testTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.545), ('soa', 0.464), ('iti_60hz', 33), ('soa_60hz', 28)]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', 'color'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'k'), ('iti', 0.615), ('soa', 0.442), ('iti_60hz', 37), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'switch'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.625), ('soa', 0.448), ('iti_60hz', 38), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', 'shape'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.538), ('soa', 0.506), ('iti_60hz', 32), ('soa_60hz', 30)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.643), ('soa', 0.445), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'd'), ('iti', 0.515), ('soa', 0.465), ('iti_60hz', 31), ('soa_60hz', 28)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 1), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/redtriangle.png'), ('correct_resp', 'k'), ('iti', 0.544), ('soa', 0.545), ('iti_60hz', 33), ('soa_60hz', 33)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 2), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.63), ('soa', 0.531), ('iti_60hz', 38), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', 'both'), ('trial', 48), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.537), ('soa', 0.4), ('iti_60hz', 32), ('soa_60hz', 24)]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', 'both'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/greentriangle.png'), ('correct_resp', 'k'), ('iti', 0.58), ('soa', 0.495), ('iti_60hz', 35), ('soa_60hz', 30)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 47), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.675), ('soa', 0.512), ('iti_60hz', 40), ('soa_60hz', 31)]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', 'both'), ('trial', 48), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'switch'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.57), ('soa', 0.539), ('iti_60hz', 34), ('soa_60hz', 32)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 1), ('instruction', 'shape'), ('instruction_fr', 'F'), ('instruction_eng', 'S'), ('trial_type', 'repeat'), ('stimulus', 'images/redcircle.png'), ('correct_resp', 'd'), ('iti', 0.653), ('soa', 0.457), ('iti_60hz', 39), ('soa_60hz', 27)]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', 'both'), ('trial', 2), ('instruction', 'color'), ('instruction_fr', 'C'), ('instruction_eng', 'C'), ('trial_type', 'repeat'), ('stimulus', 'images/greencircle.png'), ('correct_resp', 'd'), ('iti', 0.526), ('soa', 0.523), ('iti_60hz', 32), ('soa_60hz', 31)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="color_shape_task_scenario.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="testTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_test"/>
    <Routine name="feedback_test"/>
    <LoopTerminator name="testTrials"/>
    <Routine name="pause"/>
    <LoopTerminator name="testblocks"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>

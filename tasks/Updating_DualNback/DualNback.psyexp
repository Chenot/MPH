<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.1.4">
  <Settings>
    <Param val="1" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="completionURL" valType="str" updates="None" name="Completion URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="False" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="" valType="str" updates="None" name="OSF Project ID"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="DualNback" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="1" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="main">
      <RoutineSettingsComponent name="main" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="main" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="grid" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="ressources/grid.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="grid" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.6, 0.6)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <PolygonComponent name="stimulus_visual" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="stimulus_visual" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SoundComponent name="stimulus_auditory" plugin="None">
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="hamming"/>
        <Param val="stimulus_auditory" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$auditory_path" valType="str" updates="set every repeat" name="sound"/>
        <Param val="-1" valType="code" updates="None" name="speakerIndex"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="stopWithRoutine"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="1" valType="num" updates="constant" name="volume"/>
      </SoundComponent>
      <KeyboardComponent name="response_visual" plugin="None">
        <Param val="'k'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$visual_correct" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response_visual" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <KeyboardComponent name="response_auditory" plugin="None">
        <Param val="'d'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$auditory_correct" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response_auditory" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_stimulus_visual" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="position_dict = {&quot;pos_1&quot;: [(- 0.2), 0.2], &quot;pos_2&quot;: [0, 0.2], &quot;pos_3&quot;: [0.2, 0.2], &quot;pos_4&quot;: [(- 0.2), 0], &quot;pos_5&quot;: [0, 0], &quot;pos_6&quot;: [0.2, 0], &quot;pos_7&quot;: [(- 0.2), (- 0.2)], &quot;pos_8&quot;: [0, (- 0.2)], &quot;pos_9&quot;: [0.2, (- 0.2)]};&amp;#10;current_position = square_position;&amp;#10;stimulus_visual.pos = position_dict[current_position];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Dictionary mapping square_position to coordinates&amp;#10;position_dict = {&amp;#10;    'pos_1': (-0.2, 0.2),&amp;#10;    'pos_2': (0, 0.2),&amp;#10;    'pos_3': (0.2, 0.2),&amp;#10;    'pos_4': (-0.2, 0),&amp;#10;    'pos_5': (0, 0),&amp;#10;    'pos_6': (0.2, 0),&amp;#10;    'pos_7': (-0.2, -0.2),&amp;#10;    'pos_8': (0, -0.2),&amp;#10;    'pos_9': (0.2, -0.2)&amp;#10;}&amp;#10;&amp;#10;# Get the current position from the trial handler&amp;#10;current_position = square_position&amp;#10;&amp;#10;# Set the position of the stimulus_visual polygon&amp;#10;stimulus_visual.pos = position_dict[current_position]&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_stimulus_visual" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_stimulus" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker((((&quot;stimulus_&quot; + auditory_path) + &quot;_&quot;) + square_position));&amp;#10;marker_sent_visual = false;&amp;#10;marker_sent_auditory = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker(&quot;stimulus_&quot; + auditory_path + &quot;_&quot; + square_position)&amp;#10;marker_sent_visual = False&amp;#10;marker_sent_auditory = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if response_visual.keys and not marker_sent_visual:  # Check if a key was pressed for visual response and marker hasn't been sent&amp;#10;    answer_corr_visual = f&quot;response_visual_{response_visual.corr}&quot;&amp;#10;    send_marker(answer_corr_visual)  # Function to send the LSL marker&amp;#10;    marker_sent_visual = True  # Set the flag to indicate that the marker has been sent&amp;#10;&amp;#10;if response_auditory.keys and not marker_sent_auditory:  # Check if a key was pressed for auditory response and marker hasn't been sent&amp;#10;    answer_corr_auditory = f&quot;response_auditory_{response_auditory.corr}&quot;&amp;#10;    send_marker(answer_corr_auditory)  # Function to send the LSL marker&amp;#10;    marker_sent_auditory = True  # Set the flag to indicate that the marker has been sent&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((response_visual.keys &amp;&amp; (! marker_sent_visual))) {&amp;#10;    answer_corr_visual = `response_visual_${response_visual.corr}`;&amp;#10;    send_marker(answer_corr_visual);&amp;#10;    marker_sent_visual = true;&amp;#10;}&amp;#10;if ((response_auditory.keys &amp;&amp; (! marker_sent_auditory))) {&amp;#10;    answer_corr_auditory = `response_auditory_${response_auditory.corr}`;&amp;#10;    send_marker(answer_corr_auditory);&amp;#10;    marker_sent_auditory = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((! response_visual.keys)) {&amp;#10;    marker_sent_visual = false;&amp;#10;}&amp;#10;if ((! response_auditory.keys)) {&amp;#10;    marker_sent_auditory = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Reset the flags after the key is released&amp;#10;if not response_visual.keys:&amp;#10;    marker_sent_visual = False  # Reset the flag for the next key press&amp;#10;&amp;#10;if not response_auditory.keys:&amp;#10;    marker_sent_auditory = False  # Reset the flag for the next key press" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="startTask">
      <RoutineSettingsComponent name="startTask" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="startTask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText2" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText2.setText(instructions[&quot;Text_start_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the second set of instructions&amp;#10;InstructionsText2.setText(instructions['Text_start_task'])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_test_blocks" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="send_marker(&quot;start_test_blocks&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_test_blocks" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="is_test = true;&amp;#10;block_index = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Initialize block variables&amp;#10;is_test = True&amp;#10;block_index = 0  # Start with the first block for test" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="thanks">
      <RoutineSettingsComponent name="thanks" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="thanks" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText4" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="LSL_DualNback_end" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;DualNback_end&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('DualNback_end')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_DualNback_end" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_InstructionsText4" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText4.setText(instructions[&quot;Text_end_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText4.setText(instructions['Text_end_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_end" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_end" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pause">
      <RoutineSettingsComponent name="pause" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="pause" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText3" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText3.setText(instructions[&quot;Text_pause_between_blocks&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText3.setText(instructions['Text_pause_between_blocks'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_block_counter" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((is_test &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length))) {&amp;#10;    testblocks.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if the block is test and block_n is to skip the loop&amp;#10;if is_test and block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    testblocks.finished = True  # Skip the loop" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_block_counter" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="init">
      <RoutineSettingsComponent name="init" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="init" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="define_block" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import pandas as pd&amp;#10;import psychopy.logging as logging&amp;#10;&amp;#10;# Set logging level to WARNING to suppress INFO and DEBUG messages&amp;#10;logging.console.setLevel(logging.WARNING)&amp;#10;&amp;#10;# Load the scenario CSV file&amp;#10;scenario_df = pd.read_csv('DualNback_scenario.csv')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as pd from 'pandas';&amp;#10;import * as logging from 'psychopy/logging';&amp;#10;logging.console.setLevel(logging.WARNING);&amp;#10;scenario_df = pd.read_csv(&quot;DualNback_scenario.csv&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="language" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Check if expInfo exists and create the language variable&amp;#10;if 'expInfo' not in globals():&amp;#10;    expInfo = {}&amp;#10;&amp;#10;# Set default values to English if it is missing from expInfo keys&amp;#10;if 'language' not in expInfo:&amp;#10;    expInfo['language'] = 'English'&amp;#10;&amp;#10;# Create the language variable&amp;#10;language = expInfo.get('language')&amp;#10;&amp;#10;# Define instructions based on the selected language&amp;#10;if language == &quot;English&quot;:&amp;#10;    instructions = {&amp;#10;        'name_task' : 'DUAL N-BACK',&amp;#10;        'Text_instructions': (&quot;Welcome to the dual n-back task.\n\n&quot;&amp;#10;                              &quot;In this task, you will be required to perform both two tasks simultaneously.\n&quot;&amp;#10;                              &quot;In a visual task, you will see squares appearing in different positions on the screen.\n&quot;&amp;#10;                              &quot;in a auditory task, you will hear a sequence of letters.\n&quot;&amp;#10;                              &quot;Your goal is to identify when the current visual or auditory stimulus matches one from a specified number of trials ago (n-back).\n\n&quot;&amp;#10;                              &quot;We will start with some practice sessions to help you get familiar with the task.\n\n&quot;&amp;#10;                              &quot;Press the space bar to continue.&quot;),&amp;#10;        &amp;#10;        'Practice_Visual': (&quot;Let's begin with the visual part of the task (sequence of squares).\n\n&quot;&amp;#10;                            &quot;In this part, you will see a sequence of squares appearing in different positions on the screen.\n\n&quot;&amp;#10;                            &quot;Your goal is to press the 'k' key if the current square position matches the position from n trials ago (visual task).\n&quot;&amp;#10;                            &quot;In this first practice, we will focus on a 1-back condition, so press 'k' when the square is in the same position as in the previous trial.\n\n&quot;&amp;#10;                            &quot;Press the space bar to begin the practice session.&quot;),&amp;#10;&amp;#10;        'Practice_Auditory': (&quot;Now, let's focus on the auditory part of the task (sequence of letters).\n\n&quot;&amp;#10;                              &quot;In this part, you will hear a sequence of letters.\n\n&quot;&amp;#10;                              &quot;Your goal is to press the 'd' key if the current letter matches the letter from n trials ago (auditory task).\n&quot;&amp;#10;                              &quot;In this practice, we will focus on a 1-back condition, so press 'd' when the letter is the same as in the previous trial.\n\n&quot;&amp;#10;                              &quot;Press the space bar to begin the practice session.&quot;),&amp;#10;&amp;#10;        'Practice_Both_1back': (&quot;Now, let's combine both tasks (1-back).\n\n&quot;&amp;#10;                                &quot;In this practice session, you will perform both the visual and auditory tasks simultaneously.\n\n&quot;&amp;#10;                                &quot;Remember to press 'd' when the letter is the same as in the previous trial, and press 'k' when the square is in the same position as in the previous trial.\n\n&quot;&amp;#10;                                &quot;Press the space bar to begin the practice session.&quot;),&amp;#10;&amp;#10;        'Practice_Both_2back': (&quot;Finally, let's combine both tasks in a 2-back condition.\n\n&quot;&amp;#10;                                &quot;In this last practice session, you will perform both the visual and auditory tasks simultaneously, but in a 2-back condition.\n\n&quot;&amp;#10;                                &quot;Remember to press 'd' when the letter matches the letter from 2 trials ago, and press 'k' when the square is in the same position as 2 trials ago.\n\n&quot;&amp;#10;                                &quot;Press the space bar to begin the practice session.&quot;),&amp;#10;&amp;#10;        'Text_start_task': (&quot;The practice is over. Now we shall begin the real task.\nThis will consist of 6 blocks of either 1-back, 2-back or 3-back.\n&quot;&amp;#10;                            &quot;Ready?\n\n&quot;&amp;#10;                            &quot;Press the space bar to begin.&quot;),&amp;#10;        'Text_block' : &quot;type : &quot;,&amp;#10;        'Text_pause_between_blocks': (&quot;Pause\n\n&quot;&amp;#10;                                      &quot;Press the space bar when you are ready to continue.&quot;),&amp;#10;        'Text_end_task': (&quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;)&amp;#10;    }&amp;#10;else:  # Default to French if any issues&amp;#10;    instructions = {&amp;#10;        'name_task' : 'DUAL N-BACK',&amp;#10;        'Text_instructions': (&quot;Bienvenue dans la tâche de double n-back.\n\n&quot;&amp;#10;                              &quot;Dans cette tâche, vous devrez effectuer simultanément des tâches visuelles et auditives. &quot;&amp;#10;                              &quot;Dans la tâche visuelle, vous verrez des carrés apparaissant à différentes positions sur l'écran.\n&quot;&amp;#10;                              &quot;Dans la tâche auditive, vous entendrez une séquence de lettres.\n&quot;&amp;#10;                              &quot;Votre objectif est d'identifier si chaque stimulus actuel correspond à celui d'il y a un certain nombre d'essais (n-back).\n\n&quot;&amp;#10;                              &quot;Commençons par quelques sessions d'entraînement pour vous familiariser avec la tâche.\n\n&quot;&amp;#10;                              &quot;Appuyez sur la barre d'espace pour continuer.&quot;),&amp;#10;        &amp;#10;        'Practice_Visual': (&quot;Commençons par la partie visuelle de la tâche (séquence de carrés).\n\n&quot;&amp;#10;                            &quot;Dans cette partie, vous verrez une séquence de carrés apparaissant à différentes positions sur l'écran.\n\n&quot;&amp;#10;                            &quot;Votre objectif est d'appuyer sur la touche 'k' si la position actuelle du carré correspond à la position d'il y a n essais (tâche visuelle).\n&quot;&amp;#10;                            &quot;Dans cette première pratique, nous nous concentrerons sur une condition 1-back, donc appuyez sur 'k' lorsque le carré est à la même position que lors de l'essai précédent.\n\n&quot;&amp;#10;                            &quot;Appuyez sur la barre d'espace pour commencer la session d'entraînement.&quot;),&amp;#10;&amp;#10;        'Practice_Auditory': (&quot;Passons maintenant à la partie auditive de la tâche (séquence de lettres).\n\n&quot;&amp;#10;                              &quot;Dans cette partie, vous entendrez une séquence de lettres.\n\n&quot;&amp;#10;                              &quot;Votre objectif est d'appuyer sur la touche 'd' si la lettre actuelle correspond à la lettre d'il y a n essais (tâche auditive).\n&quot;&amp;#10;                              &quot;Dans cette pratique, nous nous concentrerons sur une condition 1-back, donc appuyez sur 'd' lorsque la lettre est la même que lors de l'essai précédent.\n\n&quot;&amp;#10;                              &quot;Appuyez sur la barre d'espace pour commencer la session d'entraînement.&quot;),&amp;#10;&amp;#10;        'Practice_Both_1back': (&quot;Passons maintenant à la combinaison des deux tâches (1-back).\n\n&quot;&amp;#10;                                &quot;Dans cette session d'entraînement, vous effectuerez simultanément les tâches visuelle et auditive.\n\n&quot;&amp;#10;                                &quot;N'oubliez pas d'appuyer sur 'd' lorsque la lettre est la même que lors de l'essai précédent, et appuyez sur 'k' lorsque le carré est à la même position que lors de l'essai précédent.\n\n&quot;&amp;#10;                                &quot;Appuyez sur la barre d'espace pour commencer la session d'entraînement.&quot;),&amp;#10;&amp;#10;        'Practice_Both_2back': (&quot;Enfin, combinons les deux tâches en condition 2-back.\n\n&quot;&amp;#10;                                &quot;Dans cette dernière session d'entraînement, vous effectuerez simultanément les tâches visuelle et auditive, mais en condition 2-back.\n\n&quot;&amp;#10;                                &quot;N'oubliez pas d'appuyer sur 'd' lorsque la lettre correspond à la lettre d'il y a 2 essais, et appuyez sur 'k' lorsque le carré est à la même position qu'il y a 2 essais.\n\n&quot;&amp;#10;                                &quot;Appuyez sur la barre d'espace pour commencer la session d'entraînement.&quot;),&amp;#10;&amp;#10;        'Text_start_task': (&quot;L'entraînement est terminé. Nous allons maintenant commencer la vraie tâche.\nCette dernière sera constituée de 6 blocs de 1-back, 2-back ou 3-back&quot;&amp;#10;                            &quot;Prêt·e ?\n\n&quot;&amp;#10;                            &quot;Appuyez sur la barre d'espace pour commencer.&quot;),&amp;#10;        'Text_block' : &quot;type : &quot;,&amp;#10;        'Text_pause_between_blocks': (&quot;Pause\n\n&quot;&amp;#10;                                      &quot;Appuyez sur la barre d'espace lorsque vous êtes prêt·e à continuer.&quot;),&amp;#10;        'Text_end_task': (&quot;Cette tâche est maintenant terminée.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;)&amp;#10;    }&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(&quot;expInfo&quot;, globals()))) {&amp;#10;    expInfo = {};&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;language&quot;, expInfo))) {&amp;#10;    expInfo[&quot;language&quot;] = &quot;English&quot;;&amp;#10;}&amp;#10;language = expInfo.get(&quot;language&quot;);&amp;#10;if ((language === &quot;English&quot;)) {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;DUAL N-BACK&quot;, &quot;Text_instructions&quot;: &quot;Welcome to the dual n-back task.\n\nIn this task, you will be required to perform both two tasks simultaneously.\nIn a visual task, you will see squares appearing in different positions on the screen.\nin a auditory task, you will hear a sequence of letters.\nYour goal is to identify when the current visual or auditory stimulus matches one from a specified number of trials ago (n-back).\n\nWe will start with some practice sessions to help you get familiar with the task.\n\nPress the space bar to continue.&quot;, &quot;Practice_Visual&quot;: &quot;Let's begin with the visual part of the task (sequence of squares).\n\nIn this part, you will see a sequence of squares appearing in different positions on the screen.\n\nYour goal is to press the 'k' key if the current square position matches the position from n trials ago (visual task).\nIn this first practice, we will focus on a 1-back condition, so press 'k' when the square is in the same position as in the previous trial.\n\nPress the space bar to begin the practice session.&quot;, &quot;Practice_Auditory&quot;: &quot;Now, let's focus on the auditory part of the task (sequence of letters).\n\nIn this part, you will hear a sequence of letters.\n\nYour goal is to press the 'd' key if the current letter matches the letter from n trials ago (auditory task).\nIn this practice, we will focus on a 1-back condition, so press 'd' when the letter is the same as in the previous trial.\n\nPress the space bar to begin the practice session.&quot;, &quot;Practice_Both_1back&quot;: &quot;Now, let's combine both tasks (1-back).\n\nIn this practice session, you will perform both the visual and auditory tasks simultaneously.\n\nRemember to press 'd' when the letter is the same as in the previous trial, and press 'k' when the square is in the same position as in the previous trial.\n\nPress the space bar to begin the practice session.&quot;, &quot;Practice_Both_2back&quot;: &quot;Finally, let's combine both tasks in a 2-back condition.\n\nIn this last practice session, you will perform both the visual and auditory tasks simultaneously, but in a 2-back condition.\n\nRemember to press 'd' when the letter matches the letter from 2 trials ago, and press 'k' when the square is in the same position as 2 trials ago.\n\nPress the space bar to begin the practice session.&quot;, &quot;Text_start_task&quot;: &quot;The practice is over. Now we shall begin the real task.\nThis will consist of 6 blocks of either 1-back, 2-back or 3-back.\nReady?\n\nPress the space bar to begin.&quot;, &quot;Text_block&quot;: &quot;type : &quot;, &quot;Text_pause_between_blocks&quot;: &quot;Pause\n\nPress the space bar when you are ready to continue.&quot;, &quot;Text_end_task&quot;: &quot;This task is now over.\n\nThank you!\n\nPress the space bar to continue&quot;};&amp;#10;} else {&amp;#10;    instructions = {&quot;name_task&quot;: &quot;DUAL N-BACK&quot;, &quot;Text_instructions&quot;: &quot;Bienvenue dans la t\u00e2che de double n-back.\n\nDans cette t\u00e2che, vous devrez effectuer simultan\u00e9ment des t\u00e2ches visuelles et auditives. Dans la t\u00e2che visuelle, vous verrez des carr\u00e9s apparaissant \u00e0 diff\u00e9rentes positions sur l'\u00e9cran.\nDans la t\u00e2che auditive, vous entendrez une s\u00e9quence de lettres.\nVotre objectif est d'identifier si chaque stimulus actuel correspond \u00e0 celui d'il y a un certain nombre d'essais (n-back).\n\nCommen\u00e7ons par quelques sessions d'entra\u00eenement pour vous familiariser avec la t\u00e2che.\n\nAppuyez sur la barre d'espace pour continuer.&quot;, &quot;Practice_Visual&quot;: &quot;Commen\u00e7ons par la partie visuelle de la t\u00e2che (s\u00e9quence de carr\u00e9s).\n\nDans cette partie, vous verrez une s\u00e9quence de carr\u00e9s apparaissant \u00e0 diff\u00e9rentes positions sur l'\u00e9cran.\n\nVotre objectif est d'appuyer sur la touche 'k' si la position actuelle du carr\u00e9 correspond \u00e0 la position d'il y a n essais (t\u00e2che visuelle).\nDans cette premi\u00e8re pratique, nous nous concentrerons sur une condition 1-back, donc appuyez sur 'k' lorsque le carr\u00e9 est \u00e0 la m\u00eame position que lors de l'essai pr\u00e9c\u00e9dent.\n\nAppuyez sur la barre d'espace pour commencer la session d'entra\u00eenement.&quot;, &quot;Practice_Auditory&quot;: &quot;Passons maintenant \u00e0 la partie auditive de la t\u00e2che (s\u00e9quence de lettres).\n\nDans cette partie, vous entendrez une s\u00e9quence de lettres.\n\nVotre objectif est d'appuyer sur la touche 'd' si la lettre actuelle correspond \u00e0 la lettre d'il y a n essais (t\u00e2che auditive).\nDans cette pratique, nous nous concentrerons sur une condition 1-back, donc appuyez sur 'd' lorsque la lettre est la m\u00eame que lors de l'essai pr\u00e9c\u00e9dent.\n\nAppuyez sur la barre d'espace pour commencer la session d'entra\u00eenement.&quot;, &quot;Practice_Both_1back&quot;: &quot;Passons maintenant \u00e0 la combinaison des deux t\u00e2ches (1-back).\n\nDans cette session d'entra\u00eenement, vous effectuerez simultan\u00e9ment les t\u00e2ches visuelle et auditive.\n\nN'oubliez pas d'appuyer sur 'd' lorsque la lettre est la m\u00eame que lors de l'essai pr\u00e9c\u00e9dent, et appuyez sur 'k' lorsque le carr\u00e9 est \u00e0 la m\u00eame position que lors de l'essai pr\u00e9c\u00e9dent.\n\nAppuyez sur la barre d'espace pour commencer la session d'entra\u00eenement.&quot;, &quot;Practice_Both_2back&quot;: &quot;Enfin, combinons les deux t\u00e2ches en condition 2-back.\n\nDans cette derni\u00e8re session d'entra\u00eenement, vous effectuerez simultan\u00e9ment les t\u00e2ches visuelle et auditive, mais en condition 2-back.\n\nN'oubliez pas d'appuyer sur 'd' lorsque la lettre correspond \u00e0 la lettre d'il y a 2 essais, et appuyez sur 'k' lorsque le carr\u00e9 est \u00e0 la m\u00eame position qu'il y a 2 essais.\n\nAppuyez sur la barre d'espace pour commencer la session d'entra\u00eenement.&quot;, &quot;Text_start_task&quot;: &quot;L'entra\u00eenement est termin\u00e9. Nous allons maintenant commencer la vraie t\u00e2che.\nCette derni\u00e8re sera constitu\u00e9e de 6 blocs de 1-back, 2-back ou 3-backPr\u00eat\u00b7e ?\n\nAppuyez sur la barre d'espace pour commencer.&quot;, &quot;Text_block&quot;: &quot;type : &quot;, &quot;Text_pause_between_blocks&quot;: &quot;Pause\n\nAppuyez sur la barre d'espace lorsque vous \u00eates pr\u00eat\u00b7e \u00e0 continuer.&quot;, &quot;Text_end_task&quot;: &quot;Cette t\u00e2che est maintenant termin\u00e9e.\n\nMerci !\n\nAppuyez sur la barre d'espace pour continuer&quot;};&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="language" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import socket&amp;#10;import json&amp;#10;import threading&amp;#10;from pylsl import local_clock&amp;#10;&amp;#10;# Function to send markers to the LSL server&amp;#10;def send_marker(marker):&amp;#10;    event = {&amp;#10;        'marker': marker,&amp;#10;        'timestamp': local_clock()&amp;#10;    }&amp;#10;    message = json.dumps(event)&amp;#10;    &amp;#10;    def send():&amp;#10;        try:&amp;#10;            # Connect to the socket server and send the marker with a timeout&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&amp;#10;            client_socket.settimeout(0.1)  # Set timeout to 100 milliseconds&amp;#10;            client_socket.connect(('localhost', 5000))&amp;#10;            client_socket.sendall(message.encode('utf-8'))&amp;#10;            client_socket.close()&amp;#10;        except (ConnectionRefusedError, socket.timeout):&amp;#10;            print(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;)&amp;#10;    &amp;#10;    # Create and start a thread to send the marker&amp;#10;    send_thread = threading.Thread(target=send)&amp;#10;    send_thread.start()&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as socket from 'socket';&amp;#10;import * as json from 'json';&amp;#10;import * as threading from 'threading';&amp;#10;import {local_clock} from 'pylsl';&amp;#10;function send_marker(marker) {&amp;#10;    var event, message, send_thread;&amp;#10;    event = {&quot;marker&quot;: marker, &quot;timestamp&quot;: local_clock()};&amp;#10;    message = json.dumps(psychoJS.eventManager);&amp;#10;    function send() {&amp;#10;        var client_socket;&amp;#10;        try {&amp;#10;            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM);&amp;#10;            client_socket.settimeout(0.1);&amp;#10;            client_socket.connect([&quot;localhost&quot;, 5000]);&amp;#10;            client_socket.sendall(message.encode(&quot;utf-8&quot;));&amp;#10;            client_socket.close();&amp;#10;        } catch(e) {&amp;#10;            if (((e instanceof ConnectionRefusedError) || (e instanceof socket.timeout))) {&amp;#10;                console.log(&quot;LSL server is not running or connection timed out. Continuing without sending marker.&quot;);&amp;#10;            } else {&amp;#10;                throw e;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    send_thread = new threading.Thread({&quot;target&quot;: send});&amp;#10;    send_thread.start();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="ActivateWindow" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="win.winHandle.activate()  # Ensure the PsychoPy window is the primary window&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="psychoJS.window.winHandle.activate();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ActivateWindow" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="DeactivateMouse" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="event.Mouse(visible=False)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="new psychoJS.eventManager.Mouse({&quot;visible&quot;: false});&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="DeactivateMouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="QuitTask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy import core, event&amp;#10;&amp;#10;# Add a global shutdown key: Ctrl + Q to quit the experiment&amp;#10;event.globalKeys.add(key='q', modifiers=['ctrl'], func=core.quit)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {core, event} from 'psychopy';&amp;#10;psychoJS.eventManager.globalKeys.add({&quot;key&quot;: &quot;q&quot;, &quot;modifiers&quot;: [&quot;ctrl&quot;], &quot;func&quot;: core.quit});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="QuitTask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter">
      <RoutineSettingsComponent name="block_counter" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;if ((block_index &gt; scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length)) {&amp;#10;    testblocks.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    block_n = block_index;&amp;#10;    block_type = scenario_df[((scenario_df[&quot;block&quot;] === &quot;test&quot;) &amp; (scenario_df[&quot;block_n&quot;] === block_n))][&quot;block_type&quot;].iloc[0];&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1&amp;#10;&amp;#10;# Determine the current block type and number&amp;#10;# block_type = 'test'&amp;#10;if block_index &gt; len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    # Skip the remaining test blocks&amp;#10;    testblocks.finished = True&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    block_n = block_index  # block_n in CSV starts from 1&amp;#10;    block_type = scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_n)]['block_type'].iloc[0]&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_testblock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="send_marker(&quot;start_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_testblock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="block_counter_practice">
      <RoutineSettingsComponent name="block_counter_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block_counter_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="blockSetup_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_index += 1;&amp;#10;if ((block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;practice&quot;)][&quot;block_n&quot;].unique().length)) {&amp;#10;    practiceblocks.finished = true;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    block_n = block_index;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Increment block counter&amp;#10;block_index += 1&amp;#10;&amp;#10;# Determine the current block type and number&amp;#10;# block_type = 'test'&amp;#10;if block_index &gt;= len(scenario_df[scenario_df['block'] == 'practice']['block_n'].unique()):&amp;#10;    # Skip the remaining test blocks&amp;#10;    practiceblocks.finished = True&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    block_n = block_index  # block_n in CSV starts from 1&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockSetup_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_start_practiceblock" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="send_marker(&quot;start_practice_block&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="send_marker(&quot;start_practice_block&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_start_practiceblock" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="pause_practice">
      <RoutineSettingsComponent name="pause_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="pause_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="InstructionsText3_practice" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText3_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="go2_practice" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="go2_practice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText3_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="InstructionsText3_practice.setText(instructions[&quot;Text_pause_between_blocks&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the text for the third set of instructions&amp;#10;InstructionsText3_practice.setText(instructions['Text_pause_between_blocks'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText3_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_block_counter_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((is_practice &amp;&amp; (block_index &gt;= scenario_df[(scenario_df[&quot;block&quot;] === &quot;test&quot;)][&quot;block_n&quot;].unique().length))) {&amp;#10;    practiceblocks.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if the block is test and block_n is to skip the loop&amp;#10;if is_practice and block_index &gt;= len(scenario_df[scenario_df['block'] == 'test']['block_n'].unique()):&amp;#10;    practiceblocks.finished = True  # Skip the loop" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_block_counter_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_practice">
      <RoutineSettingsComponent name="instructions_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_practice" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_practice" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.6" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="startInst" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startInst" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_InstructionsText1" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="current_practice_block = scenario_df[((scenario_df[&quot;block&quot;] === &quot;practice&quot;) &amp; (scenario_df[&quot;block_n&quot;] === block_index))][&quot;block_n&quot;].values[0];&amp;#10;if ((current_practice_block === 1)) {&amp;#10;    text_practice.text = instructions[&quot;Practice_Visual&quot;];&amp;#10;} else {&amp;#10;    if ((current_practice_block === 2)) {&amp;#10;        text_practice.text = instructions[&quot;Practice_Auditory&quot;];&amp;#10;    } else {&amp;#10;        if ((current_practice_block === 3)) {&amp;#10;            text_practice.text = instructions[&quot;Practice_Both_1back&quot;];&amp;#10;        } else {&amp;#10;            if ((current_practice_block === 4)) {&amp;#10;                text_practice.text = instructions[&quot;Practice_Both_2back&quot;];&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Extract block_type for the current block&amp;#10;current_practice_block = scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)]['block_n'].values[0]&amp;#10;&amp;#10;# Set the instruction text based on the block type&amp;#10;if current_practice_block == 1:&amp;#10;    text_practice.text = instructions['Practice_Visual']&amp;#10;elif current_practice_block == 2:&amp;#10;    text_practice.text = instructions['Practice_Auditory']&amp;#10;elif current_practice_block == 3:&amp;#10;    text_practice.text = instructions['Practice_Both_1back']&amp;#10;elif current_practice_block == 4:&amp;#10;    text_practice.text = instructions['Practice_Both_2back']" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_InstructionsText1" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_DualNback_start" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker(&quot;DualNback_start&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker('DualNback_start')" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_DualNback_start" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="define_block_rows_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# Initialize block variables&amp;#10;block_index = 0  # Start with the first block for test&amp;#10;is_practice = True" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="block_index = 0;&amp;#10;is_practice = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((current_practice_block === 1)) {&amp;#10;    play_auditory = false;&amp;#10;    play_visual = true;&amp;#10;} else {&amp;#10;    if ((current_practice_block === 2)) {&amp;#10;        play_auditory = true;&amp;#10;        play_visual = false;&amp;#10;    } else {&amp;#10;        if ((current_practice_block === 3)) {&amp;#10;            play_auditory = true;&amp;#10;            play_visual = true;&amp;#10;        } else {&amp;#10;            if ((current_practice_block === 4)) {&amp;#10;                play_auditory = true;&amp;#10;                play_visual = true;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Set the stimuli based on the block type&amp;#10;if current_practice_block == 1: #Practice_Visual&amp;#10;    play_auditory = False&amp;#10;    play_visual = True&amp;#10;elif current_practice_block == 2: # Practice_Auditory&amp;#10;    play_auditory = True&amp;#10;    play_visual = False&amp;#10;elif current_practice_block == 3: # Practice_Both_1back&amp;#10;    play_auditory = True&amp;#10;    play_visual = True&amp;#10;elif current_practice_block == 4: # Practice_Both_2back&amp;#10;    play_auditory = True&amp;#10;    play_visual = True&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="define_block_rows_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions1">
      <RoutineSettingsComponent name="instructions1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="startInst_practice" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="startInst_practice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="text_instructions" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="1.6" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_text_instructions" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="text_instructions.text = instructions[&quot;Text_instructions&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="text_instructions.text = instructions['Text_instructions']&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_text_instructions" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="nametask" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="nametask" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_nametask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="nametask.setText(instructions[&quot;name_task&quot;]);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="nametask.setText(instructions['name_task'])&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_nametask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="main_practice">
      <RoutineSettingsComponent name="main_practice" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="main_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <ImageComponent name="grid_practice" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="ressources/grid.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="grid_practice" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.6, 0.6)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <PolygonComponent name="stimulus_visual_practice" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="stimulus_visual_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <SoundComponent name="stimulus_auditory_practice" plugin="None">
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="hamming"/>
        <Param val="stimulus_auditory_practice" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$auditory_path" valType="str" updates="set every repeat" name="sound"/>
        <Param val="-1" valType="code" updates="None" name="speakerIndex"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="stopWithRoutine"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="1" valType="num" updates="constant" name="volume"/>
      </SoundComponent>
      <KeyboardComponent name="response_visual_practice" plugin="None">
        <Param val="'k'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$visual_correct" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response_visual_practice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <KeyboardComponent name="response_auditory_practice" plugin="None">
        <Param val="'d'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$auditory_correct" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response_auditory_practice" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_stimulus_visual_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="position_dict = {&quot;pos_1&quot;: [(- 0.2), 0.2], &quot;pos_2&quot;: [0, 0.2], &quot;pos_3&quot;: [0.2, 0.2], &quot;pos_4&quot;: [(- 0.2), 0], &quot;pos_5&quot;: [0, 0], &quot;pos_6&quot;: [0.2, 0], &quot;pos_7&quot;: [(- 0.2), (- 0.2)], &quot;pos_8&quot;: [0, (- 0.2)], &quot;pos_9&quot;: [0.2, (- 0.2)]};&amp;#10;current_position = square_position;&amp;#10;stimulus_visual_practice.pos = position_dict[current_position];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Dictionary mapping square_position to coordinates&amp;#10;position_dict = {&amp;#10;    'pos_1': (-0.2, 0.2),&amp;#10;    'pos_2': (0, 0.2),&amp;#10;    'pos_3': (0.2, 0.2),&amp;#10;    'pos_4': (-0.2, 0),&amp;#10;    'pos_5': (0, 0),&amp;#10;    'pos_6': (0.2, 0),&amp;#10;    'pos_7': (-0.2, -0.2),&amp;#10;    'pos_8': (0, -0.2),&amp;#10;    'pos_9': (0.2, -0.2)&amp;#10;}&amp;#10;&amp;#10;# Get the current position from the trial handler&amp;#10;current_position = square_position&amp;#10;&amp;#10;# Set the position of the stimulus_visual polygon&amp;#10;stimulus_visual_practice.pos = position_dict[current_position]&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_stimulus_visual_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="LSL_stimulus_practice" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="send_marker((((&quot;practice_stimulus_&quot; + auditory_path) + &quot;_&quot;) + square_position));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="send_marker(&quot;practice_stimulus_&quot; + auditory_path + &quot;_&quot; + square_position)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="answer_corr_auditory = `response_auditory_${response_auditory.corr}`;&amp;#10;answer_corr_visual = `response_visual_${response_visual.corr}`;&amp;#10;send_marker(answer_corr_auditory);&amp;#10;send_marker(answer_corr_visual);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="answer_corr_auditory = f&quot;response_auditory_{response_auditory.corr}&quot;&amp;#10;answer_corr_visual = f&quot;response_visual_{response_visual.corr}&quot;&amp;#10;send_marker(answer_corr_auditory)  # Function to send the LSL marker&amp;#10;send_marker(answer_corr_visual)  # Function to send the LSL marker&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="LSL_stimulus_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_stimulus" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if play_visual == False:&amp;#10;    stimulus_visual_practice.setAutoDraw(False)  # Disable the visual stimulus&amp;#10;if play_auditory == False:&amp;#10;    stimulus_auditory_practice.stop()  # Stop the auditory stimulus&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((play_visual === false)) {&amp;#10;    stimulus_visual_practice.setAutoDraw(false);&amp;#10;}&amp;#10;if ((play_auditory === false)) {&amp;#10;    stimulus_auditory_practice.stop();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_stimulus" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="feedback_auditory" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="feedback_auditory" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.5, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.3, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$False" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="feedback_visual" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="feedback_visual" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.5, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.3, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$False" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <CodeComponent name="code_feedback" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="feedback_duration = 0.5  # duration of feedback display&amp;#10;show_feedback = False  # initialize feedback visibility&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="feedback_duration = 0.5;&amp;#10;show_feedback = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="show_feedback = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="show_feedback = False  # Reset feedback visibility at the start of each trial&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if response_visual_practice.keys:  # Check if a key was pressed for visual response&amp;#10;    if play_visual:  # Only proceed if visual feedback is needed&amp;#10;        if response_visual_practice.corr:  # If correct response&amp;#10;            feedback_visual.setImage('ressources/correct.png')&amp;#10;        else:  # If incorrect response&amp;#10;            feedback_visual.setImage('ressources/incorrect.png')&amp;#10;        show_feedback = True  # Set flag to show visual feedback&amp;#10;        feedback_start_time = t  # Record the time when feedback starts&amp;#10;        feedback_visual.setAutoDraw(True)  # Start drawing visual feedback&amp;#10;&amp;#10;if response_auditory_practice.keys:  # Check if a key was pressed for auditory response&amp;#10;    if play_auditory:  # Only proceed if auditory feedback is needed&amp;#10;        if response_auditory_practice.corr:  # If correct response&amp;#10;            feedback_auditory.setImage('ressources/correct.png')&amp;#10;        else:  # If incorrect response&amp;#10;            feedback_auditory.setImage('ressources/incorrect.png')&amp;#10;        show_feedback = True  # Set flag to show auditory feedback&amp;#10;        feedback_start_time = t  # Record the time when feedback starts&amp;#10;        feedback_auditory.setAutoDraw(True)  # Start drawing auditory feedback&amp;#10;&amp;#10;if show_feedback:  # If feedback is shown, control timing&amp;#10;    if t &gt;= feedback_start_time + feedback_duration:  # Stop showing feedback after 0.5 seconds&amp;#10;        feedback_visual.setAutoDraw(False)&amp;#10;        feedback_auditory.setAutoDraw(False)&amp;#10;        show_feedback = False  # Reset feedback flag&amp;#10;        continueRoutine = False  # End the routine once feedback is displayed&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (response_visual_practice.keys) {&amp;#10;    if (play_visual) {&amp;#10;        if (response_visual_practice.corr) {&amp;#10;            feedback_visual.setImage(&quot;ressources/correct.png&quot;);&amp;#10;        } else {&amp;#10;            feedback_visual.setImage(&quot;ressources/incorrect.png&quot;);&amp;#10;        }&amp;#10;        show_feedback = true;&amp;#10;        feedback_start_time = t;&amp;#10;        feedback_visual.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if (response_auditory_practice.keys) {&amp;#10;    if (play_auditory) {&amp;#10;        if (response_auditory_practice.corr) {&amp;#10;            feedback_auditory.setImage(&quot;ressources/correct.png&quot;);&amp;#10;        } else {&amp;#10;            feedback_auditory.setImage(&quot;ressources/incorrect.png&quot;);&amp;#10;        }&amp;#10;        show_feedback = true;&amp;#10;        feedback_start_time = t;&amp;#10;        feedback_auditory.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if (show_feedback) {&amp;#10;    if ((t &gt;= (feedback_start_time + feedback_duration))) {&amp;#10;        feedback_visual.setAutoDraw(false);&amp;#10;        feedback_auditory.setAutoDraw(false);&amp;#10;        show_feedback = false;&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="feedback_visual.setAutoDraw(false);&amp;#10;feedback_auditory.setAutoDraw(false);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Clear feedback visuals&amp;#10;feedback_visual.setAutoDraw(False)&amp;#10;feedback_auditory.setAutoDraw(False)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_feedback" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_test">
      <RoutineSettingsComponent name="instructions_test" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_test" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="textblock" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textblock" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$block_type" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="wait" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="wait" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="1.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="init"/>
    <Routine name="instructions1"/>
    <LoopInitiator loopType="TrialHandler" name="practiceblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', 'k'), ('auditory_path', 'ressources/4.wav'), ('auditory_correct', None), ('trial_type', 'visual_only')]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_5'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'practice'), ('block_n', 4), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 4), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/1.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_7'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_7'), ('visual_correct', 'k'), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', 'd'), ('trial_type', 'both')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_4'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/5.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', '3-back'), ('trial', 1), ('square_position', 'pos_9'), ('visual_correct', None), ('auditory_path', 'ressources/4.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', '3-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'test'), ('block_n', 5), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_5'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 5), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/2.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 6), ('block_type', '3-back'), ('trial', 1), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/1.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 6), ('block_type', '3-back'), ('trial', 2), ('square_position', 'pos_9'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="DualNback_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="practiceblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter_practice"/>
    <Routine name="instructions_practice"/>
    <LoopInitiator loopType="TrialHandler" name="practiceTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'practice') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', 'k'), ('auditory_path', 'ressources/4.wav'), ('auditory_correct', None), ('trial_type', 'visual_only')]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_5'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'practice'), ('block_n', 4), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 4), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/1.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_7'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_7'), ('visual_correct', 'k'), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', 'd'), ('trial_type', 'both')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_4'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/5.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', '3-back'), ('trial', 1), ('square_position', 'pos_9'), ('visual_correct', None), ('auditory_path', 'ressources/4.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', '3-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'test'), ('block_n', 5), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_5'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 5), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/2.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 6), ('block_type', '3-back'), ('trial', 1), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/1.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 6), ('block_type', '3-back'), ('trial', 2), ('square_position', 'pos_9'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="DualNback_scenario.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practiceTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="main_practice"/>
    <LoopTerminator name="practiceTrials"/>
    <Routine name="pause_practice"/>
    <LoopTerminator name="practiceblocks"/>
    <Routine name="startTask"/>
    <LoopInitiator loopType="TrialHandler" name="testblocks">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', 'k'), ('auditory_path', 'ressources/4.wav'), ('auditory_correct', None), ('trial_type', 'visual_only')]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_5'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'practice'), ('block_n', 4), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 4), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/1.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_7'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_7'), ('visual_correct', 'k'), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', 'd'), ('trial_type', 'both')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_4'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/5.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', '3-back'), ('trial', 1), ('square_position', 'pos_9'), ('visual_correct', None), ('auditory_path', 'ressources/4.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', '3-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'test'), ('block_n', 5), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_5'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 5), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/2.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 6), ('block_type', '3-back'), ('trial', 1), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/1.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 6), ('block_type', '3-back'), ('trial', 2), ('square_position', 'pos_9'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="DualNback_scenario.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="testblocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_counter"/>
    <Routine name="instructions_test"/>
    <LoopInitiator loopType="TrialHandler" name="testTrials">
      <Param name="Selected rows" updates="None" val="$scenario_df[(scenario_df['block'] == 'test') &amp; (scenario_df['block_n'] == block_index)].index.tolist()" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 1), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', 'k'), ('auditory_path', 'ressources/4.wav'), ('auditory_correct', None), ('trial_type', 'visual_only')]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 2), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_5'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 3), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'practice'), ('block_n', 4), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'practice'), ('block_n', 4), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/1.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_7'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 1), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_7'), ('visual_correct', 'k'), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', 'd'), ('trial_type', 'both')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_4'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 2), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/5.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', '3-back'), ('trial', 1), ('square_position', 'pos_9'), ('visual_correct', None), ('auditory_path', 'ressources/4.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 3), ('block_type', '3-back'), ('trial', 2), ('square_position', 'pos_2'), ('visual_correct', None), ('auditory_path', 'ressources/3.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', '1-back'), ('trial', 1), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 4), ('block_type', '1-back'), ('trial', 2), ('square_position', 'pos_3'), ('visual_correct', None), ('auditory_path', 'ressources/8.wav'), ('auditory_correct', 'd'), ('trial_type', 'auditory_only')]), OrderedDict([('block', 'test'), ('block_n', 5), ('block_type', '2-back'), ('trial', 1), ('square_position', 'pos_5'), ('visual_correct', None), ('auditory_path', 'ressources/7.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 5), ('block_type', '2-back'), ('trial', 2), ('square_position', 'pos_6'), ('visual_correct', None), ('auditory_path', 'ressources/2.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 6), ('block_type', '3-back'), ('trial', 1), ('square_position', 'pos_8'), ('visual_correct', None), ('auditory_path', 'ressources/1.wav'), ('auditory_correct', None), ('trial_type', 'none')]), OrderedDict([('block', 'test'), ('block_n', 6), ('block_type', '3-back'), ('trial', 2), ('square_position', 'pos_9'), ('visual_correct', None), ('auditory_path', 'ressources/6.wav'), ('auditory_correct', None), ('trial_type', 'none')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="DualNback_scenario.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="testTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="main"/>
    <LoopTerminator name="testTrials"/>
    <Routine name="pause"/>
    <LoopTerminator name="testblocks"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>
